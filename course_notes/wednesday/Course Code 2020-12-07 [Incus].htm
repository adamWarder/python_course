<!DOCTYPE html>
<!-- saved from url=(0060)https://incusdata.site/pan/py/python-ipyp-20201207-code.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <meta name="generator" content="pandoc">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">
  <meta name="author" content="Codi Matters">
  <meta name="dcterms.date" content="2020-12-07">
  <meta name="keywords" content="python, course, notes, code, programs">
  <link rel="shortcut icon" href="https://incusdata.site/favicon.ico">
  <title>Course Code 2020-12-07 [Incus]</title>
  <style type="text/css">code{white-space: pre;}</style>
<style type="text/css">
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    background-color: #ffffff;
    color: #a0a0a0;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #a0a0a0;  padding-left: 4px; }
div.sourceCode
  { color: #1f1c1b; background-color: #ffffff; }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span { color: #1f1c1b; } /* Normal */
code span.al { color: #bf0303; background-color: #f7e6e6; font-weight: bold; } /* Alert */
code span.an { color: #ca60ca; } /* Annotation */
code span.at { color: #0057ae; } /* Attribute */
code span.bn { color: #b08000; } /* BaseN */
code span.bu { color: #644a9b; font-weight: bold; } /* BuiltIn */
code span.cf { color: #1f1c1b; font-weight: bold; } /* ControlFlow */
code span.ch { color: #924c9d; } /* Char */
code span.cn { color: #aa5500; } /* Constant */
code span.co { color: #898887; } /* Comment */
code span.cv { color: #0095ff; } /* CommentVar */
code span.do { color: #607880; } /* Documentation */
code span.dt { color: #0057ae; } /* DataType */
code span.dv { color: #b08000; } /* DecVal */
code span.er { color: #bf0303; text-decoration: underline; } /* Error */
code span.ex { color: #0095ff; font-weight: bold; } /* Extension */
code span.fl { color: #b08000; } /* Float */
code span.fu { color: #644a9b; } /* Function */
code span.im { color: #ff5500; } /* Import */
code span.in { color: #b08000; } /* Information */
code span.kw { color: #1f1c1b; font-weight: bold; } /* Keyword */
code span.op { color: #1f1c1b; } /* Operator */
code span.ot { color: #006e28; } /* Other */
code span.pp { color: #006e28; } /* Preprocessor */
code span.re { color: #0057ae; background-color: #e0e9f8; } /* RegionMarker */
code span.sc { color: #3daee9; } /* SpecialChar */
code span.ss { color: #ff5500; } /* SpecialString */
code span.st { color: #bf0303; } /* String */
code span.va { color: #0057ae; } /* Variable */
code span.vs { color: #bf0303; } /* VerbatimString */
code span.wa { color: #bf0303; } /* Warning */
</style>
  <link rel="stylesheet" href="./Course Code 2020-12-07 [Incus]_files/incus-pandoc-fonts.css">
  <link rel="stylesheet" href="./Course Code 2020-12-07 [Incus]_files/incus-pandoc.css">
  <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"></script>
  <![endif]-->
<script id="dataslayerLaunchMonitors">
console.log('** dataslayer: injecting Launch monitors **');
window._satellite = window._satellite || {};
window._satellite._monitors = window._satellite._monitors || [];
window._satellite._monitors.push({
  ruleTriggered: function(e) {
    window.parent.postMessage(
      {
        type: 'dataslayer_launchruletriggered',
        url: window == window.parent ? window.location.href : 'iframe',
        data: JSON.parse(JSON.stringify(e.rule)),
      },
      '*'
    );
  },
  ruleCompleted: function(e) {
    // console.log('** dataslayer: Launch rule completed **', e.rule);
    var rule = JSON.parse(JSON.stringify(e.rule));
    var sendRule = function() {
        if (window.dataslayer) {
            window.parent.postMessage(
                {
                    type: 'dataslayer_launchrulecompleted',
                    url: window == window.parent ? window.location.href : 'iframe',
                    data: rule,
                },
                '*'
            );       
            // console.log('** dataslayer: posted rule '+rule+'**'); 
        } else {
            if (document.readyState === 'complete') {
                // console.log('** dataslayer: giving up on launch **');
                window._dataslayerQueue = window._dataslayerQueue || [];
                window._dataslayerQueue.push({
                  type: 'dataslayer_launchrulecompleted',
                  url: window == window.parent ? window.location.href : 'iframe',
                  data: rule,
                });
                return;
            } else {
                // console.log('** dataslayer: waiting 250ms to repost rule **');
                window.setTimeout(sendRule, 250);
            }
        }
    }
    sendRule();
    if (
      window._satellite &&
      window._satellite._container &&
      window._satellite._container.dataElements &&
      true
    ) {
      var elementNames = Object.keys(
        window._satellite._container.dataElements
      ).sort(function(a, b) {
        var nameA = a.toUpperCase();
        var nameB = b.toUpperCase();

        if (nameA < nameB) {
          return -1;
        } else if (nameA > nameB) {
          return 1;
        } else {
          return 0;
        }
      });

      let launchElements = {};

      for (const elementName of elementNames) {
        var newElement = JSON.parse(
          JSON.stringify(
            window._satellite._container.dataElements[elementName]
          )
        );
  
        let cleanValue = window._satellite.getVar(elementName);
        if (typeof cleanValue === 'function') {
          cleanValue = '(function)';
        } else if (
          typeof cleanValue === 'object' &&
          typeof cleanValue.then === 'function'
        ) {
          cleanValue = '(Promise)';
        }
        launchElements[elementName] = cleanValue;
        // launchElements.push({
        //   key: elementNames[i],
        //   value: cleanValue,
        //   element: newElement,
        // });
      }
      try {
        window.parent.postMessage(
          {
            type: 'dataslayer_launchdataelements',
            data: 'found',
            url: window == window.parent ? window.location.href : 'iframe',
            elements: launchElements
          },
          '*'
        );
      } catch (e) {
        console.warn(e);
      }
  
    }
  },
  ruleConditionFailed: function(e) {
    window.parent.postMessage(
      {
        type: 'dataslayer_launchrulefailed',
        url: window == window.parent ? window.location.href : 'iframe',
        data: JSON.parse(JSON.stringify(e.rule)),
      },
      '*'
    );
  },
});
</script></head>
<body>
<div id="totop-div">
    <hr>
    <a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#" class="totop-div"></a>
</div>
<header>
<div class="pglogo"><a href="https://incusdata.site/index.html" title="Incus Data Complementary Material"><img alt="Incus Data" height="34" width="124" src="./Course Code 2020-12-07 [Incus]_files/incuslogocm.png">
</a>
<a href="https://za.linkedin.com/company/incus-data-pty-ltd"><span class="icon-linkedin-rect"></span></a>
<a href="https://www.facebook.com/incusdata/"><span class="icon-facebook-rect"></span></a>
</div>
<div class="pghdright">
<div class="pgauthor">Codi Matters</div>
<div class="pglicdate">
<div class="pgdate">2020-12-07</div>
<div class="pglic"><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode" title="Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International"><span class="icon-creative-commons"></span> by-nc-sa</a></div>
</div></div>
<div class="pgcategory">Python</div>
</header>
<main role="main">
<div class="pgtitle">&nbsp;&nbsp;</div><div class="page">
<h1 class="pgtitle" style="text-align:left;">Course Code 2020-12-07 [Incus]</h1>
<h1 class="pgsubtitle">Miscellaneous Code — Python Programming</h1>
<div class="pgabstract"><p>A collection of miscellaneous code snippets and examples related to Python, provided as sup­ple­men­ta­ry material for the convenience of attendees of a virtual Python Programming course presented in December 2020. This accompanies the <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html">Python Course Notes 2020-12-07</a>. Code |<a href="http://incusdata.site/pan/py/python-ipyp-20201207-code.html" title="Python Course Code - 2020-12-07 [Incus Data]"><strong>permanent link</strong></a>|.</p>
<div class="pgnav">
<!-- <input type="checkbox" id="isexpanded" -->
<input type="checkbox" id="isexpanded" checked="">
<label for="isexpanded" id="togglebutton">Table of Contents</label>
<nav id="TOC" class="expandable">
<ul>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#snippets">Snippets</a>
<ul>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#input-from-standard-input">Input from Standard Input</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#list-of-keywords">List of Keywords</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#print-errors">Print Errors</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#numeric-validation">Numeric Validation</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#batch-file-launcher">Batch File Launcher</a></li>
</ul></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#example-programs">Example Programs</a>
<ul>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#main-pattern-for-python-scripts">“Main” Pattern for Python Scripts</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#string-formatting">String Formatting</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#x12-multiplication-table">12x12 Multiplication Table</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#table-formatting">Table Formatting</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#circle-calculator-with-html-result">Circle Calculator with HTML Result</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#groceries-in-a-dictionary">Groceries in a Dictionary</a></li>
</ul></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#example-solutions">Example Solutions</a>
<ul>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#adder">Adder</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#first-circle-calculator">First Circle Calculator</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#second-circle-calculator">Second Circle Calculator</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#print-exercise">Print Exercise</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#full-date">Full Date</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#list-experiments">List Experiments</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#boxer">Boxer</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#single-multiplication-table">Single Multiplication Table</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#rectangle">Rectangle</a></li>
</ul></li>
</ul>
</nav></div>
</div>
<div class="admonition">
<p><strong>NOTICE</strong></p>
<p>This page is may be updated at times, so you could check back occasionally. The course notes related to this code, is on a <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html" title="Python Course Notes - 2020-12-07">separate page</a>.</p>
</div>
<h1 id="snippets">Snippets</h1>
<p>This section contains random snippets, patterns and idioms, that are not necessarily complete scripts or programs, but nevertheless useful.</p>
<h2 id="input-from-standard-input">Input from Standard Input</h2>
<p>To read from standard input in Python, you can use the <a href="https://docs.python.org/3/library/functions.html#input" title="PyDoc — input function"><strong><code>input</code></strong> function</a>. It optionally accepts a <em>prompt</em> string as argument, with the trailing newline removed.</p>
<h6 id="py-simple-prompt-input-use-pattern"><em>py — Simple prompt, input, use pattern</em></h6>
<div class="sourceCode" id="cb1"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb1-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb1-1" aria-hidden="true" tabindex="-1"></a>name <span class="op">=</span> <span class="bu">input</span>(<span class="st">"Your name?: "</span>)</span>
<span id="cb1-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"So, hello </span><span class="sc">{}</span><span class="st">!"</span>.<span class="bu">format</span>(name))       <span class="co">#←most common.</span></span>
<span id="cb1-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f"So, hello </span><span class="sc">{</span>name<span class="sc">}</span><span class="ss">!"</span>)               <span class="co">#←Python 3.6+ only.</span></span></code></pre></div>
<p>We use literal string <a href="https://www.python.org/dev/peps/pep-0498/" title="PEP 498 — Literal String Interpolation"><em>interpolation</em></a> in the string argument to the last <code>print</code> function call. This is avail­able only since Python 3.6.x.</p>
<h2 id="list-of-keywords">List of Keywords</h2>
<p>You do no need a reference manual to see the list of Python keyword — just use the <strong><code>keyword</code></strong> module!</p>
<h6 id="py-use-python-to-list-all-keywords"><em>py — Use Python to list all keywords</em></h6>
<div class="sourceCode" id="cb2"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb2-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> keyword</span>
<span id="cb2-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"Keywords:"</span>, keyword.kwlist)</span></code></pre></div>
<h2 id="print-errors">Print Errors</h2>
<p>Good convention suggests that error messages should be printed to the system's <em>standard error</em> device. In Python, this means: <strong><code>sys.stderr</code></strong>, which in turn requires us to <strong><code>import</code></strong> the <strong><code>sys</code></strong> module.</p>
<h6 id="py-print-error-message-to-sys.stderr"><em>py — Print error message to sys.stderr</em></h6>
<div class="sourceCode" id="cb3"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb3-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb3-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb3-2" aria-hidden="true" tabindex="-1"></a>error <span class="op">=</span> ···</span>
<span id="cb3-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> error:</span>
<span id="cb3-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb3-4" aria-hidden="true" tabindex="-1"></a>   sys.stderr.write(<span class="st">"Error message. Will not be redirected"</span>)</span>
<span id="cb3-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb3-5" aria-hidden="true" tabindex="-1"></a>   exit(<span class="dv">1</span>)</span>
<span id="cb3-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"Normal output (stdout). Will be redirected"</span>)</span></code></pre></div>
<p>The reason we do this, is that when redirection is used in a shell, it only redirects standard output, which means that error messages will still be displayed in the terminal / console. You can also use the <strong><code>print()</code></strong> function with a <em>keyword argument</em>: <code>print(···, file=sys.stderr)</code> to write text to the error output handle.</p>
<h2 id="numeric-validation">Numeric Validation</h2>
<p>Python does not have a “isnumber” type of function. Depending on your needs, there are several options, all having pros and cons. The following functions are relatively simple, and the <code>is_float</code> function works for fixed point and exponential notation.</p>
<h6 id="py-numeric-validation-example-functions"><em>py — Numeric validation example functions</em></h6>
<div class="sourceCode" id="cb4"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb4-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> is_int (s):</span>
<span id="cb4-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb4-2" aria-hidden="true" tabindex="-1"></a>   <span class="co">"""</span></span>
<span id="cb4-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co">   Checks if string `s` can be converted to an `int`. Returns `True` or `False`.</span></span>
<span id="cb4-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="co">   """</span></span>
<span id="cb4-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb4-5" aria-hidden="true" tabindex="-1"></a>   <span class="cf">try</span>:</span>
<span id="cb4-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb4-6" aria-hidden="true" tabindex="-1"></a>      <span class="bu">int</span>(s)</span>
<span id="cb4-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb4-7" aria-hidden="true" tabindex="-1"></a>   <span class="cf">except</span>: <span class="co">#←*any* exception</span></span>
<span id="cb4-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb4-8" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> <span class="va">False</span></span>
<span id="cb4-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb4-9" aria-hidden="true" tabindex="-1"></a>   <span class="cf">return</span> <span class="va">True</span></span>
<span id="cb4-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> is_float (s):</span>
<span id="cb4-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb4-12" aria-hidden="true" tabindex="-1"></a>   <span class="co">"""</span></span>
<span id="cb4-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="co">   Checks if string `s` can be converted to a `float`. Returns `True` or `False`.</span></span>
<span id="cb4-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="co">   """</span></span>
<span id="cb4-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb4-15" aria-hidden="true" tabindex="-1"></a>   <span class="cf">try</span>:</span>
<span id="cb4-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb4-16" aria-hidden="true" tabindex="-1"></a>      <span class="bu">float</span>(s)</span>
<span id="cb4-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb4-17" aria-hidden="true" tabindex="-1"></a>   <span class="cf">except</span>: <span class="co">#←*any* exception</span></span>
<span id="cb4-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb4-18" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> <span class="va">False</span></span>
<span id="cb4-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb4-19" aria-hidden="true" tabindex="-1"></a>   <span class="cf">return</span> <span class="va">True</span></span></code></pre></div>
<p>Instead of catching <em>any</em> exception, we could have used: <strong><code>except ValueError:</code></strong>, but it seems a bit specific — any exception would still mean it cannot be converted for whatever reason. A faster option might be the following, but may not deal with all cases:</p>
<h6 id="py-numeric-check-option-1"><em>py — Numeric check, option #1</em></h6>
<div class="sourceCode" id="cb5"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb5-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> is_number (s):</span>
<span id="cb5-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb5-2" aria-hidden="true" tabindex="-1"></a>   <span class="co">"""</span></span>
<span id="cb5-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="co">   Checks if string **`s`** contains only digits. Deals with integers, and fixed</span></span>
<span id="cb5-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="co">   point values, but will fail on exponential floating point notation and also</span></span>
<span id="cb5-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="co">   negative numbers (and on leading `+` sign too). Returns `True` or `False`.</span></span>
<span id="cb5-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="co">   """</span></span>
<span id="cb5-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb5-7" aria-hidden="true" tabindex="-1"></a>   <span class="cf">return</span> s.replace(<span class="st">'.'</span>, <span class="st">''</span>, <span class="dv">1</span>).isdigit()</span></code></pre></div>
<p>You can deal with negative numbers by making it ignore leading plus and minus signs, at the expense of efficiency.</p>
<h6 id="py-numeric-check-option-2"><em>py — Numeric check, option #2</em></h6>
<div class="sourceCode" id="cb6"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb6-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> is_number (s):</span>
<span id="cb6-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb6-2" aria-hidden="true" tabindex="-1"></a>   <span class="co">"""</span></span>
<span id="cb6-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="co">   Checks if string `s` contains only digits. Deals with integers, and fixed</span></span>
<span id="cb6-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="co">   point values, but will fail on exponential floating point notation.</span></span>
<span id="cb6-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="co">   Returns `True` or `False`.</span></span>
<span id="cb6-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="co">   """</span></span>
<span id="cb6-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb6-7" aria-hidden="true" tabindex="-1"></a>   <span class="cf">return</span> s.lstrip(<span class="st">'-+'</span>).s.replace(<span class="st">'.'</span>, <span class="st">''</span>, <span class="dv">1</span>).isdigit()</span></code></pre></div>
<p>Unless you <em>really</em> need the speed, stick with the first two examples, or… use a specialised module from <a href="https://pypi.org/" title="PyPi — Home Page">PyPi</a>, called <a href="https://pypi.org/project/fastnumbers/" title="PyPi — fastnumbers"><code>fastnumbers</code></a>.</p>
<h5 id="conversion-to-floatint-with-optional-fail-value"><em>Conversion to float/int, with optional ‘fail’ value</em></h5>
<div class="sourceCode" id="cb7"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb7-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> to_float(s, fail<span class="op">=</span><span class="va">None</span>):</span>
<span id="cb7-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb7-2" aria-hidden="true" tabindex="-1"></a>   <span class="co">"""</span></span>
<span id="cb7-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="co">   An exception-free “conversion” from a string to a `float`. Optionally,</span></span>
<span id="cb7-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="co">   caller can specify what to return for invalid input (a default).</span></span>
<span id="cb7-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="co">   """</span></span>
<span id="cb7-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb7-6" aria-hidden="true" tabindex="-1"></a>   <span class="cf">try</span>:</span>
<span id="cb7-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb7-7" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> <span class="bu">float</span>(s)</span>
<span id="cb7-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb7-8" aria-hidden="true" tabindex="-1"></a>   <span class="cf">except</span>:</span>
<span id="cb7-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb7-9" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> fail</span>
<span id="cb7-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb7-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> to_int(s, fail<span class="op">=</span><span class="va">None</span>):</span>
<span id="cb7-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb7-12" aria-hidden="true" tabindex="-1"></a>   <span class="co">"""</span></span>
<span id="cb7-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="co">   An exception-free “conversion” from a string to an `int`. Optionally,</span></span>
<span id="cb7-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="co">   caller can specify what to return for invalid input (a default).</span></span>
<span id="cb7-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb7-15" aria-hidden="true" tabindex="-1"></a><span class="co">   """</span></span>
<span id="cb7-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb7-16" aria-hidden="true" tabindex="-1"></a>   <span class="cf">try</span>:</span>
<span id="cb7-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb7-17" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> <span class="bu">int</span>(s)</span>
<span id="cb7-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb7-18" aria-hidden="true" tabindex="-1"></a>   <span class="cf">except</span>:</span>
<span id="cb7-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb7-19" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> fail</span></code></pre></div>
<p>Its documentation for <code>to_float</code> says it all, but you basically use it <em>instead</em> of the built-in <code>float()</code>, but unlike the latter, our <code>to_float()</code> will not throw an exception on invalid strings. Instead, it returns <code>None</code> by default, or you can choose what to return:</p>
<h6 id="py-examples-using-to_float-for-validation"><em>py — Examples using to_float() for validation</em></h6>
<div class="sourceCode" id="cb8"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb8-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb8-1" aria-hidden="true" tabindex="-1"></a>num <span class="op">=</span> to_float(<span class="st">"garbage"</span>, fail<span class="op">=</span><span class="fl">1.23</span>)</span>
<span id="cb8-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f"num = </span><span class="sc">{</span>num<span class="sc">}</span><span class="ss">"</span>)</span>
<span id="cb8-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb8-3" aria-hidden="true" tabindex="-1"></a>num <span class="op">=</span> to_float(<span class="st">"garbage"</span>)</span>
<span id="cb8-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="kw">not</span> num:                             <span class="co">#← `None` is treated as `False`.</span></span>
<span id="cb8-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb8-5" aria-hidden="true" tabindex="-1"></a>   ···                                  <span class="co">#← error handling.</span></span>
<span id="cb8-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> num <span class="kw">is</span> <span class="va">None</span>:                         <span class="co">#← Alternative check for `None`.</span></span>
<span id="cb8-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb8-7" aria-hidden="true" tabindex="-1"></a>   ···                                  <span class="co">#← error handling.</span></span>
<span id="cb8-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb8-8" aria-hidden="true" tabindex="-1"></a>num <span class="op">=</span> to_float(<span class="bu">input</span>(<span class="st">"Enter a float:"</span>))  <span class="co">#← Prompt, read input, and convert.</span></span>
<span id="cb8-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> num <span class="kw">is</span> <span class="va">None</span>:                         <span class="co">#← Alternative check for `None`.</span></span>
<span id="cb8-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb8-10" aria-hidden="true" tabindex="-1"></a>   ···                                  <span class="co">#← error handling.</span></span></code></pre></div>
<p>The same applies to the <code>to_int</code> variant. However, another kind of validation requires a number to be within a certain range: <code>MIN</code>…<code>MAX</code> (inclusive). Here are some example patterns you can use:</p>
<h6 id="py-check-if-a-number-is-in-a-valid-range"><em>py — Check if a number is in a valid range</em></h6>
<div class="sourceCode" id="cb9"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb9-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb9-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb9-2" aria-hidden="true" tabindex="-1"></a>MIN <span class="op">=</span> <span class="fl">1.0</span></span>
<span id="cb9-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb9-3" aria-hidden="true" tabindex="-1"></a>MAX <span class="op">=</span> <span class="fl">20.0</span></span>
<span id="cb9-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb9-4" aria-hidden="true" tabindex="-1"></a>number <span class="op">=</span> to_float(<span class="bu">input</span>(<span class="st">"Number?: "</span>))</span>
<span id="cb9-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> number <span class="op">&lt;</span> MIN <span class="kw">or</span> number <span class="op">&gt;</span> MAX:      <span class="co">#←check if out of range.</span></span>
<span id="cb9-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb9-6" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"0) Out of range!"</span>)</span>
<span id="cb9-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb9-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> number <span class="op">&gt;=</span> MIN <span class="kw">and</span> number <span class="op">&lt;=</span> MAX:   <span class="co">#←check if in range #1</span></span>
<span id="cb9-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb9-9" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"1) Number is in range."</span>)</span>
<span id="cb9-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb9-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb9-11" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> MIN <span class="op">&lt;=</span> number <span class="kw">and</span> number <span class="op">&lt;=</span> MAX:   <span class="co">#←check if in range #2</span></span>
<span id="cb9-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb9-12" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"2) Number is in range."</span>)</span>
<span id="cb9-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb9-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb9-14" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> MIN <span class="op">&lt;=</span> number <span class="op">&lt;=</span> MAX:              <span class="co">#←Python shorthand for previous.</span></span>
<span id="cb9-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb9-15" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"3) Number is in range."</span>)</span></code></pre></div>
<p>Note that the last pattern is very much a Python-only shorthand syntax.</p>
<h2 id="batch-file-launcher">Batch File Launcher</h2>
<p>On Windows, you can use the batch file below as a template to create ‘launchers’ for your other scripts, otherwise you just run your scripts with: <span class="cmdline"><code>python</code> <span class="stx">script-name</span><code>.py</code></span>. If the <code>python</code> executable is not on your <code>PATH</code>, you may have to provide the full path name of the <code>python.exe</code> file. You can also use a shell script on <span class="sc">POSIX</span> systems to launch your Python program.</p>
<h5 id="hello.cmd-launcher-batch-file-for-windows"><strong><code>hello.cmd</code></strong> — <strong><em>Launcher Batch File for Windows</em></strong></h5>
<pre class="batch"><code>@echo off &amp;&amp; setlocal enableextensions
:: This is a ‘launcher’ batch file for `hello.py` as example. Any
:: arguments passed to this batch file on the command line, will be
:: forwarded to the script, in case matters. You can optionally
:: specify the full path to the `python.exe` executable, or activate
:: a Python virtual environment, if needed.
::
:: call %~dp0%pie\Scripts\activate.bat
python %~dp0%~n0.py %*
pause</code></pre>
<p>The <code>pause</code> at the end is optional. Use your discretion, based on the type of program that is launched. The ‘<code>:: call</code>…’ line is an example command-line to activate a Python virtual enviroment in the <code>pie</code> subdirectory of the batch file's directory.</p>
<p>Instead of <code>hello.cmd</code> launching <code>hello.py</code>, you can simply copy and rename the above file to <span class="stx">my-script-name</span><strong><code>.cmd</code></strong> that will launch <span class="stx">my-script-name</span><strong><code>.py</code></strong>. No further changes are required.</p>
<p>The advantages of using batch files as launchers, includes the lack of extra tool requirements, and that users can double-click on the batch file, to run your Python program. Double-clicking on a <strong><code>.py</code></strong> file, will not run it.</p>
<p>You should probably change the documentation comments in the batch file as well (the lines starting with <code>::</code>).</p>
<h1 id="example-programs">Example Programs</h1>
<p>These are complete scripts or programs that illustrate some point or the other.</p>
<h2 id="main-pattern-for-python-scripts">“Main” Pattern for Python Scripts</h2>
<p>Once we start writing scripts that are closer to complete programs, or when writing modules that can also be run as programs, optionally with testing code, the following pattern is very common. It simulates more traditional languages, in that we write a <code>main</code> function.</p>
<h5 id="argsdemotoo.py-arguments-demo-with-main-pattern"><strong><code>argsdemotoo.py</code></strong> — <strong><em>Arguments Demo with Main Pattern</em></strong></h5>
<div class="sourceCode" id="cb11"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb11-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb11-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb11-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb11-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="co">Another demonstration of command line argument retrieval in Python. This</span></span>
<span id="cb11-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="co">program will also just simply list all the arguments passed, but serves</span></span>
<span id="cb11-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="co">to demonstrate another pattern: `if __name__ == "__main__":…`. So, even</span></span>
<span id="cb11-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="co">if you have not learned about functions yet, it is a *pattern* you can</span></span>
<span id="cb11-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="co">easily employ for any script.</span></span>
<span id="cb11-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb11-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main (args):</span>
<span id="cb11-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-12" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb11-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-13" aria-hidden="true" tabindex="-1"></a><span class="co">    Like any function, `main()` must be documented with a ‘docstring’ as</span></span>
<span id="cb11-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-14" aria-hidden="true" tabindex="-1"></a><span class="co">    we have done here.</span></span>
<span id="cb11-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-15" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb11-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-16" aria-hidden="true" tabindex="-1"></a>    <span class="co"># the first entry in the `sys.argv` list, is the script name.</span></span>
<span id="cb11-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-17" aria-hidden="true" tabindex="-1"></a>    <span class="co">#</span></span>
<span id="cb11-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-18" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"Script name: </span><span class="sc">{}</span><span class="st">"</span>.<span class="bu">format</span>(args[<span class="dv">0</span>]))</span>
<span id="cb11-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-20" aria-hidden="true" tabindex="-1"></a>    <span class="co"># the rest of the values in `sys.argv` are the arguments passed. they</span></span>
<span id="cb11-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-21" aria-hidden="true" tabindex="-1"></a>    <span class="co"># are all strings. to handle “options”/“switches”, you have to use a</span></span>
<span id="cb11-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-22" aria-hidden="true" tabindex="-1"></a>    <span class="co"># module to extract arguments starting with `-` (short options) or</span></span>
<span id="cb11-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-23" aria-hidden="true" tabindex="-1"></a>    <span class="co"># `--` (long options).</span></span>
<span id="cb11-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-24" aria-hidden="true" tabindex="-1"></a>    <span class="co">#</span></span>
<span id="cb11-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-25" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i, arg <span class="kw">in</span> <span class="bu">enumerate</span>(args[<span class="dv">1</span>:]):</span>
<span id="cb11-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-26" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">"Argument #</span><span class="sc">{}</span><span class="st"> = </span><span class="sc">{}</span><span class="st">"</span>.<span class="bu">format</span>(i<span class="op">+</span><span class="dv">1</span>, args[i<span class="op">+</span><span class="dv">1</span>]))</span>
<span id="cb11-27"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-28"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-28" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span></span>
<span id="cb11-29"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-30"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-30" aria-hidden="true" tabindex="-1"></a><span class="co"># when a script is `import`ed, its name will *not* be `"__main__"`. it</span></span>
<span id="cb11-31"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-31" aria-hidden="true" tabindex="-1"></a><span class="co"># will only have that specific name, when it is *executed* as a script.</span></span>
<span id="cb11-32"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-32" aria-hidden="true" tabindex="-1"></a><span class="co">#</span></span>
<span id="cb11-33"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-33" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">"__main__"</span>:</span>
<span id="cb11-34"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-34" aria-hidden="true" tabindex="-1"></a>    <span class="im">import</span> sys</span>
<span id="cb11-35"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb11-35" aria-hidden="true" tabindex="-1"></a>    sys.exit(main(sys.argv)) <span class="co">#←optional to call `sys.exit()`</span></span></code></pre></div>
<p>If the rest of one's file also needed access to the <strong><code>sys</code></strong> module, one could have moved the <strong><code>import</code></strong> to the top of the file. Nothing else would need to change.</p>
<h2 id="string-formatting">String Formatting</h2>
<h5 id="strfmt.py-string-formatting-example"><strong><code>strfmt.py</code></strong> — <strong><em>String Formatting Example</em></strong></h5>
<div class="sourceCode" id="cb12"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb12-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb12-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb12-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb12-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="co">Print a formatted price list with a given width. From ‘Beginning Python’.</span></span>
<span id="cb12-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb12-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main(args):</span>
<span id="cb12-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb12-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-9" aria-hidden="true" tabindex="-1"></a><span class="co">    Print table of prices using a command line argument for `width`,</span></span>
<span id="cb12-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-10" aria-hidden="true" tabindex="-1"></a><span class="co">    else prompt the user for a `width`.</span></span>
<span id="cb12-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-11" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb12-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span>:</span>
<span id="cb12-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-13" aria-hidden="true" tabindex="-1"></a>       <span class="cf">if</span> <span class="bu">len</span>(args) <span class="op">&gt;</span> <span class="dv">1</span>:</span>
<span id="cb12-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-14" aria-hidden="true" tabindex="-1"></a>           width <span class="op">=</span> <span class="bu">int</span>(args[<span class="dv">1</span>]) <span class="op">+</span> <span class="dv">2</span></span>
<span id="cb12-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-15" aria-hidden="true" tabindex="-1"></a>       <span class="cf">else</span>:</span>
<span id="cb12-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-16" aria-hidden="true" tabindex="-1"></a>           width <span class="op">=</span> <span class="bu">int</span>(<span class="bu">input</span>(<span class="st">'Please enter width: '</span>)) <span class="op">+</span> <span class="dv">2</span></span>
<span id="cb12-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-17" aria-hidden="true" tabindex="-1"></a>       <span class="cf">if</span> width <span class="op">&lt;</span> <span class="dv">0</span>:</span>
<span id="cb12-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-18" aria-hidden="true" tabindex="-1"></a>           <span class="cf">raise</span> <span class="pp">ValueError</span>(<span class="st">"Width must be positive"</span>)</span>
<span id="cb12-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">except</span> <span class="pp">ValueError</span> <span class="im">as</span> ex:</span>
<span id="cb12-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-20" aria-hidden="true" tabindex="-1"></a>       <span class="bu">print</span>(<span class="st">"ERROR: </span><span class="sc">{ex}</span><span class="st">. Bye."</span>)</span>
<span id="cb12-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-21" aria-hidden="true" tabindex="-1"></a>       <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb12-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-23" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> width <span class="op">&lt;</span> <span class="dv">35</span>:</span>
<span id="cb12-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-24" aria-hidden="true" tabindex="-1"></a>       width <span class="op">=</span> <span class="dv">35</span><span class="op">;</span></span>
<span id="cb12-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-26" aria-hidden="true" tabindex="-1"></a>    <span class="co"># set up some variables for later use. create format strings.</span></span>
<span id="cb12-27"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-27" aria-hidden="true" tabindex="-1"></a>    price_width <span class="op">=</span> <span class="dv">10</span></span>
<span id="cb12-28"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-28" aria-hidden="true" tabindex="-1"></a>    item_width  <span class="op">=</span> width <span class="op">-</span> price_width <span class="op">-</span> <span class="dv">2</span></span>
<span id="cb12-29"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-29" aria-hidden="true" tabindex="-1"></a>    hdr_fmt <span class="op">=</span> <span class="st">'│ </span><span class="sc">{{</span><span class="st">:</span><span class="sc">{}}}</span><span class="st"> │ </span><span class="sc">{{</span><span class="st">:&gt;</span><span class="sc">{}}}</span><span class="st"> │'</span>.<span class="bu">format</span>(item_width, price_width)</span>
<span id="cb12-30"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-30" aria-hidden="true" tabindex="-1"></a>    itm_fmt <span class="op">=</span> <span class="st">'│ </span><span class="sc">{{</span><span class="st">:</span><span class="sc">{}}}</span><span class="st"> │ </span><span class="sc">{{</span><span class="st">:&gt;</span><span class="sc">{}</span><span class="st">.2f</span><span class="sc">}}</span><span class="st"> │'</span>.<span class="bu">format</span>(item_width, price_width)</span>
<span id="cb12-31"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-32"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-32" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> line(c1, c2, c3): <span class="co">#← helper line-drawing function</span></span>
<span id="cb12-33"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-33" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(c1, end<span class="op">=</span><span class="st">''</span>)</span>
<span id="cb12-34"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-34" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">'─'</span> <span class="op">*</span> (item_width <span class="op">+</span> <span class="dv">2</span>), end<span class="op">=</span><span class="st">''</span>)</span>
<span id="cb12-35"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-35" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(c2, end<span class="op">=</span><span class="st">''</span>)</span>
<span id="cb12-36"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-36" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">'─'</span> <span class="op">*</span> (price_width <span class="op">+</span> <span class="dv">2</span>), end<span class="op">=</span><span class="st">''</span>)</span>
<span id="cb12-37"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-37" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(c3)</span>
<span id="cb12-38"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-39"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-39" aria-hidden="true" tabindex="-1"></a>    goods <span class="op">=</span> {<span class="co">#← dictionary of grocery ‘goods’.</span></span>
<span id="cb12-40"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-40" aria-hidden="true" tabindex="-1"></a>        <span class="st">'Apples'</span>                 :  <span class="fl">0.40</span>,</span>
<span id="cb12-41"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-41" aria-hidden="true" tabindex="-1"></a>        <span class="st">'Pears'</span>                  :  <span class="fl">0.50</span>,</span>
<span id="cb12-42"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-42" aria-hidden="true" tabindex="-1"></a>        <span class="st">'Cantaloupes'</span>            :  <span class="fl">1.92</span>,</span>
<span id="cb12-43"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-43" aria-hidden="true" tabindex="-1"></a>        <span class="st">'Dried Apricots (16 oz.)'</span>:  <span class="fl">8.00</span>,</span>
<span id="cb12-44"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-44" aria-hidden="true" tabindex="-1"></a>        <span class="st">'Prunes (4 lbs.)'</span>        : <span class="fl">12.00</span>,</span>
<span id="cb12-45"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-45" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb12-46"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-46" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-47"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-47" aria-hidden="true" tabindex="-1"></a>    line(<span class="st">'┌'</span>, <span class="st">'┬'</span>, <span class="st">'┐'</span>)</span>
<span id="cb12-48"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-48" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(hdr_fmt.<span class="bu">format</span>(<span class="st">'Item'</span>, <span class="st">'Price'</span>))</span>
<span id="cb12-49"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-49" aria-hidden="true" tabindex="-1"></a>    line(<span class="st">'├'</span>, <span class="st">'┼'</span>, <span class="st">'┤'</span>)</span>
<span id="cb12-50"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-50" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> (k, v) <span class="kw">in</span> goods.items():</span>
<span id="cb12-51"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-51" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(itm_fmt.<span class="bu">format</span>(k, v))</span>
<span id="cb12-52"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-52" aria-hidden="true" tabindex="-1"></a>    line(<span class="st">'└'</span>, <span class="st">'┴'</span>, <span class="st">'┘'</span>)</span>
<span id="cb12-53"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-53" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span></span>
<span id="cb12-54"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-55"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-55" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-56"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-56" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span>
<span id="cb12-57"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-57" aria-hidden="true" tabindex="-1"></a>    <span class="im">import</span> sys</span>
<span id="cb12-58"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb12-58" aria-hidden="true" tabindex="-1"></a>    main(sys.argv)</span></code></pre></div>
<h2 id="x12-multiplication-table">12x12 Multiplication Table</h2>
<h5 id="mult12x12.py-12x12-multiplication-table"><strong><code>mult12x12.py</code></strong> — <strong><em>12x12 Multiplication Table</em></strong></h5>
<div class="sourceCode" id="cb13"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb13-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb13-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb13-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb13-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="co">Writes a primary school 12×12 multiplication table to standard output.</span></span>
<span id="cb13-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb13-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main():</span>
<span id="cb13-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb13-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="co">    No user input, no argument processing, just output the table.</span></span>
<span id="cb13-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb13-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-11" aria-hidden="true" tabindex="-1"></a>    nums <span class="op">=</span> <span class="bu">range</span>(<span class="dv">1</span>, <span class="dv">13</span>)</span>
<span id="cb13-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-13" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Write the column labels first.</span></span>
<span id="cb13-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-14" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"</span><span class="ch">\n</span><span class="st">     "</span>, end<span class="op">=</span><span class="st">""</span>)</span>
<span id="cb13-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> n <span class="kw">in</span> nums:</span>
<span id="cb13-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-16" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="ss">f" </span><span class="sc">{n:3d}</span><span class="ss">"</span>, end<span class="op">=</span><span class="st">""</span>)</span>
<span id="cb13-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-17" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"</span><span class="ch">\n</span><span class="st">   +"</span>, <span class="st">"-"</span> <span class="op">*</span> (<span class="bu">len</span>(nums) <span class="op">*</span> <span class="dv">4</span> <span class="op">+</span> <span class="dv">3</span>), sep<span class="op">=</span><span class="st">""</span>, end<span class="op">=</span><span class="st">"+</span><span class="ch">\n</span><span class="st">"</span>)</span>
<span id="cb13-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-19" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Write the multiplication rows.</span></span>
<span id="cb13-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> r <span class="kw">in</span> nums:</span>
<span id="cb13-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-21" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="ss">f"</span><span class="sc">{r:3d}</span><span class="ss">| "</span>, end<span class="op">=</span><span class="st">""</span>)</span>
<span id="cb13-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> c <span class="kw">in</span> nums:</span>
<span id="cb13-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-23" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(<span class="ss">f" </span><span class="sc">{r</span> <span class="op">*</span> <span class="sc">c:3d}</span><span class="ss">"</span>, end<span class="op">=</span><span class="st">""</span>)</span>
<span id="cb13-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-24" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">"  |"</span>)</span>
<span id="cb13-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-26" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Write the bottom line.</span></span>
<span id="cb13-27"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-27" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f"   +"</span>, <span class="st">"-"</span> <span class="op">*</span> (<span class="bu">len</span>(nums) <span class="op">*</span> <span class="dv">4</span> <span class="op">+</span> <span class="dv">3</span>), sep<span class="op">=</span><span class="st">""</span>, end<span class="op">=</span><span class="st">"+</span><span class="ch">\n</span><span class="st">"</span>)</span>
<span id="cb13-28"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-29"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-29" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span></span>
<span id="cb13-30"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-31"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-31" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">"__main__"</span>:</span>
<span id="cb13-32"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-32" aria-hidden="true" tabindex="-1"></a>    <span class="im">import</span> sys</span>
<span id="cb13-33"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb13-33" aria-hidden="true" tabindex="-1"></a>    sys.exit(main())</span></code></pre></div>
<h2 id="table-formatting">Table Formatting</h2>
<p>The string table formatting example from ‘Beginning Python’ on p51, in the ‘main pattern’ form follows:</p>
<h5 id="strfmt.py-string-formatting-from-beginning-python"><strong><code>strfmt.py</code></strong> — <strong><em>String Formatting from Beginning Python</em></strong></h5>
<div class="sourceCode" id="cb14"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb14-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb14-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb14-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb14-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="co">Print a formatted price list with a given width. From ‘Beginning Python’.</span></span>
<span id="cb14-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb14-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-7" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main(args):</span>
<span id="cb14-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb14-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-9" aria-hidden="true" tabindex="-1"></a><span class="co">    Print table of prices using a command line argument for `width`,</span></span>
<span id="cb14-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-10" aria-hidden="true" tabindex="-1"></a><span class="co">    else prompt the user for a `width`.</span></span>
<span id="cb14-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-11" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb14-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-12" aria-hidden="true" tabindex="-1"></a>    <span class="co"># use command line argument for `width`, else prompt user.</span></span>
<span id="cb14-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">len</span>(args) <span class="op">&gt;</span> <span class="dv">1</span>:</span>
<span id="cb14-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-14" aria-hidden="true" tabindex="-1"></a>        width <span class="op">=</span> <span class="bu">int</span>(args[<span class="dv">1</span>]) <span class="op">+</span> <span class="dv">2</span></span>
<span id="cb14-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb14-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-16" aria-hidden="true" tabindex="-1"></a>        width <span class="op">=</span> <span class="bu">int</span>(<span class="bu">input</span>(<span class="st">'Please enter width: '</span>)) <span class="op">+</span> <span class="dv">2</span></span>
<span id="cb14-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-18" aria-hidden="true" tabindex="-1"></a>    <span class="co"># set up some variables for later use. create format strings.</span></span>
<span id="cb14-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-19" aria-hidden="true" tabindex="-1"></a>    price_width <span class="op">=</span> <span class="dv">10</span></span>
<span id="cb14-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-20" aria-hidden="true" tabindex="-1"></a>    item_width  <span class="op">=</span> width <span class="op">-</span> price_width <span class="op">-</span> <span class="dv">2</span></span>
<span id="cb14-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-21" aria-hidden="true" tabindex="-1"></a>    hdr_fmt <span class="op">=</span> <span class="st">'│ </span><span class="sc">{{</span><span class="st">:</span><span class="sc">{}}}</span><span class="st"> │ </span><span class="sc">{{</span><span class="st">:&gt;</span><span class="sc">{}}}</span><span class="st"> │'</span>.<span class="bu">format</span>(item_width, price_width)</span>
<span id="cb14-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-22" aria-hidden="true" tabindex="-1"></a>    itm_fmt <span class="op">=</span> <span class="st">'│ </span><span class="sc">{{</span><span class="st">:</span><span class="sc">{}}}</span><span class="st"> │ </span><span class="sc">{{</span><span class="st">:&gt;</span><span class="sc">{}</span><span class="st">.2f</span><span class="sc">}}</span><span class="st"> │'</span>.<span class="bu">format</span>(item_width, price_width)</span>
<span id="cb14-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-24" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> line(c1, c2, c3): <span class="co">#← helper line-drawing function</span></span>
<span id="cb14-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-25" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(c1, end<span class="op">=</span><span class="st">''</span>)</span>
<span id="cb14-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-26" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">'─'</span> <span class="op">*</span> (item_width <span class="op">+</span> <span class="dv">2</span>), end<span class="op">=</span><span class="st">''</span>)</span>
<span id="cb14-27"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-27" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(c2, end<span class="op">=</span><span class="st">''</span>)</span>
<span id="cb14-28"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-28" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">'─'</span> <span class="op">*</span> (price_width <span class="op">+</span> <span class="dv">2</span>), end<span class="op">=</span><span class="st">''</span>)</span>
<span id="cb14-29"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-29" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(c3)</span>
<span id="cb14-30"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-31"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-31" aria-hidden="true" tabindex="-1"></a>    goods <span class="op">=</span> {<span class="co">#← dictionary of grocery ‘goods’.</span></span>
<span id="cb14-32"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-32" aria-hidden="true" tabindex="-1"></a>        <span class="st">'Apples'</span>                 :  <span class="fl">0.40</span>,</span>
<span id="cb14-33"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-33" aria-hidden="true" tabindex="-1"></a>        <span class="st">'Pears'</span>                  :  <span class="fl">0.50</span>,</span>
<span id="cb14-34"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-34" aria-hidden="true" tabindex="-1"></a>        <span class="st">'Cantaloupes'</span>            :  <span class="fl">1.92</span>,</span>
<span id="cb14-35"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-35" aria-hidden="true" tabindex="-1"></a>        <span class="st">'Dried Apricots (16 oz.)'</span>:  <span class="fl">8.00</span>,</span>
<span id="cb14-36"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-36" aria-hidden="true" tabindex="-1"></a>        <span class="st">'Prunes (4 lbs.)'</span>        : <span class="fl">12.00</span>,</span>
<span id="cb14-37"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-37" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb14-38"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-39"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-39" aria-hidden="true" tabindex="-1"></a>    line(<span class="st">'┌'</span>, <span class="st">'┬'</span>, <span class="st">'┐'</span>)</span>
<span id="cb14-40"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-40" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(hdr_fmt.<span class="bu">format</span>(<span class="st">'Item'</span>, <span class="st">'Price'</span>))</span>
<span id="cb14-41"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-41" aria-hidden="true" tabindex="-1"></a>    line(<span class="st">'├'</span>, <span class="st">'┼'</span>, <span class="st">'┤'</span>)</span>
<span id="cb14-42"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-42" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> (k, v) <span class="kw">in</span> goods.items():</span>
<span id="cb14-43"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-43" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(itm_fmt.<span class="bu">format</span>(k, v))</span>
<span id="cb14-44"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-44" aria-hidden="true" tabindex="-1"></a>    line(<span class="st">'└'</span>, <span class="st">'┴'</span>, <span class="st">'┘'</span>)</span>
<span id="cb14-45"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-46"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-46" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-47"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-47" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span>
<span id="cb14-48"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-48" aria-hidden="true" tabindex="-1"></a>    <span class="im">import</span> sys</span>
<span id="cb14-49"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb14-49" aria-hidden="true" tabindex="-1"></a>    main(sys.argv)</span></code></pre></div>
<hr>
<pre class="output"><code>Please enter width: 50
┌──────────────────────────────────────────┬────────────┐
│ Item                                     │      Price │
├──────────────────────────────────────────┼────────────┤
│ Apples                                   │       0.40 │
│ Pears                                    │       0.50 │
│ Cantaloupes                              │       1.92 │
│ Dried Apricots (16 oz.)                  │       8.00 │
│ Prunes (4 lbs.)                          │      12.00 │
└──────────────────────────────────────────┴────────────┘</code></pre>
<h2 id="circle-calculator-with-html-result">Circle Calculator with HTML Result</h2>
<p>Here is an example circle calculator, but instead of writing results to standard output, it creates an HTML page with the results. It then opens the user's browser with that page.</p>
<h5 id="circhtml.py-circle-calculator-with-html-result"><strong><code>circhtml.py</code></strong> — <strong><em>Circle Calculator with HTML Result</em></strong></h5>
<div class="sourceCode" id="cb16"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb16-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb16-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb16-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb16-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="co">Example circle area and circumference calculator that outputs it results</span></span>
<span id="cb16-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="co">to an HTML page, and then launches the user's default browser to display</span></span>
<span id="cb16-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-6" aria-hidden="true" tabindex="-1"></a><span class="co">that page. It uses the `webbrowser` module for the last task.</span></span>
<span id="cb16-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-7" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb16-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-8" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os, sys, math, webbrowser</span>
<span id="cb16-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-10" aria-hidden="true" tabindex="-1"></a>FILENAME <span class="op">=</span> <span class="st">"circle.html"</span></span>
<span id="cb16-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-11" aria-hidden="true" tabindex="-1"></a>FILEURL <span class="op">=</span> <span class="st">"file://"</span> <span class="op">+</span> <span class="op">\</span></span>
<span id="cb16-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-12" aria-hidden="true" tabindex="-1"></a>   os.path.dirname(os.path.realpath(<span class="va">__file__</span>)) <span class="op">+</span> os.sep <span class="op">+</span> FILENAME</span>
<span id="cb16-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-13" aria-hidden="true" tabindex="-1"></a>TEMPLATE <span class="op">=</span> <span class="st">"""&lt;!doctype html&gt;</span></span>
<span id="cb16-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-14" aria-hidden="true" tabindex="-1"></a><span class="st">&lt;html lang="en"&gt;</span></span>
<span id="cb16-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-15" aria-hidden="true" tabindex="-1"></a><span class="st">&lt;head&gt;</span></span>
<span id="cb16-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-16" aria-hidden="true" tabindex="-1"></a><span class="st">    &lt;meta charset="utf-8"&gt;</span></span>
<span id="cb16-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-17" aria-hidden="true" tabindex="-1"></a><span class="st">    &lt;title&gt;Circle Calculator Results&lt;/title&gt;</span></span>
<span id="cb16-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-18" aria-hidden="true" tabindex="-1"></a><span class="st">    &lt;meta name="description" content="Generated HTML page"&gt;</span></span>
<span id="cb16-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-19" aria-hidden="true" tabindex="-1"></a><span class="st">    &lt;style type="text/css"&gt;</span></span>
<span id="cb16-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-20" aria-hidden="true" tabindex="-1"></a><span class="st">        html </span><span class="sc">{{</span><span class="st"> font: normal normal 150%/1.2 sans-serif; </span><span class="sc">}}</span></span>
<span id="cb16-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-21" aria-hidden="true" tabindex="-1"></a><span class="st">        body </span><span class="sc">{{</span><span class="st"> margin: 2rem 4rem 1rem 4rem; </span><span class="sc">}}</span></span>
<span id="cb16-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-22" aria-hidden="true" tabindex="-1"></a><span class="st">        pre </span><span class="sc">{{</span><span class="st"> font-size: 1.7em; </span><span class="sc">}}</span></span>
<span id="cb16-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-23" aria-hidden="true" tabindex="-1"></a><span class="st">        h1 </span><span class="sc">{{</span><span class="st"> color: red; font-weight: bold; </span><span class="sc">}}</span></span>
<span id="cb16-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-24" aria-hidden="true" tabindex="-1"></a><span class="st">    &lt;/style&gt;</span></span>
<span id="cb16-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-25" aria-hidden="true" tabindex="-1"></a><span class="st">&lt;/head&gt;</span></span>
<span id="cb16-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-26" aria-hidden="true" tabindex="-1"></a><span class="st">&lt;body&gt;</span></span>
<span id="cb16-27"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-27" aria-hidden="true" tabindex="-1"></a><span class="st">&lt;h1&gt;Circle Calculator Results&lt;/h1&gt;</span></span>
<span id="cb16-28"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-28" aria-hidden="true" tabindex="-1"></a><span class="st">&lt;pre&gt;</span></span>
<span id="cb16-29"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-29" aria-hidden="true" tabindex="-1"></a><span class="st">Radius        = </span><span class="sc">{R:12.4f}</span></span>
<span id="cb16-30"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-30" aria-hidden="true" tabindex="-1"></a><span class="st">Circumference = </span><span class="sc">{C:12.4f}</span></span>
<span id="cb16-31"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-31" aria-hidden="true" tabindex="-1"></a><span class="st">Area          = </span><span class="sc">{A:12.4f}</span></span>
<span id="cb16-32"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-32" aria-hidden="true" tabindex="-1"></a><span class="st">&lt;/pre&gt;</span></span>
<span id="cb16-33"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-33" aria-hidden="true" tabindex="-1"></a><span class="st">&lt;/body&gt;</span></span>
<span id="cb16-34"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-34" aria-hidden="true" tabindex="-1"></a><span class="st">"""</span></span>
<span id="cb16-35"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-36"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-37"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-37" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main(args):</span>
<span id="cb16-38"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-38" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb16-39"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-39" aria-hidden="true" tabindex="-1"></a><span class="co">    After obtaining a `radius`, uses `TEMPLATE` to create an HTML page,</span></span>
<span id="cb16-40"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-40" aria-hidden="true" tabindex="-1"></a><span class="co">    saving it to `FILENAME`. If no error occurred, opens the default</span></span>
<span id="cb16-41"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-41" aria-hidden="true" tabindex="-1"></a><span class="co">    browser with that file as argument.</span></span>
<span id="cb16-42"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-42" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb16-43"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-44"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-44" aria-hidden="true" tabindex="-1"></a>    radius <span class="op">=</span> get_radius(args)</span>
<span id="cb16-45"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-45" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> radius <span class="kw">is</span> <span class="va">None</span>:</span>
<span id="cb16-46"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-46" aria-hidden="true" tabindex="-1"></a>        sys.stderr.write(<span class="st">"Invalid or negative radius."</span>)</span>
<span id="cb16-47"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-47" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb16-48"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-48" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-49"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-49" aria-hidden="true" tabindex="-1"></a>    circum <span class="op">=</span> <span class="fl">2.0</span> <span class="op">*</span> math.pi <span class="op">*</span> radius</span>
<span id="cb16-50"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-50" aria-hidden="true" tabindex="-1"></a>    area <span class="op">=</span> math.pi <span class="op">*</span> radius <span class="op">**</span> <span class="dv">2</span></span>
<span id="cb16-51"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-51" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-52"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-52" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span>:</span>
<span id="cb16-53"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-53" aria-hidden="true" tabindex="-1"></a>        <span class="cf">with</span> <span class="bu">open</span>(<span class="st">"circle.html"</span>, <span class="st">"w"</span>) <span class="im">as</span> output:</span>
<span id="cb16-54"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-54" aria-hidden="true" tabindex="-1"></a>            output.write(TEMPLATE.<span class="bu">format</span>(R<span class="op">=</span>radius, C<span class="op">=</span>circum, A<span class="op">=</span>area))</span>
<span id="cb16-55"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-55" aria-hidden="true" tabindex="-1"></a>    <span class="cf">except</span> <span class="pp">IOError</span> <span class="im">as</span> ex:</span>
<span id="cb16-56"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-56" aria-hidden="true" tabindex="-1"></a>        sys.stderr.write(<span class="ss">f"Error opening file</span><span class="ch">\n</span><span class="sc">{ex}</span><span class="ch">\n</span><span class="ss">"</span>)</span>
<span id="cb16-57"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-57" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">2</span></span>
<span id="cb16-58"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-58" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-59"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-59" aria-hidden="true" tabindex="-1"></a>    BROWSER.<span class="bu">open</span>(FILEURL)</span>
<span id="cb16-60"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-60" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span></span>
<span id="cb16-61"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-61" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-62"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-62" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-63"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-63" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> get_radius(args):</span>
<span id="cb16-64"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-64" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb16-65"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-65" aria-hidden="true" tabindex="-1"></a><span class="co">    Either converts a radius from the second item in `sys.argv`, which</span></span>
<span id="cb16-66"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-66" aria-hidden="true" tabindex="-1"></a><span class="co">    must be passed as argument, or prompts the user for a radius. Returns</span></span>
<span id="cb16-67"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-67" aria-hidden="true" tabindex="-1"></a><span class="co">    `None` on invalid input, else a valid (positive) radius.</span></span>
<span id="cb16-68"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-68" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb16-69"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-69" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span>:</span>
<span id="cb16-70"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-70" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> args[<span class="dv">1</span>:]:</span>
<span id="cb16-71"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-71" aria-hidden="true" tabindex="-1"></a>            radius <span class="op">=</span> <span class="bu">float</span>(args[<span class="dv">1</span>])</span>
<span id="cb16-72"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-72" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span>
<span id="cb16-73"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-73" aria-hidden="true" tabindex="-1"></a>            radius <span class="op">=</span> <span class="bu">float</span>(<span class="bu">input</span>(<span class="st">"Radius?: "</span>))</span>
<span id="cb16-74"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-74" aria-hidden="true" tabindex="-1"></a>    <span class="cf">except</span> <span class="pp">ValueError</span>:</span>
<span id="cb16-75"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-75" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">None</span></span>
<span id="cb16-76"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-76" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-77"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-77" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> radius <span class="op">&lt;</span> <span class="fl">0.0</span>:</span>
<span id="cb16-78"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-78" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">None</span></span>
<span id="cb16-79"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-79" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-80"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-80" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> radius</span>
<span id="cb16-81"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-81" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-82"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-82" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-83"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-83" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">"__main__"</span>:</span>
<span id="cb16-84"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-84" aria-hidden="true" tabindex="-1"></a>    <span class="co"># the `webbrowser` module cannot find Firefox on MacOS, if set as the</span></span>
<span id="cb16-85"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-85" aria-hidden="true" tabindex="-1"></a>    <span class="co"># default browser, so we explicitly select Safari on MacOS. For other</span></span>
<span id="cb16-86"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-86" aria-hidden="true" tabindex="-1"></a>    <span class="co"># operating systems, we simply use the default browser.</span></span>
<span id="cb16-87"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-87" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> sys.platform <span class="op">==</span> <span class="st">"darwin"</span>:</span>
<span id="cb16-88"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-88" aria-hidden="true" tabindex="-1"></a>        BROWSER <span class="op">=</span> webbrowser.get(<span class="st">"safari"</span>)</span>
<span id="cb16-89"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-89" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb16-90"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-90" aria-hidden="true" tabindex="-1"></a>        BROWSER <span class="op">=</span> webbrowser.get()</span>
<span id="cb16-91"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb16-91" aria-hidden="true" tabindex="-1"></a>    sys.exit(main(sys.argv))</span></code></pre></div>
<p>The <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" title="Python Docs — Compound Statements / The with Statement"><strong><code>with</code></strong> statement</a> described in <a href="https://www.python.org/dev/peps/pep-0343/"><span class="sc">PEP</span>-343</a> provides syntactic shorthand for a <code>try:</code>…<code>finally:</code> sequence, that will automatically release a resource (like closing a file). With such a statement, we would have had to write something like this instead (if we wanted to ensure that the file <em>will</em> be closed):</p>
<h6 id="py-closing-files-without-with-statement"><em>py — Closing files without <code>with</code> statement</em></h6>
<div class="sourceCode" id="cb17"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb17-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb17-1" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span>:</span>
<span id="cb17-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb17-2" aria-hidden="true" tabindex="-1"></a>        output <span class="op">=</span> <span class="bu">open</span>(<span class="st">"circle.html"</span>, <span class="st">"w"</span>)</span>
<span id="cb17-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb17-3" aria-hidden="true" tabindex="-1"></a>        output.write(TEMPLATE.<span class="bu">format</span>(R<span class="op">=</span>radius, C<span class="op">=</span>circum, A<span class="op">=</span>area))</span>
<span id="cb17-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb17-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">finally</span>:</span>
<span id="cb17-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb17-5" aria-hidden="true" tabindex="-1"></a>        output <span class="kw">and</span> output.close()</span></code></pre></div>
<p>One could add necessary <code>except</code> clauses, if necessary.</p>
<h2 id="groceries-in-a-dictionary">Groceries in a Dictionary</h2>
<p>Python provides the <strong><code>dict()</code></strong> type, which is short for <em>dictionary</em>. This type allows us to map <em>keys</em> to their corresponding <em>values</em>.</p>
<h5 id="grocdict.py-grocery-keyvalue-pairs-in-a-dictionary"><strong><code>grocdict.py</code></strong> — <strong><em>Grocery Key/Value Pairs in a Dictionary</em></strong></h5>
<div class="sourceCode" id="cb18"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb18-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb18-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb18-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb18-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-4" aria-hidden="true" tabindex="-1"></a><span class="co">Using dictionaries to maintain key/value pairs.</span></span>
<span id="cb18-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-5" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb18-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-6" aria-hidden="true" tabindex="-1"></a>VAT <span class="op">=</span> <span class="fl">0.15</span> <span class="co"># value added tax percentage</span></span>
<span id="cb18-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-8" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main (args):</span>
<span id="cb18-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-9" aria-hidden="true" tabindex="-1"></a>    groceries <span class="op">=</span> {} <span class="co"># or: `groceries = dict()`</span></span>
<span id="cb18-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-10" aria-hidden="true" tabindex="-1"></a>    groceries[<span class="st">"pears"</span>]    <span class="op">=</span>   <span class="fl">2.50</span></span>
<span id="cb18-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-11" aria-hidden="true" tabindex="-1"></a>    groceries[<span class="st">"bread"</span>]    <span class="op">=</span>  <span class="fl">13.20</span></span>
<span id="cb18-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-12" aria-hidden="true" tabindex="-1"></a>    groceries[<span class="st">"milk"</span>]     <span class="op">=</span>  <span class="fl">12.00</span></span>
<span id="cb18-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-13" aria-hidden="true" tabindex="-1"></a>    groceries[<span class="st">"yummis"</span>]   <span class="op">=</span>  <span class="fl">42.00</span></span>
<span id="cb18-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-14" aria-hidden="true" tabindex="-1"></a>    groceries[<span class="st">"chicken"</span>]  <span class="op">=</span> <span class="fl">105.99</span></span>
<span id="cb18-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-15" aria-hidden="true" tabindex="-1"></a>    <span class="co"># alternatively...</span></span>
<span id="cb18-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-16" aria-hidden="true" tabindex="-1"></a>    groceries <span class="op">=</span> {</span>
<span id="cb18-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-17" aria-hidden="true" tabindex="-1"></a>       <span class="st">"pears"</span>  :   <span class="fl">2.50</span>,</span>
<span id="cb18-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-18" aria-hidden="true" tabindex="-1"></a>       <span class="st">"bread"</span>  :  <span class="fl">13.20</span>,</span>
<span id="cb18-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-19" aria-hidden="true" tabindex="-1"></a>       <span class="st">"milk"</span>   :  <span class="fl">12.00</span>,</span>
<span id="cb18-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-20" aria-hidden="true" tabindex="-1"></a>       <span class="st">"yummis"</span> :  <span class="fl">42.00</span>,</span>
<span id="cb18-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-21" aria-hidden="true" tabindex="-1"></a>       <span class="st">"chicken"</span>: <span class="fl">105.99</span>,</span>
<span id="cb18-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-22" aria-hidden="true" tabindex="-1"></a>       }</span>
<span id="cb18-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-23" aria-hidden="true" tabindex="-1"></a>    subtotal <span class="op">=</span> <span class="bu">sum</span>(groceries.values())</span>
<span id="cb18-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-24" aria-hidden="true" tabindex="-1"></a>    vatamount <span class="op">=</span> subtotal <span class="op">*</span> VAT</span>
<span id="cb18-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-25" aria-hidden="true" tabindex="-1"></a>    grandtotal <span class="op">=</span> subtotal <span class="op">+</span> vatamount</span>
<span id="cb18-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-26" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>()</span>
<span id="cb18-27"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-27" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f"</span><span class="sc">{</span><span class="st">'Item'</span><span class="sc">:&lt;10}</span><span class="ss"> </span><span class="sc">{</span><span class="st">'Price'</span><span class="sc">:&gt;10}</span><span class="ss">"</span>)</span>
<span id="cb18-28"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-28" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f"</span><span class="sc">{</span><span class="st">'-'</span> <span class="op">*</span> <span class="dv">10</span><span class="sc">}</span><span class="ss"> </span><span class="sc">{</span><span class="st">'-'</span> <span class="op">*</span> <span class="dv">10</span><span class="sc">}</span><span class="ss">"</span>)</span>
<span id="cb18-29"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-29" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> item, price <span class="kw">in</span> groceries.items():</span>
<span id="cb18-30"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-30" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="ss">f"</span><span class="sc">{</span>item<span class="sc">.</span>title()<span class="sc">:&lt;10}</span><span class="ss"> </span><span class="sc">{</span>price<span class="sc">:&gt;10.2f}</span><span class="ss">"</span>)</span>
<span id="cb18-31"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-31" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f"</span><span class="sc">{</span><span class="st">'-'</span> <span class="op">*</span> <span class="dv">10</span><span class="sc">}</span><span class="ss"> </span><span class="sc">{</span><span class="st">'-'</span> <span class="op">*</span> <span class="dv">10</span><span class="sc">}</span><span class="ss">"</span>)</span>
<span id="cb18-32"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-32" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f"</span><span class="sc">{</span><span class="st">'Subtotal'</span><span class="sc">:&lt;10}</span><span class="ss"> </span><span class="sc">{</span>subtotal<span class="sc">:&gt;10.2f}</span><span class="ss">"</span>)</span>
<span id="cb18-33"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-33" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f"</span><span class="sc">{</span><span class="st">'VAT'</span><span class="sc">:&lt;10}</span><span class="ss"> </span><span class="sc">{</span>vatamount<span class="sc">:&gt;10.2f}</span><span class="ss">"</span>)</span>
<span id="cb18-34"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-34" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f"</span><span class="sc">{</span><span class="st">'='</span> <span class="op">*</span> <span class="dv">10</span><span class="sc">}</span><span class="ss"> </span><span class="sc">{</span><span class="st">'='</span> <span class="op">*</span> <span class="dv">10</span><span class="sc">}</span><span class="ss">"</span>)</span>
<span id="cb18-35"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-35" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f"</span><span class="sc">{</span><span class="st">'DAMAGE'</span><span class="sc">:&lt;10}</span><span class="ss"> </span><span class="sc">{</span>grandtotal<span class="sc">:&gt;10.2f}</span><span class="ss">"</span>)</span>
<span id="cb18-36"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-37"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-37" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span>
<span id="cb18-38"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-38" aria-hidden="true" tabindex="-1"></a>    <span class="im">import</span> sys</span>
<span id="cb18-39"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb18-39" aria-hidden="true" tabindex="-1"></a>    main(sys.argv)</span></code></pre></div>
<h1 id="example-solutions">Example Solutions</h1>
<p>Model solutions to programming exercises. Some provide alternative and sometimes more advanced solutions (which was not really required).</p>
<h2 id="adder">Adder</h2>
<p>Write a Python script (program) that prompts the user for two numbers, storing the results in, for example: <code>A</code> and <code>B</code>. Then calculate the sum # of <code>A</code> and <code>B</code>, storing it in <code>C</code>. Finally, print the sum.</p>
<h5 id="adder1.py-add-two-numbers-simplest-version"><strong><code>adder1.py</code></strong> — <strong><em>Add Two Numbers — Simplest Version</em></strong></h5>
<div class="sourceCode" id="cb19"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb19-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb19-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb19-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="co">'''</span></span>
<span id="cb19-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb19-4" aria-hidden="true" tabindex="-1"></a><span class="co">Add two numbers obtained from user input, and print result.</span></span>
<span id="cb19-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb19-5" aria-hidden="true" tabindex="-1"></a><span class="co">'''</span></span>
<span id="cb19-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb19-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb19-7" aria-hidden="true" tabindex="-1"></a>A <span class="op">=</span> <span class="bu">int</span>(<span class="bu">input</span>(<span class="st">"Number #1?: "</span>))</span>
<span id="cb19-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb19-8" aria-hidden="true" tabindex="-1"></a>B <span class="op">=</span> <span class="bu">int</span>(<span class="bu">input</span>(<span class="st">"Number #2?: "</span>))</span>
<span id="cb19-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb19-9" aria-hidden="true" tabindex="-1"></a>C <span class="op">=</span> A <span class="op">+</span> B</span>
<span id="cb19-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb19-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"</span><span class="sc">{0}</span><span class="st"> + </span><span class="sc">{1}</span><span class="st"> = </span><span class="sc">{2}</span><span class="st">"</span>.<span class="bu">format</span>(A, B, C))</span></code></pre></div>
<p>One could instead have used the ‘if name equals main’ pattern instead:</p>
<h5 id="adder2.py-add-two-numbers-with-main-function"><strong><code>adder2.py</code></strong> — <strong><em>Add Two Numbers — With Main Function</em></strong></h5>
<div class="sourceCode" id="cb20"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb20-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb20-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb20-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb20-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb20-3" aria-hidden="true" tabindex="-1"></a><span class="co">'''</span></span>
<span id="cb20-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb20-4" aria-hidden="true" tabindex="-1"></a><span class="co">Add two numbers obtained from user input, and print result.</span></span>
<span id="cb20-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb20-5" aria-hidden="true" tabindex="-1"></a><span class="co">'''</span></span>
<span id="cb20-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb20-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb20-7" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main():</span>
<span id="cb20-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb20-8" aria-hidden="true" tabindex="-1"></a>   <span class="co">'''</span></span>
<span id="cb20-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb20-9" aria-hidden="true" tabindex="-1"></a><span class="co">   Input numbers; perform addition; print result. No validation.</span></span>
<span id="cb20-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb20-10" aria-hidden="true" tabindex="-1"></a><span class="co">   '''</span></span>
<span id="cb20-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb20-11" aria-hidden="true" tabindex="-1"></a>   A <span class="op">=</span> <span class="bu">int</span>(<span class="bu">input</span>(<span class="st">"Number #1?: "</span>))</span>
<span id="cb20-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb20-12" aria-hidden="true" tabindex="-1"></a>   B <span class="op">=</span> <span class="bu">int</span>(<span class="bu">input</span>(<span class="st">"Number #2?: "</span>))</span>
<span id="cb20-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb20-13" aria-hidden="true" tabindex="-1"></a>   C <span class="op">=</span> A <span class="op">+</span> B</span>
<span id="cb20-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb20-14" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"</span><span class="sc">{0}</span><span class="st"> + </span><span class="sc">{1}</span><span class="st"> = </span><span class="sc">{2}</span><span class="st">"</span>.<span class="bu">format</span>(A, B, C))</span>
<span id="cb20-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb20-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb20-16" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span>
<span id="cb20-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb20-17" aria-hidden="true" tabindex="-1"></a>   main()</span></code></pre></div>
<p>The program can still be improved by adding validation, and maybe accept arguments from the command-line. We make use of the above <code>to_int</code> function we presented.</p>
<h5 id="adder3.py-add-two-numbers-better-main-function"><strong><code>adder3.py</code></strong> — <strong><em>Add Two Numbers — Better Main Function</em></strong></h5>
<div class="sourceCode" id="cb21"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb21-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb21-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb21-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="co">'''</span></span>
<span id="cb21-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="co">Add two numbers obtained from user input, and print result.</span></span>
<span id="cb21-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="co">'''</span></span>
<span id="cb21-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-7" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb21-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-9" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main(args):</span>
<span id="cb21-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-10" aria-hidden="true" tabindex="-1"></a>   <span class="co">'''</span></span>
<span id="cb21-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-11" aria-hidden="true" tabindex="-1"></a><span class="co">   Input numbers; perform addition; print result. Validation.</span></span>
<span id="cb21-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-12" aria-hidden="true" tabindex="-1"></a><span class="co">   '''</span></span>
<span id="cb21-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-13" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> <span class="bu">len</span>(args) <span class="op">&gt;</span> <span class="dv">2</span>:</span>
<span id="cb21-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-14" aria-hidden="true" tabindex="-1"></a>      A <span class="op">=</span> to_int(args[<span class="dv">1</span>])</span>
<span id="cb21-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-15" aria-hidden="true" tabindex="-1"></a>      B <span class="op">=</span> to_int(args[<span class="dv">2</span>])</span>
<span id="cb21-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-16" aria-hidden="true" tabindex="-1"></a>   <span class="cf">else</span>:</span>
<span id="cb21-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-17" aria-hidden="true" tabindex="-1"></a>      A <span class="op">=</span> to_int(<span class="bu">input</span>(<span class="st">'Number #1?: '</span>))</span>
<span id="cb21-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-18" aria-hidden="true" tabindex="-1"></a>      B <span class="op">=</span> to_int(<span class="bu">input</span>(<span class="st">'Number #2?: '</span>))</span>
<span id="cb21-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-20" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> A <span class="kw">is</span> <span class="va">None</span> <span class="kw">or</span> B <span class="kw">is</span> <span class="va">None</span>:</span>
<span id="cb21-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-21" aria-hidden="true" tabindex="-1"></a>       <span class="bu">print</span>(<span class="st">'ERROR: One or more bad input values.'</span>, <span class="bu">file</span><span class="op">=</span>sys.stderr)</span>
<span id="cb21-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-22" aria-hidden="true" tabindex="-1"></a>       <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb21-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-24" aria-hidden="true" tabindex="-1"></a>   C <span class="op">=</span> A <span class="op">+</span> B</span>
<span id="cb21-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-25" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"</span><span class="sc">{0}</span><span class="st"> + </span><span class="sc">{1}</span><span class="st"> = </span><span class="sc">{2}</span><span class="st">"</span>.<span class="bu">format</span>(A, B, C))</span>
<span id="cb21-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-26" aria-hidden="true" tabindex="-1"></a>   <span class="cf">return</span> <span class="dv">0</span></span>
<span id="cb21-27"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-28"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-29"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-29" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> to_int(s, fail<span class="op">=</span><span class="va">None</span>):</span>
<span id="cb21-30"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-30" aria-hidden="true" tabindex="-1"></a>   <span class="co">'''</span></span>
<span id="cb21-31"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-31" aria-hidden="true" tabindex="-1"></a><span class="co">   An exception-free “conversion” from a string to an `int`. The</span></span>
<span id="cb21-32"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-32" aria-hidden="true" tabindex="-1"></a><span class="co">   caller can optionally, specify what to return for invalid input</span></span>
<span id="cb21-33"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-33" aria-hidden="true" tabindex="-1"></a><span class="co">   (a default value).</span></span>
<span id="cb21-34"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-34" aria-hidden="true" tabindex="-1"></a><span class="co">   '''</span></span>
<span id="cb21-35"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-35" aria-hidden="true" tabindex="-1"></a>   <span class="cf">try</span>:</span>
<span id="cb21-36"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-36" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> <span class="bu">int</span>(s)</span>
<span id="cb21-37"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-37" aria-hidden="true" tabindex="-1"></a>   <span class="cf">except</span>:</span>
<span id="cb21-38"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-38" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> fail</span>
<span id="cb21-39"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-40"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-41"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-41" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span>
<span id="cb21-42"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb21-42" aria-hidden="true" tabindex="-1"></a>   sys.exit(main(sys.argv))</span></code></pre></div>
<h2 id="first-circle-calculator">First Circle Calculator</h2>
<p>Exercise 1.2. Write a program that calculates the <code>area</code> and <code>circum</code>ference of a circle, given a <code>radius</code>. Prompt the user for the radius. Validate the input. Remember, a <code>radius</code> cannot be negative. Hint: use <code>math.pi</code>.</p>
<p>Here is one solution:</p>
<h5 id="circle1.py-circle-calculator-solution-1"><strong><code>circle1.py</code></strong> — <strong><em>Circle Calculator Solution #1</em></strong></h5>
<div class="sourceCode" id="cb22"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb22-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb22-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb22-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb22-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb22-4" aria-hidden="true" tabindex="-1"></a><span class="co">Calculate area and circumference of a circle, given a radius. The</span></span>
<span id="cb22-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb22-5" aria-hidden="true" tabindex="-1"></a><span class="co">user is prompted for the radius. No error checking or validation!</span></span>
<span id="cb22-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb22-6" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb22-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb22-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb22-8" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> math</span>
<span id="cb22-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb22-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb22-10" aria-hidden="true" tabindex="-1"></a><span class="co"># Prompt user and input a `radius`.</span></span>
<span id="cb22-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb22-11" aria-hidden="true" tabindex="-1"></a>radius <span class="op">=</span> <span class="bu">float</span>(<span class="bu">input</span>(<span class="st">'Radius?: '</span>))</span>
<span id="cb22-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb22-12" aria-hidden="true" tabindex="-1"></a><span class="co"># Calculate and save the circumference (C = 2¶R).</span></span>
<span id="cb22-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb22-13" aria-hidden="true" tabindex="-1"></a>circum <span class="op">=</span> <span class="fl">2.0</span> <span class="op">*</span> math.pi <span class="op">*</span> radius</span>
<span id="cb22-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb22-14" aria-hidden="true" tabindex="-1"></a><span class="co"># Calculate and save the area (A = ¶R^2).</span></span>
<span id="cb22-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb22-15" aria-hidden="true" tabindex="-1"></a>area <span class="op">=</span> math.pi <span class="op">*</span> radius <span class="op">**</span> <span class="dv">2</span></span>
<span id="cb22-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb22-16" aria-hidden="true" tabindex="-1"></a><span class="co"># Print the circumference and area.</span></span>
<span id="cb22-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb22-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"Circum:"</span>, circum)</span>
<span id="cb22-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb22-18" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"Area  :"</span>, area)</span></code></pre></div>
<p>Alternatively, we could have used the ‘if name == main’ pattern. This was optional, but one should get used to this pattern sooner rather than later. Compare it to the previous version (it does <em>exactly</em> the same job; it is just arranged differently).</p>
<h5 id="circle2.py-circle-calculator-solution-2"><strong><code>circle2.py</code></strong> — <strong><em>Circle Calculator Solution #2</em></strong></h5>
<div class="sourceCode" id="cb23"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb23-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb23-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb23-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb23-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-4" aria-hidden="true" tabindex="-1"></a><span class="co">Calculate area and circumference of a circle, given a radius. The</span></span>
<span id="cb23-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-5" aria-hidden="true" tabindex="-1"></a><span class="co">user is prompted for the radius. No error checking or validation!</span></span>
<span id="cb23-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-6" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb23-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-8" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> math</span>
<span id="cb23-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-10" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main ():</span>
<span id="cb23-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-11" aria-hidden="true" tabindex="-1"></a>   <span class="co">"""</span></span>
<span id="cb23-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-12" aria-hidden="true" tabindex="-1"></a><span class="co">   The `main` function prompts the user for the radius, and without</span></span>
<span id="cb23-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-13" aria-hidden="true" tabindex="-1"></a><span class="co">   error checking calculate and print the circle's attributes.</span></span>
<span id="cb23-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-14" aria-hidden="true" tabindex="-1"></a><span class="co">   """</span></span>
<span id="cb23-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-15" aria-hidden="true" tabindex="-1"></a>   <span class="co"># Prompt user and input a `radius`.</span></span>
<span id="cb23-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-16" aria-hidden="true" tabindex="-1"></a>   radius <span class="op">=</span> <span class="bu">float</span>(<span class="bu">input</span>(<span class="st">'Radius?: '</span>))</span>
<span id="cb23-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-17" aria-hidden="true" tabindex="-1"></a>   <span class="co"># Calculate and save the circumference (C = 2¶R).</span></span>
<span id="cb23-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-18" aria-hidden="true" tabindex="-1"></a>   circum <span class="op">=</span> <span class="fl">2.0</span> <span class="op">*</span> math.pi <span class="op">*</span> radius</span>
<span id="cb23-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-19" aria-hidden="true" tabindex="-1"></a>   <span class="co"># Calculate and save the area (A = ¶R^2).</span></span>
<span id="cb23-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-20" aria-hidden="true" tabindex="-1"></a>   area <span class="op">=</span> math.pi <span class="op">*</span> radius <span class="op">**</span> <span class="dv">2</span></span>
<span id="cb23-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-21" aria-hidden="true" tabindex="-1"></a>   <span class="co"># Print the circumference and area.</span></span>
<span id="cb23-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-22" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"Circum:"</span>, circum)</span>
<span id="cb23-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-23" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"Area  :"</span>, area)</span>
<span id="cb23-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-25" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span>
<span id="cb23-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb23-26" aria-hidden="true" tabindex="-1"></a>   main()</span></code></pre></div>
<p>One immediate advantage of using this structure, is that you can use <code>pydoc</code> to format documentation for the project:</p>
<div class="ws cmdline">
<div class="line-block"><sup>$</sup> python -m pydoc circle2<br>
<sup>$</sup> pydoc3 circle2</div>
</div>
<p>The latter command-line will only work if you are lucky to have a ‘launcher’ for the <code>pydoc</code> module (not true on WinPython, for example).</p>
<h2 id="second-circle-calculator">Second Circle Calculator</h2>
<p>The following solution, is more professional in several respects:</p>
<ul>
<li>It validates input.</li>
<li>It conforms to <span class="sc">PEP</span>-8 conventions. (<code>pylint</code>/<code>flake8</code>).</li>
<li>It is well-documented.</li>
<li>It uses function abstractions.</li>
<li>It can be read from top-to-bottom.</li>
<li>It follows the ‘main’ convention.</li>
</ul>
<h5 id="circle3.py-even-better-circle-calculator"><strong><code>circle3.py</code></strong> — <strong><em>Even Better Circle Calculator</em></strong></h5>
<div class="sourceCode" id="cb24"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb24-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb24-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb24-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb24-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-4" aria-hidden="true" tabindex="-1"></a><span class="co">Calculate area and circumference of a circle, given a radius. The</span></span>
<span id="cb24-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-5" aria-hidden="true" tabindex="-1"></a><span class="co">user is prompted for the radius, if not passed on command line.</span></span>
<span id="cb24-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-6" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb24-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-8" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb24-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-9" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> math</span>
<span id="cb24-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-12" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main(args):</span>
<span id="cb24-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb24-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-14" aria-hidden="true" tabindex="-1"></a><span class="co">    The `main` function prompts the user for the radius, and after</span></span>
<span id="cb24-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-15" aria-hidden="true" tabindex="-1"></a><span class="co">    validation, calculate and print the circle's attributes.</span></span>
<span id="cb24-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-16" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb24-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-17" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Use a command-line argument if available.</span></span>
<span id="cb24-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-18" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">len</span>(args) <span class="op">&gt;</span> <span class="dv">1</span>:</span>
<span id="cb24-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-19" aria-hidden="true" tabindex="-1"></a>        radius <span class="op">=</span> to_float(args[<span class="dv">1</span>])</span>
<span id="cb24-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:  <span class="co"># Prompt user and input a `radius`.</span></span>
<span id="cb24-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-21" aria-hidden="true" tabindex="-1"></a>        radius <span class="op">=</span> to_float(<span class="bu">input</span>(<span class="st">"Radius?: "</span>))</span>
<span id="cb24-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-23" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Validate the input. Must be a positive number.</span></span>
<span id="cb24-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-24" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> radius <span class="kw">is</span> <span class="va">None</span>:</span>
<span id="cb24-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-25" aria-hidden="true" tabindex="-1"></a>        sys.stderr.write(<span class="st">"Error. Bad input.</span><span class="ch">\n</span><span class="st">"</span>)</span>
<span id="cb24-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-26" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb24-27"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> radius <span class="op">&lt;</span> <span class="fl">0.0</span>:</span>
<span id="cb24-28"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-28" aria-hidden="true" tabindex="-1"></a>        sys.stderr.write(<span class="st">"Error. Negative radius.</span><span class="ch">\n</span><span class="st">"</span>)</span>
<span id="cb24-29"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-29" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">2</span></span>
<span id="cb24-30"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-31"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-31" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Calculate and save the circumference (C = 2¶R).</span></span>
<span id="cb24-32"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-32" aria-hidden="true" tabindex="-1"></a>    circum <span class="op">=</span> circ_circum(radius)</span>
<span id="cb24-33"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-33" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Calculate and save the area (A = ¶R^2).</span></span>
<span id="cb24-34"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-34" aria-hidden="true" tabindex="-1"></a>    area <span class="op">=</span> circ_area(radius)</span>
<span id="cb24-35"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-36"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-36" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Print the circumference and area.</span></span>
<span id="cb24-37"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-37" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"Circum:"</span>, circum)</span>
<span id="cb24-38"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-38" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"Area  :"</span>, area)</span>
<span id="cb24-39"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-40"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-40" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span></span>
<span id="cb24-41"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-42"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-43"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-43" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> to_float(instr, fail<span class="op">=</span><span class="va">None</span>):</span>
<span id="cb24-44"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-44" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb24-45"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-45" aria-hidden="true" tabindex="-1"></a><span class="co">    An exception-free “conversion” from a string to a `float`. Optionally,</span></span>
<span id="cb24-46"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-46" aria-hidden="true" tabindex="-1"></a><span class="co">    caller can specify what to return for invalid input (a default).</span></span>
<span id="cb24-47"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-47" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb24-48"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-48" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span>:</span>
<span id="cb24-49"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-49" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="bu">float</span>(instr)</span>
<span id="cb24-50"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-50" aria-hidden="true" tabindex="-1"></a>    <span class="cf">except</span> <span class="pp">ValueError</span>:</span>
<span id="cb24-51"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-51" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> fail</span>
<span id="cb24-52"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-52" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-53"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-53" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-54"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-54" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> circ_circum(radius):</span>
<span id="cb24-55"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-55" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb24-56"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-56" aria-hidden="true" tabindex="-1"></a><span class="co">    Calculate the circumference of a circle given a radius.</span></span>
<span id="cb24-57"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-57" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb24-58"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-58" aria-hidden="true" tabindex="-1"></a>    <span class="cf">assert</span> radius <span class="op">&gt;=</span> <span class="fl">0.0</span></span>
<span id="cb24-59"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-59" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="fl">2.0</span> <span class="op">*</span> math.pi <span class="op">*</span> radius</span>
<span id="cb24-60"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-60" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-61"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-61" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-62"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-62" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> circ_area(radius):</span>
<span id="cb24-63"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-63" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb24-64"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-64" aria-hidden="true" tabindex="-1"></a><span class="co">    Calculate the area of a circle given a radius.</span></span>
<span id="cb24-65"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-65" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb24-66"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-66" aria-hidden="true" tabindex="-1"></a>    <span class="cf">assert</span> radius <span class="op">&gt;=</span> <span class="fl">0.0</span></span>
<span id="cb24-67"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-67" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> math.pi <span class="op">*</span> radius <span class="op">**</span> <span class="dv">2</span></span>
<span id="cb24-68"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-68" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-69"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-69" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-70"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-70" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">"__main__"</span>:</span>
<span id="cb24-71"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb24-71" aria-hidden="true" tabindex="-1"></a>    sys.exit(main(sys.argv))</span></code></pre></div>
<p>The only other potential improvements, would involve formatting the output using the <a href="https://docs.python.org/3.8/library/stdtypes.html#str.format" title="Python Docs — str.format() method"><span class="stx">str</span><code>.format</code> method</a>, or the <a href="https://www.python.org/dev/peps/pep-0498/" title="Python PEP — 498 / Literal String Interpolation">‘f-strings’</a> available since Python 3.6.</p>
<h2 id="print-exercise">Print Exercise</h2>
<p>Exercise 2.1. Using the information in the <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#writing-output">Course Notes</a>, and the documenation of the <a href="https://docs.python.org/3/library/functions.html#print" title="Python Docs — Built-in Functions # print"><strong><code>print</code></strong></a> built-in function, create a program that experiments with the function by passing different kinds of arguments, and observing the results.</p>
<h2 id="full-date">Full Date</h2>
<p>Exercise 2.2. Complete the following program, found on page 58 in ‘Beginning Python’. Try to enhance the program to be as pythonic as possible (to the best of your ability / comfort level).</p>
<h5 id="fulldate.py-full-date-example-from-book"><strong><code>fulldate.py</code></strong> — <strong><em>Full Date Example from Book</em></strong></h5>
<div class="sourceCode" id="cb25"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb25-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb25-1" aria-hidden="true" tabindex="-1"></a>months <span class="op">=</span> [</span>
<span id="cb25-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb25-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">'January'</span>, <span class="st">'February'</span>, <span class="st">'March'</span>, <span class="st">'April'</span>, <span class="st">'May'</span>, <span class="st">'June'</span>,</span>
<span id="cb25-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb25-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">'July'</span>, <span class="st">'August'</span>, <span class="st">'September'</span>, <span class="st">'October'</span>, <span class="st">'November'</span>, <span class="st">'December'</span></span>
<span id="cb25-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb25-4" aria-hidden="true" tabindex="-1"></a>    ]</span>
<span id="cb25-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb25-5" aria-hidden="true" tabindex="-1"></a>endings <span class="op">=</span> [<span class="st">'st'</span>, <span class="st">'nd'</span>, <span class="st">'rd'</span>] <span class="op">+</span> <span class="dv">17</span> <span class="op">*</span> [<span class="st">'th'</span>] <span class="op">\</span></span>
<span id="cb25-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb25-6" aria-hidden="true" tabindex="-1"></a>        <span class="op">+</span> [<span class="st">'st'</span>, <span class="st">'nd'</span>, <span class="st">'rd'</span>] <span class="op">+</span>  <span class="dv">7</span> <span class="op">*</span> [<span class="st">'th'</span>] <span class="op">\</span></span>
<span id="cb25-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb25-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">+</span> [<span class="st">'st'</span>]</span>
<span id="cb25-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb25-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb25-9" aria-hidden="true" tabindex="-1"></a>year  <span class="op">=</span> <span class="bu">input</span>(<span class="st">'Year?        : '</span>)</span>
<span id="cb25-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb25-10" aria-hidden="true" tabindex="-1"></a>month <span class="op">=</span> <span class="bu">input</span>(<span class="st">'Month (1-12)?: '</span>)</span>
<span id="cb25-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb25-11" aria-hidden="true" tabindex="-1"></a>day   <span class="op">=</span> <span class="bu">input</span>(<span class="st">'Day   (1=31)?: '</span>)</span>
<span id="cb25-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb25-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb25-13" aria-hidden="true" tabindex="-1"></a>month_no <span class="op">=</span> <span class="bu">int</span>(month)</span>
<span id="cb25-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb25-14" aria-hidden="true" tabindex="-1"></a>day_no   <span class="op">=</span> <span class="bu">int</span>(day)</span></code></pre></div>
<p>Here is an example solution:</p>
<h5 id="fulldate.py-full-date-example-solution"><strong><code>fulldate.py</code></strong> — <strong><em>Full Date Example Solution</em></strong></h5>
<div class="sourceCode" id="cb26"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb26-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb26-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb26-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="co"># vim: set fenc=utf-8 et ts=4 sw=4 sts=4 :</span></span>
<span id="cb26-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-4" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb26-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-5" aria-hidden="true" tabindex="-1"></a><span class="co">Enhanced example implementation of Listing 2-1 in the</span></span>
<span id="cb26-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-6" aria-hidden="true" tabindex="-1"></a><span class="co">‘Beginning Python’ book.</span></span>
<span id="cb26-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-7" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb26-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-9" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb26-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-11" aria-hidden="true" tabindex="-1"></a>MONTHS <span class="op">=</span> [</span>
<span id="cb26-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-12" aria-hidden="true" tabindex="-1"></a>    <span class="st">"January"</span>,</span>
<span id="cb26-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-13" aria-hidden="true" tabindex="-1"></a>    <span class="st">"February"</span>,</span>
<span id="cb26-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-14" aria-hidden="true" tabindex="-1"></a>    <span class="st">"March"</span>,</span>
<span id="cb26-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-15" aria-hidden="true" tabindex="-1"></a>    <span class="st">"April"</span>,</span>
<span id="cb26-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-16" aria-hidden="true" tabindex="-1"></a>    <span class="st">"May"</span>,</span>
<span id="cb26-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-17" aria-hidden="true" tabindex="-1"></a>    <span class="st">"June"</span>,</span>
<span id="cb26-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-18" aria-hidden="true" tabindex="-1"></a>    <span class="st">"July"</span>,</span>
<span id="cb26-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-19" aria-hidden="true" tabindex="-1"></a>    <span class="st">"August"</span>,</span>
<span id="cb26-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-20" aria-hidden="true" tabindex="-1"></a>    <span class="st">"September"</span>,</span>
<span id="cb26-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-21" aria-hidden="true" tabindex="-1"></a>    <span class="st">"October"</span>,</span>
<span id="cb26-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-22" aria-hidden="true" tabindex="-1"></a>    <span class="st">"November"</span>,</span>
<span id="cb26-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-23" aria-hidden="true" tabindex="-1"></a>    <span class="st">"December"</span>,</span>
<span id="cb26-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-24" aria-hidden="true" tabindex="-1"></a>]</span>
<span id="cb26-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-25" aria-hidden="true" tabindex="-1"></a>ENDINGS <span class="op">=</span> <span class="op">\</span></span>
<span id="cb26-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-26" aria-hidden="true" tabindex="-1"></a>    [<span class="st">"st"</span>, <span class="st">"nd"</span>, <span class="st">"rd"</span>] <span class="op">+</span> <span class="dv">17</span> <span class="op">*</span> [<span class="st">"th"</span>] <span class="op">+</span> <span class="op">\</span></span>
<span id="cb26-27"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-27" aria-hidden="true" tabindex="-1"></a>    [<span class="st">"st"</span>, <span class="st">"nd"</span>, <span class="st">"rd"</span>] <span class="op">+</span> <span class="dv">7</span> <span class="op">*</span> [<span class="st">"th"</span>] <span class="op">+</span> [<span class="st">"st"</span>]</span>
<span id="cb26-28"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-29"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-30"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-30" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main():</span>
<span id="cb26-31"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-31" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb26-32"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-32" aria-hidden="true" tabindex="-1"></a><span class="co">    Prompt user for a `year`, `month` and `day`. Use</span></span>
<span id="cb26-33"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-33" aria-hidden="true" tabindex="-1"></a><span class="co">    the input values to print a ‘full date’.</span></span>
<span id="cb26-34"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-34" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb26-35"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-35" aria-hidden="true" tabindex="-1"></a>    year <span class="op">=</span> <span class="bu">input</span>(<span class="st">"Year?        : "</span>)</span>
<span id="cb26-36"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-36" aria-hidden="true" tabindex="-1"></a>    month <span class="op">=</span> <span class="bu">input</span>(<span class="st">"Month (1-12)?: "</span>)</span>
<span id="cb26-37"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-37" aria-hidden="true" tabindex="-1"></a>    day <span class="op">=</span> <span class="bu">input</span>(<span class="st">"Day   (1=31)?: "</span>)</span>
<span id="cb26-38"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-39"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-39" aria-hidden="true" tabindex="-1"></a>    month_no <span class="op">=</span> to_int(month)</span>
<span id="cb26-40"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-40" aria-hidden="true" tabindex="-1"></a>    day_no <span class="op">=</span> to_int(day)</span>
<span id="cb26-41"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-42"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-42" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> month_no <span class="kw">is</span> <span class="va">None</span> <span class="kw">or</span> day_no <span class="kw">is</span> <span class="va">None</span>:</span>
<span id="cb26-43"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-43" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">"ERROR: Bad input!"</span>, <span class="bu">file</span><span class="op">=</span>sys.stderr)</span>
<span id="cb26-44"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-44" aria-hidden="true" tabindex="-1"></a>        sys.exit(<span class="dv">1</span>)</span>
<span id="cb26-45"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-46"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-46" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> month_no <span class="op">&lt;</span> <span class="dv">1</span> <span class="kw">or</span> month_no <span class="op">&gt;</span> <span class="dv">12</span>:</span>
<span id="cb26-47"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-47" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">"ERROR: Month not in range!"</span>, <span class="bu">file</span><span class="op">=</span>sys.stderr)</span>
<span id="cb26-48"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-48" aria-hidden="true" tabindex="-1"></a>        sys.exit(<span class="dv">2</span>)</span>
<span id="cb26-49"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-49" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-50"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-50" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> day_no <span class="op">&lt;</span> <span class="dv">1</span> <span class="kw">or</span> day_no <span class="op">&gt;</span> <span class="dv">31</span>:</span>
<span id="cb26-51"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-51" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">"ERROR: Day not in range!"</span>, <span class="bu">file</span><span class="op">=</span>sys.stderr)</span>
<span id="cb26-52"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-52" aria-hidden="true" tabindex="-1"></a>        sys.exit(<span class="dv">3</span>)</span>
<span id="cb26-53"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-53" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-54"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-54" aria-hidden="true" tabindex="-1"></a>    month_name <span class="op">=</span> MONTHS[month_no <span class="op">-</span> <span class="dv">1</span>]</span>
<span id="cb26-55"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-55" aria-hidden="true" tabindex="-1"></a>    ordinal <span class="op">=</span> day <span class="op">+</span> ENDINGS[day_no <span class="op">-</span> <span class="dv">1</span>]</span>
<span id="cb26-56"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-56" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-57"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-57" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(month_name <span class="op">+</span> <span class="st">" "</span> <span class="op">+</span> ordinal <span class="op">+</span> <span class="st">", "</span> <span class="op">+</span> year)</span>
<span id="cb26-58"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-58" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-59"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-59" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-60"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-60" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> to_int(instr, fail<span class="op">=</span><span class="va">None</span>):</span>
<span id="cb26-61"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-61" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb26-62"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-62" aria-hidden="true" tabindex="-1"></a><span class="co">    An exception-free “conversion” from a string to an `int`.</span></span>
<span id="cb26-63"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-63" aria-hidden="true" tabindex="-1"></a><span class="co">    Optionally, the caller can specify what to return for</span></span>
<span id="cb26-64"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-64" aria-hidden="true" tabindex="-1"></a><span class="co">    invalid input (a default value, in other words).</span></span>
<span id="cb26-65"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-65" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb26-66"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-66" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span>:</span>
<span id="cb26-67"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-67" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="bu">int</span>(instr)</span>
<span id="cb26-68"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-68" aria-hidden="true" tabindex="-1"></a>    <span class="cf">except</span> (<span class="pp">ValueError</span>, <span class="pp">IOError</span>):</span>
<span id="cb26-69"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-69" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> fail</span>
<span id="cb26-70"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-70" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-71"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-71" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-72"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-72" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">"__main__"</span>:</span>
<span id="cb26-73"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb26-73" aria-hidden="true" tabindex="-1"></a>    main()</span></code></pre></div>
<h2 id="list-experiments">List Experiments</h2>
<p>Experiment with Python <em>sequences</em> in particular <strong><code>list</code></strong>, the supporting built-in functions, and literal lists (square bracket delimited values). Here is a starter script, making use of the fact that strings (<strong><code>str</code></strong> types) are <em>iterable</em> and hence also sequences.</p>
<h6 id="listexperiments.py-some-experiments-with-lists"><strong><code>listexperiments.py</code></strong> — <strong><em>Some Experiments with Lists</em></strong></h6>
<div class="sourceCode" id="cb27"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb27-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb27-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb27-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb27-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-4" aria-hidden="true" tabindex="-1"></a><span class="co">Introducing lists (`list`)</span></span>
<span id="cb27-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-5" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb27-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-7" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main():</span>
<span id="cb27-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-8" aria-hidden="true" tabindex="-1"></a>   el <span class="op">=</span> <span class="bu">list</span>()</span>
<span id="cb27-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-9" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="bu">len</span>(el))</span>
<span id="cb27-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-11" aria-hidden="true" tabindex="-1"></a>   lc <span class="op">=</span> <span class="bu">list</span>(<span class="st">'ABCDE'</span>)</span>
<span id="cb27-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-12" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="bu">len</span>(lc))</span>
<span id="cb27-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-13" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(lc)</span>
<span id="cb27-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-15" aria-hidden="true" tabindex="-1"></a>   <span class="cf">for</span> c <span class="kw">in</span> <span class="st">'ABCDE'</span>:</span>
<span id="cb27-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-16" aria-hidden="true" tabindex="-1"></a>      <span class="bu">print</span>(<span class="st">"&lt;"</span> <span class="op">+</span> c <span class="op">+</span> <span class="st">"&gt;"</span>, end<span class="op">=</span><span class="st">" "</span>)</span>
<span id="cb27-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-17" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>()</span>
<span id="cb27-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-19" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span>
<span id="cb27-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb27-20" aria-hidden="true" tabindex="-1"></a>   main()</span></code></pre></div>
<p>Here are links to some relevant topics that should be exercised and eventually mastered:</p>
<ul>
<li><a href="https://docs.python.org/3.8/library/functions.html"><strong><code>list</code></strong></a> type.</li>
<li>list literals: <strong><code>[</code></strong> <span class="stx">item</span><sub>0</sub><strong><code>,</code></strong> … <strong><code>,</code></strong> <span class="stx">item</span><sub>n</sub> <strong><code>]</code></strong></li>
<li><a href="https://docs.python.org/3.8/library/functions.html#len"><strong><code>len</code></strong></a> built-in function.</li>
<li><a href="https://docs.python.org/3.8/library/stdtypes.html#common-sequence-operations">subscripting</a> (<span class="stx">obj</span><strong><code>[</code></strong><span class="stx">offset<span class="alt"></span>index</span><strong><code>]</code></strong>) Remember negative offsets/indexes.</li>
<li><a href="https://docs.python.org/3.8/reference/simple_stmts.html#the-del-statement"><strong><code>del</code></strong></a> statement</li>
<li><a href="https://docs.python.org/3.8/library/functions.html#func-range"><strong><code>range</code></strong></a> built-in function.</li>
<li>methods of most <a href="https://docs.python.org/3.8/library/stdtypes.html#sequence-types-list-tuple-range"><strong>sequence types</strong></a>:
<ul>
<li><span class="stx">list-obj</span><strong><code>.append()</code></strong></li>
<li><span class="stx">list-obj</span><strong><code>.extend()</code></strong></li>
<li><span class="stx">list-obj</span><strong><code>.sort()</code></strong></li>
<li><span class="stx">list-obj</span><strong><code>.pop()</code></strong></li>
<li><span class="stx">list-obj</span><strong><code>.index()</code></strong></li>
</ul></li>
<li><a href="https://docs.python.org/3.8/reference/compound_stmts.html#for"><strong><code>for</code></strong></a> <span class="stx">item</span> <strong><code>in</code></strong> <span class="stx">iterable</span><strong><code>:</code></strong><br>
<span class="tab1"></span>…<span class="stx">item</span>…</li>
</ul>
<h6 id="py-some-sequence-snippets"><em>py — Some sequence snippets</em></h6>
<div class="sourceCode" id="cb28"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb28-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-1" aria-hidden="true" tabindex="-1"></a>l0 <span class="op">=</span> <span class="bu">list</span>()                    <span class="co">#←`l0` is an emtpy `list`.</span></span>
<span id="cb28-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-2" aria-hidden="true" tabindex="-1"></a>l1 <span class="op">=</span> <span class="bu">list</span>(<span class="st">'ABCDE'</span>)             <span class="co">#←`l1` == `['A', 'B', 'C', 'D', 'E' ]`.</span></span>
<span id="cb28-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-3" aria-hidden="true" tabindex="-1"></a>l2 <span class="op">=</span> [<span class="dv">11</span>, <span class="dv">22</span>, <span class="dv">33</span>]              <span class="co">#←literal list example.</span></span>
<span id="cb28-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-4" aria-hidden="true" tabindex="-1"></a>l0 <span class="op">=</span> l2 <span class="op">+</span> [<span class="dv">44</span>, <span class="dv">55</span>]             <span class="co">#←list concatenation with `+` operator.</span></span>
<span id="cb28-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-5" aria-hidden="true" tabindex="-1"></a>n <span class="op">=</span> <span class="bu">len</span>(l0)                    <span class="co">#←`len` returns number of items in sequence.</span></span>
<span id="cb28-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-6" aria-hidden="true" tabindex="-1"></a><span class="kw">del</span>(l0[<span class="dv">2</span>])                     <span class="co">#←remove 3rd item from `l0` (the `33`).</span></span>
<span id="cb28-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-7" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> l0:                   <span class="co">#←process each item in `l0`.</span></span>
<span id="cb28-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-8" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(i)</span>
<span id="cb28-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>([<span class="dv">11</span>, <span class="dv">22</span>, <span class="dv">33</span>] <span class="op">*</span> <span class="dv">3</span>)        <span class="co">#⇒[11, 22, 33, 11, 22, 33, 11, 22, 33]</span></span>
<span id="cb28-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-10" aria-hidden="true" tabindex="-1"></a>l1 <span class="op">=</span> [<span class="dv">99</span>, <span class="dv">77</span>, <span class="dv">11</span>, <span class="dv">33</span>, <span class="dv">22</span>]</span>
<span id="cb28-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-11" aria-hidden="true" tabindex="-1"></a>l1.sort()<span class="op">;</span>     <span class="bu">print</span>(l1)       <span class="co">#⇒[11, 22, 33, 77, 99]</span></span>
<span id="cb28-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-12" aria-hidden="true" tabindex="-1"></a>l1.append(<span class="dv">44</span>)<span class="op">;</span> <span class="bu">print</span>(l1)       <span class="co">#⇒[11, 22, 33, 77, 99, 44]</span></span>
<span id="cb28-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-13" aria-hidden="true" tabindex="-1"></a>l1.pop()<span class="op">;</span> l1.pop()<span class="op">;</span> <span class="bu">print</span>(l1)  <span class="co">#⇒[11, 22, 33, 77]</span></span>
<span id="cb28-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-14" aria-hidden="true" tabindex="-1"></a>n <span class="op">=</span> l1.index(<span class="dv">77</span>)               <span class="co">#←find location of `77` (offset/index).</span></span>
<span id="cb28-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-15" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(l1[n], l1[<span class="op">-</span><span class="dv">1</span>])           <span class="co">#⇒77 77</span></span>
<span id="cb28-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-16" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">list</span>(<span class="bu">range</span>(<span class="dv">5</span>)))          <span class="co">#⇒[0, 1, 2, 3, 4]</span></span>
<span id="cb28-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">list</span>(<span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">6</span>,<span class="dv">2</span>)))      <span class="co">#⇒[1, 3, 5]</span></span>
<span id="cb28-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-18" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">list</span>(<span class="bu">range</span>(<span class="dv">6</span>,<span class="dv">1</span>,<span class="op">-</span><span class="dv">2</span>)))     <span class="co">#⇒[6, 4, 2]</span></span>
<span id="cb28-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-19" aria-hidden="true" tabindex="-1"></a>result <span class="op">=</span> []                    <span class="co">#⇒empty list.</span></span>
<span id="cb28-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-20" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">6</span>):</span>
<span id="cb28-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-21" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"</span><span class="sc">{0}</span><span class="st">^2 = </span><span class="sc">{1:3}</span><span class="st">"</span>.<span class="bu">format</span>(i, i<span class="op">**</span><span class="dv">2</span>))</span>
<span id="cb28-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-22" aria-hidden="true" tabindex="-1"></a>   result.append(i<span class="op">**</span><span class="dv">2</span>)</span>
<span id="cb28-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-24" aria-hidden="true" tabindex="-1"></a>result <span class="op">=</span> []</span>
<span id="cb28-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-25" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> [<span class="dv">11</span>, <span class="dv">22</span>, <span class="dv">33</span>]:</span>
<span id="cb28-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-26" aria-hidden="true" tabindex="-1"></a>   result.append(<span class="bu">int</span>(i <span class="op">+</span> i <span class="op">*</span> <span class="fl">0.1</span> <span class="op">+</span> <span class="fl">0.5</span>))</span>
<span id="cb28-27"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-28"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-28" aria-hidden="true" tabindex="-1"></a>l1 <span class="op">=</span> [<span class="dv">11</span>, <span class="dv">22</span>, <span class="dv">33</span>, <span class="dv">44</span>]</span>
<span id="cb28-29"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-29" aria-hidden="true" tabindex="-1"></a>l2 <span class="op">=</span> [<span class="dv">55</span>, <span class="dv">66</span>, <span class="dv">77</span>, <span class="dv">88</span>]</span>
<span id="cb28-30"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-30" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="bu">len</span>(l1)):</span>
<span id="cb28-31"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb28-31" aria-hidden="true" tabindex="-1"></a>   l1[i] <span class="op">=</span> l2[i] <span class="op">*</span> <span class="dv">10</span><span class="op">;</span></span></code></pre></div>
<h2 id="boxer">Boxer</h2>
<p>Exercise 2.4. (Optional). Here is the code for Listing 2-3 in ‘Beginning Python’. See how much more pythonic you can make it. Also, use the <strong><code>shutil</code></strong> module to find the width of the terminal, instead of hard-coding the value.</p>
<h6 id="py-find-terminal-width-and-height-1"><em>py — Find Terminal Width and Height #1</em></h6>
<div class="sourceCode" id="cb29"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb29-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> shutil</span>
<span id="cb29-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb29-2" aria-hidden="true" tabindex="-1"></a>width <span class="op">=</span> shutil.get_terminal_size().columns</span>
<span id="cb29-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb29-3" aria-hidden="true" tabindex="-1"></a>height <span class="op">=</span> shutil.get_terminal_size().lines</span></code></pre></div>
<p>Alternatively, one can assign the result to a variable:</p>
<h6 id="py-find-terminal-width-and-height-2"><em>py — Find Terminal Width and Height #2</em></h6>
<div class="sourceCode" id="cb30"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb30-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> shutil</span>
<span id="cb30-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb30-2" aria-hidden="true" tabindex="-1"></a>ts <span class="op">=</span> shutil.get_terminal_size()</span>
<span id="cb30-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb30-3" aria-hidden="true" tabindex="-1"></a>width <span class="op">=</span> ts.columns</span>
<span id="cb30-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb30-4" aria-hidden="true" tabindex="-1"></a>height <span class="op">=</span> ts.lines</span></code></pre></div>
<p>Use the above knowledge and prior experience to ‘fix’ this program…</p>
<h5 id="boxer1.py-frame-sentence-in-a-centered-box"><strong><code>boxer1.py</code></strong> — <strong><em>Frame Sentence in a Centered Box</em></strong></h5>
<div class="sourceCode" id="cb31"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb31-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="co"># From Listing 2-3 in ‘Beginning Python’.</span></span>
<span id="cb31-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb31-2" aria-hidden="true" tabindex="-1"></a>sentence <span class="op">=</span> <span class="bu">input</span>(<span class="st">'Sentence?: '</span>)</span>
<span id="cb31-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb31-3" aria-hidden="true" tabindex="-1"></a>screen_width <span class="op">=</span> <span class="dv">80</span>                 <span class="co">#←fix this.</span></span>
<span id="cb31-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb31-4" aria-hidden="true" tabindex="-1"></a>text_width <span class="op">=</span> <span class="bu">len</span>(sentence)</span>
<span id="cb31-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb31-5" aria-hidden="true" tabindex="-1"></a>box_width <span class="op">=</span> text_width <span class="op">+</span> <span class="dv">6</span></span>
<span id="cb31-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb31-6" aria-hidden="true" tabindex="-1"></a>left_margin <span class="op">=</span> (screen_width <span class="op">-</span> box_width) <span class="op">//</span> <span class="dv">2</span></span>
<span id="cb31-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb31-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb31-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>()</span>
<span id="cb31-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb31-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">' '</span> <span class="op">*</span> left_margin <span class="op">+</span> <span class="st">'┌'</span>   <span class="op">+</span> <span class="st">'─'</span> <span class="op">*</span> (box_width <span class="op">-</span> <span class="dv">2</span>)  <span class="op">+</span> <span class="st">'┐'</span>   )</span>
<span id="cb31-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb31-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">' '</span> <span class="op">*</span> left_margin <span class="op">+</span> <span class="st">'│  '</span> <span class="op">+</span> <span class="st">' '</span> <span class="op">*</span> text_width       <span class="op">+</span> <span class="st">'   │'</span>)</span>
<span id="cb31-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb31-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">' '</span> <span class="op">*</span> left_margin <span class="op">+</span> <span class="st">'│  '</span> <span class="op">+</span> sentence               <span class="op">+</span> <span class="st">'   │'</span>)</span>
<span id="cb31-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb31-12" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">' '</span> <span class="op">*</span> left_margin <span class="op">+</span> <span class="st">'│  '</span> <span class="op">+</span> <span class="st">' '</span> <span class="op">*</span> text_width       <span class="op">+</span> <span class="st">'   │'</span>)</span>
<span id="cb31-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb31-13" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">' '</span> <span class="op">*</span> left_margin <span class="op">+</span> <span class="st">'└'</span>   <span class="op">+</span> <span class="st">'─'</span> <span class="op">*</span> (box_width <span class="op">-</span> <span class="dv">2</span>)  <span class="op">+</span> <span class="st">'┘'</span>   )</span>
<span id="cb31-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb31-14" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>()</span></code></pre></div>
<p>The <span class="sc">ASCII</span> characters in the original listing, were replaced with Unicode line-drawing characters. Ensure your editor is set to <span class="sc">UTF-8</span> before pasting this code.</p>
<h5 id="boxer2.py-boxer-exercise-example-solution"><strong><code>boxer2.py</code></strong> — <strong><em>Boxer Exercise Example Solution</em></strong></h5>
<div class="sourceCode" id="cb32"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb32-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb32-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb32-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb32-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-4" aria-hidden="true" tabindex="-1"></a><span class="co">Writes framed text centered on the terminal.</span></span>
<span id="cb32-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-5" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb32-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb32-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-7" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> shutil</span>
<span id="cb32-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-10" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main(args):</span>
<span id="cb32-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb32-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-12" aria-hidden="true" tabindex="-1"></a><span class="co">    Gets `width` from `shutil.get_terminal_size()`, Prompts for `text`</span></span>
<span id="cb32-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-13" aria-hidden="true" tabindex="-1"></a><span class="co">    to center in a box, if a command line argument is not present. It</span></span>
<span id="cb32-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-14" aria-hidden="true" tabindex="-1"></a><span class="co">    uses ANSI/VT100 colours on output.</span></span>
<span id="cb32-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-15" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb32-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-16" aria-hidden="true" tabindex="-1"></a>    width <span class="op">=</span> shutil.get_terminal_size().columns</span>
<span id="cb32-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-17" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'</span><span class="ch">\x1B</span><span class="st">[2J</span><span class="ch">\x1B</span><span class="st">[0H'</span>)</span>
<span id="cb32-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">len</span>(args) <span class="op">&gt;</span> <span class="dv">1</span>:                 <span class="co">#←if argument available, use it.</span></span>
<span id="cb32-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-20" aria-hidden="true" tabindex="-1"></a>        text <span class="op">=</span> args[<span class="dv">1</span>]</span>
<span id="cb32-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:                             <span class="co">#←else prompt the user.</span></span>
<span id="cb32-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-22" aria-hidden="true" tabindex="-1"></a>        text <span class="op">=</span> <span class="bu">input</span>(<span class="st">"Text?: "</span>)</span>
<span id="cb32-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-24" aria-hidden="true" tabindex="-1"></a>    txtlen <span class="op">=</span> <span class="bu">len</span>(text)</span>
<span id="cb32-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-25" aria-hidden="true" tabindex="-1"></a>    boxsze <span class="op">=</span> txtlen <span class="op">+</span> <span class="dv">6</span></span>
<span id="cb32-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-26" aria-hidden="true" tabindex="-1"></a>    margin <span class="op">=</span> <span class="st">" "</span> <span class="op">*</span> ((width <span class="op">-</span> boxsze) <span class="op">//</span> <span class="dv">2</span>)</span>
<span id="cb32-27"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-28"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-28" aria-hidden="true" tabindex="-1"></a>    hue_border <span class="op">=</span> <span class="st">"</span><span class="ch">\x1b</span><span class="st">[90m"</span>           <span class="co">#←dark gray</span></span>
<span id="cb32-29"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-29" aria-hidden="true" tabindex="-1"></a>    hue_text   <span class="op">=</span> <span class="st">"</span><span class="ch">\x1b</span><span class="st">[92m"</span>           <span class="co">#←green</span></span>
<span id="cb32-30"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-31"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-31" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(hue_border)</span>
<span id="cb32-32"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-32" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(margin <span class="op">+</span> <span class="st">"┌"</span> <span class="op">+</span> <span class="st">"─"</span> <span class="op">*</span> (boxsze <span class="op">-</span> <span class="dv">2</span>) <span class="op">+</span> <span class="st">"┐"</span>)</span>
<span id="cb32-33"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-33" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(margin <span class="op">+</span> <span class="st">"│"</span> <span class="op">+</span> hue_text <span class="op">+</span> <span class="st">" "</span> <span class="op">*</span> <span class="dv">2</span> <span class="op">+</span> text <span class="op">+</span></span>
<span id="cb32-34"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-34" aria-hidden="true" tabindex="-1"></a>            <span class="st">" "</span> <span class="op">*</span> <span class="dv">2</span> <span class="op">+</span> hue_border <span class="op">+</span> <span class="st">"│"</span>)</span>
<span id="cb32-35"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-35" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(margin <span class="op">+</span> <span class="st">"└"</span> <span class="op">+</span> <span class="st">"─"</span> <span class="op">*</span> (boxsze <span class="op">-</span> <span class="dv">2</span>) <span class="op">+</span> <span class="st">"┘"</span>)</span>
<span id="cb32-36"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-36" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"</span><span class="ch">\x1b</span><span class="st">[0m"</span>)</span>
<span id="cb32-37"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-38"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-38" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span>                          <span class="co">#←‘success’ exit code.</span></span>
<span id="cb32-39"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-40"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-41"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-41" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">"__main__"</span>:</span>
<span id="cb32-42"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb32-42" aria-hidden="true" tabindex="-1"></a>    sys.exit(main(sys.argv))</span></code></pre></div>
<p>By using <a href="https://en.m.wikipedia.org/wiki/ANSI_escape_code" title="Wikipedia — ANSI escape codes">ANSI/VT100</a>, one can output text in colour. This also applies to Windows Terminal and later versions of Windows Console if enabled.</p>
<p>This example also shows how to process a command line argument, and returning a process status code the invoking process (the shell generally). An exit code of <code>0</code> is considered a ‘successful termination’ by <em>convention</em>.</p>
<h2 id="single-multiplication-table">Single Multiplication Table</h2>
<p>Exercise 3.1. Write a program that prints the multiplication table from <code>1</code>..<code>12</code> for some <code>multi</code>plier. Read the multiplier from command arguments, or if not available, prompt the user for the value. Validate that input, which must be in the range <code>1</code>…<code>12</code> inclusive.</p>
<p>Here is the basic framework for such a program. Much of the program is complete… simply fill in the rest of the code: documentation and replace all instances of: <code>????</code> with proper Python.</p>
<h5 id="multtable_q.py-multiplication-table-for-one-multiplier"><strong><code>multtable_q.py</code></strong> — <strong><em>Multiplication Table for One Multiplier</em></strong></h5>
<div class="sourceCode" id="cb33"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb33-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb33-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb33-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb33-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-4" aria-hidden="true" tabindex="-1"></a><span class="co">Module documentation. Write something meaningful here.</span></span>
<span id="cb33-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-5" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb33-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-7" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb33-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-9" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main(args):</span>
<span id="cb33-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-10" aria-hidden="true" tabindex="-1"></a>   <span class="co">"""</span></span>
<span id="cb33-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-11" aria-hidden="true" tabindex="-1"></a><span class="co">   Documentation for `main`. Write something meaningful here.</span></span>
<span id="cb33-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-12" aria-hidden="true" tabindex="-1"></a><span class="co">   """</span></span>
<span id="cb33-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-13" aria-hidden="true" tabindex="-1"></a>   <span class="co"># Get `multiplier` from command-argument, else, prompt the user.</span></span>
<span id="cb33-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-14" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> ????:</span>
<span id="cb33-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-15" aria-hidden="true" tabindex="-1"></a>      multiplier <span class="op">=</span> ????</span>
<span id="cb33-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-16" aria-hidden="true" tabindex="-1"></a>   <span class="cf">else</span>:</span>
<span id="cb33-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-17" aria-hidden="true" tabindex="-1"></a>      multiplier <span class="op">=</span> <span class="bu">int</span>(<span class="bu">input</span>(<span class="st">"Multiplier?: "</span>))</span>
<span id="cb33-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-19" aria-hidden="true" tabindex="-1"></a>   <span class="co"># Validate that `multiplier` is in the range `1`..`12` inclusive.</span></span>
<span id="cb33-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-20" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> ????:</span>
<span id="cb33-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-21" aria-hidden="true" tabindex="-1"></a>      <span class="bu">print</span>(<span class="st">"Error. Out of range."</span>, <span class="bu">file</span><span class="op">=</span>sys.stderr)</span>
<span id="cb33-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-22" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb33-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-24" aria-hidden="true" tabindex="-1"></a>   <span class="cf">for</span> n <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>, <span class="dv">12</span><span class="op">+</span><span class="dv">1</span>):</span>
<span id="cb33-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-25" aria-hidden="true" tabindex="-1"></a>      <span class="bu">print</span>(????)</span>
<span id="cb33-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-27"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-27" aria-hidden="true" tabindex="-1"></a>   <span class="cf">return</span> <span class="dv">0</span></span>
<span id="cb33-28"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-29"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-29" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span>
<span id="cb33-30"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb33-30" aria-hidden="true" tabindex="-1"></a>   sys.exit(main(sys.argv))</span></code></pre></div>
<p>Here is an example solution.</p>
<h5 id="multtable_a.py-multiplication-table-for-one-multiplier"><strong><code>multtable_a.py</code></strong> — <strong><em>Multiplication Table for One Multiplier</em></strong></h5>
<div class="sourceCode" id="cb34"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb34-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb34-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb34-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb34-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-4" aria-hidden="true" tabindex="-1"></a><span class="co">Multiplication table for a single multiplier.</span></span>
<span id="cb34-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-5" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb34-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-7" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb34-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-9" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main(args):</span>
<span id="cb34-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-10" aria-hidden="true" tabindex="-1"></a>   <span class="co">"""</span></span>
<span id="cb34-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-11" aria-hidden="true" tabindex="-1"></a><span class="co">   Reads `multiplier` from command-line argument, or prompt the user.</span></span>
<span id="cb34-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-12" aria-hidden="true" tabindex="-1"></a><span class="co">   Then writes a multiplication table to standard output. Terminates</span></span>
<span id="cb34-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-13" aria-hidden="true" tabindex="-1"></a><span class="co">   with an error message if given out of range input. Non-numeric</span></span>
<span id="cb34-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-14" aria-hidden="true" tabindex="-1"></a><span class="co">   input will cause an exception, which is not handled.</span></span>
<span id="cb34-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-15" aria-hidden="true" tabindex="-1"></a><span class="co">   """</span></span>
<span id="cb34-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-16" aria-hidden="true" tabindex="-1"></a>   <span class="co"># Get `multiplier` from command-argument, else, prompt the user.</span></span>
<span id="cb34-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-17" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> <span class="bu">len</span>(args) <span class="op">&gt;</span> <span class="dv">1</span>:</span>
<span id="cb34-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-18" aria-hidden="true" tabindex="-1"></a>      multiplier <span class="op">=</span> <span class="bu">int</span>(args[<span class="dv">1</span>])</span>
<span id="cb34-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-19" aria-hidden="true" tabindex="-1"></a>   <span class="cf">else</span>:</span>
<span id="cb34-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-20" aria-hidden="true" tabindex="-1"></a>      multiplier <span class="op">=</span> <span class="bu">int</span>(<span class="bu">input</span>(<span class="st">"Multiplier?: "</span>))</span>
<span id="cb34-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-22" aria-hidden="true" tabindex="-1"></a>   <span class="co"># Validate that `multiplier` is in the range `1`..`12` inclusive.</span></span>
<span id="cb34-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-23" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> <span class="kw">not</span> (<span class="dv">1</span> <span class="op">&lt;=</span> multiplier <span class="op">&lt;=</span> <span class="dv">12</span>):</span>
<span id="cb34-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-24" aria-hidden="true" tabindex="-1"></a>      <span class="bu">print</span>(<span class="st">"Error. Out of range."</span>, <span class="bu">file</span><span class="op">=</span>sys.stderr)</span>
<span id="cb34-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-25" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb34-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-27"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-27" aria-hidden="true" tabindex="-1"></a>   <span class="cf">for</span> n <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>, <span class="dv">12</span><span class="op">+</span><span class="dv">1</span>):</span>
<span id="cb34-28"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-28" aria-hidden="true" tabindex="-1"></a>      <span class="bu">print</span>(<span class="st">"</span><span class="sc">{:2}</span><span class="st"> x </span><span class="sc">{:2}</span><span class="st"> = </span><span class="sc">{:3}</span><span class="st">"</span>.<span class="bu">format</span>(n, multiplier, n <span class="op">*</span> multiplier))</span>
<span id="cb34-29"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-30"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-30" aria-hidden="true" tabindex="-1"></a>   <span class="cf">return</span> <span class="dv">0</span></span>
<span id="cb34-31"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-32"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-32" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span>
<span id="cb34-33"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb34-33" aria-hidden="true" tabindex="-1"></a>   sys.exit(main(sys.argv))</span></code></pre></div>
<p>The above solution still suffers from a problem: it does not deal with invalid input. In other words, the <code>int()</code> function will raise an exception on input that cannot be converted to the <code>int</code> type. And, the program does not ‘handle’ the exception. The above solution also hard codes ‘bare numbers’ like <code>1</code> and <code>12</code>, which is also not good programming practice — such values should rather be associated with names like <code>MIN</code> and <code>MAX</code> (for example).</p>
<p>In the interests of professionalism, here is a more ‘grown-up version’:</p>
<h6 id="multtable_b.py-multiplication-table-for-one-multiplier"><strong><code>multtable_b.py</code></strong> — <strong><em>Multiplication Table for One Multiplier</em></strong></h6>
<div class="sourceCode" id="cb35"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb35-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb35-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb35-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb35-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-4" aria-hidden="true" tabindex="-1"></a><span class="co">Multiplication table example solution, in simplest form. It also uses</span></span>
<span id="cb35-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-5" aria-hidden="true" tabindex="-1"></a><span class="co">two recent patterns: “command line arguments” and “main pattern”.</span></span>
<span id="cb35-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-6" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb35-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-7" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb35-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-8" aria-hidden="true" tabindex="-1"></a>err <span class="op">=</span> sys.stderr.write                 <span class="co">#←just for convenience, and as</span></span>
<span id="cb35-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-9" aria-hidden="true" tabindex="-1"></a>                                       <span class="co"># good coding convention.</span></span>
<span id="cb35-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-10" aria-hidden="true" tabindex="-1"></a>MIN, MAX <span class="op">=</span> <span class="dv">1</span>, <span class="dv">12</span>                       <span class="co">#←legal multiplier range.</span></span>
<span id="cb35-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-13" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main (args):</span>
<span id="cb35-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-14" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb35-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-15" aria-hidden="true" tabindex="-1"></a><span class="co">    Program prompts user for a number, which it uses as multiplier. If</span></span>
<span id="cb35-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-16" aria-hidden="true" tabindex="-1"></a><span class="co">    arguments were passed to the script, it does not prompt the user.</span></span>
<span id="cb35-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-17" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb35-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-18" aria-hidden="true" tabindex="-1"></a>    multiplier <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb35-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">len</span>(args) <span class="op">&lt;=</span> <span class="dv">1</span>:</span>
<span id="cb35-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-20" aria-hidden="true" tabindex="-1"></a>        multiplier <span class="op">=</span> to_int(<span class="bu">input</span>(<span class="st">"Multiplier?: "</span>))</span>
<span id="cb35-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb35-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-22" aria-hidden="true" tabindex="-1"></a>        multiplier <span class="op">=</span> to_int(args[<span class="dv">1</span>])</span>
<span id="cb35-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-24" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> multiplier <span class="kw">is</span> <span class="va">None</span>:</span>
<span id="cb35-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-25" aria-hidden="true" tabindex="-1"></a>        err(<span class="st">"ERROR: Invalid input."</span>)</span>
<span id="cb35-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-26" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span> <span class="co">#← return with non-zero status code.</span></span>
<span id="cb35-27"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-28"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-28" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> multiplier <span class="op">&lt;</span> MIN <span class="kw">or</span> multiplier <span class="op">&gt;</span> MAX:</span>
<span id="cb35-29"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-29" aria-hidden="true" tabindex="-1"></a>        err(<span class="st">'Multiplier not in range </span><span class="sc">{}</span><span class="st">...</span><span class="sc">{}</span><span class="st">'</span>.<span class="bu">format</span>(MIN, MAX))</span>
<span id="cb35-30"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-30" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">2</span> <span class="co">#← return with another non-zero code.</span></span>
<span id="cb35-31"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-32"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-32" aria-hidden="true" tabindex="-1"></a>    fmt <span class="op">=</span> <span class="st">'</span><span class="sc">{:2}</span><span class="st"> x </span><span class="sc">{:2}</span><span class="st"> = </span><span class="sc">{:3}</span><span class="st">'</span></span>
<span id="cb35-33"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-33" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> num <span class="kw">in</span> <span class="bu">range</span>(MIN, MAX<span class="op">+</span><span class="dv">1</span>):</span>
<span id="cb35-34"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-34" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(fmt.<span class="bu">format</span>(num, multiplier, num <span class="op">*</span> multiplier))</span>
<span id="cb35-35"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-36"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-36" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span> <span class="co">#← return ‘success’ error code.</span></span>
<span id="cb35-37"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-38"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-39"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-39" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> to_int(s, fail<span class="op">=</span><span class="va">None</span>):</span>
<span id="cb35-40"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-40" aria-hidden="true" tabindex="-1"></a>   <span class="co">"""</span></span>
<span id="cb35-41"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-41" aria-hidden="true" tabindex="-1"></a><span class="co">   An exception-free “conversion” from a string to an `int`. Optionally,</span></span>
<span id="cb35-42"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-42" aria-hidden="true" tabindex="-1"></a><span class="co">   caller can specify what to return for invalid input (a default).</span></span>
<span id="cb35-43"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-43" aria-hidden="true" tabindex="-1"></a><span class="co">   """</span></span>
<span id="cb35-44"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-44" aria-hidden="true" tabindex="-1"></a>   <span class="cf">try</span>:</span>
<span id="cb35-45"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-45" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> <span class="bu">int</span>(s)</span>
<span id="cb35-46"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-46" aria-hidden="true" tabindex="-1"></a>   <span class="cf">except</span>:</span>
<span id="cb35-47"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-47" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> fail</span>
<span id="cb35-48"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-48" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-49"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-49" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-50"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-50" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">"__main__"</span>:</span>
<span id="cb35-51"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb35-51" aria-hidden="true" tabindex="-1"></a>    sys.exit(main(sys.argv))</span></code></pre></div>
<h2 id="rectangle">Rectangle</h2>
<p>Exercise 3.2. Write a program that inputs an integer <code>width</code>. It must be in the range <code>1..24</code> inclusive. This should be validated, and the program terminated if invalid. For valid input, render a rectangle using <code>#</code> characters. For example, given a <code>width</code> of <code>4</code>, the output must be:</p>
<pre class="output"><code>####
####
####
####</code></pre>
<p>Here an example template that could be used:</p>
<h5 id="rect_q.py-rectangle-program-question"><strong><code>rect_q.py</code></strong> — <strong><em>Rectangle Program Question</em></strong></h5>
<div class="sourceCode" id="cb37"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb37-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb37-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding utf-8 -*-</span></span>
<span id="cb37-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-3" aria-hidden="true" tabindex="-1"></a><span class="co">'''</span></span>
<span id="cb37-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-4" aria-hidden="true" tabindex="-1"></a><span class="co">Print a rectangle given a width.</span></span>
<span id="cb37-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-5" aria-hidden="true" tabindex="-1"></a><span class="co">'''</span></span>
<span id="cb37-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-7" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb37-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-9" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main(args):</span>
<span id="cb37-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">'''</span></span>
<span id="cb37-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-11" aria-hidden="true" tabindex="-1"></a><span class="co">    Get `width` from command-line argument, or prompt user.</span></span>
<span id="cb37-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-12" aria-hidden="true" tabindex="-1"></a><span class="co">    Validate height (1..20).</span></span>
<span id="cb37-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-13" aria-hidden="true" tabindex="-1"></a><span class="co">    '''</span></span>
<span id="cb37-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-14" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Check if command-line argument is available:</span></span>
<span id="cb37-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-15" aria-hidden="true" tabindex="-1"></a>    <span class="co">#    use command-line argument</span></span>
<span id="cb37-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-16" aria-hidden="true" tabindex="-1"></a>    <span class="co"># else:</span></span>
<span id="cb37-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-17" aria-hidden="true" tabindex="-1"></a>    <span class="co">#    get from the user (use `input`).</span></span>
<span id="cb37-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-19" aria-hidden="true" tabindex="-1"></a>    <span class="co"># If `width` is not in range (1..20):</span></span>
<span id="cb37-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-20" aria-hidden="true" tabindex="-1"></a>    <span class="co">#    print an error message and</span></span>
<span id="cb37-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-21" aria-hidden="true" tabindex="-1"></a>    <span class="co">#    return a non-zero exit code.</span></span>
<span id="cb37-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-23" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Loop for each line in `width` number lines:</span></span>
<span id="cb37-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-24" aria-hidden="true" tabindex="-1"></a>    <span class="co">#    print `width` number of `#`</span></span>
<span id="cb37-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-26" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span></span>
<span id="cb37-27"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb37-28"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-28" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span>
<span id="cb37-29"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb37-29" aria-hidden="true" tabindex="-1"></a>    sys.exit(main(sys.argv))</span></code></pre></div>
<p>Here is an example solution, using some of the patterns we have seen in previous examples.</p>
<h5 id="rect_a.py-rectangle-rendering-program"><strong><code>rect_a.py</code></strong> — <strong><em>Rectangle Rendering Program</em></strong></h5>
<div class="sourceCode" id="cb38"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb38-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb38-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb38-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb38-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-4" aria-hidden="true" tabindex="-1"></a><span class="co">Render a text rectangle on standard output.</span></span>
<span id="cb38-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-5" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb38-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb38-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-9" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main(args):</span>
<span id="cb38-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb38-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-11" aria-hidden="true" tabindex="-1"></a><span class="co">    Get `width` from command line argument, or prompt the user.</span></span>
<span id="cb38-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-12" aria-hidden="true" tabindex="-1"></a><span class="co">    Draw a text rectangle using `#` characters. Validate `width`</span></span>
<span id="cb38-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-13" aria-hidden="true" tabindex="-1"></a><span class="co">    (must be in range `1..24`).</span></span>
<span id="cb38-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-14" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb38-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-15" aria-hidden="true" tabindex="-1"></a>    width <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb38-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">len</span>(args) <span class="op">&gt;</span> <span class="dv">1</span>:                 <span class="co">#←if argument available, use it.</span></span>
<span id="cb38-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-18" aria-hidden="true" tabindex="-1"></a>        width <span class="op">=</span> <span class="bu">int</span>(args[<span class="dv">1</span>])</span>
<span id="cb38-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:                             <span class="co">#←else prompt the user.</span></span>
<span id="cb38-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-20" aria-hidden="true" tabindex="-1"></a>        width <span class="op">=</span> <span class="bu">int</span>(<span class="bu">input</span>(<span class="st">"Width (1..24)?: "</span>))</span>
<span id="cb38-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> width <span class="op">&lt;</span> <span class="dv">1</span> <span class="kw">or</span> width <span class="op">&gt;</span> <span class="dv">24</span>:</span>
<span id="cb38-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-23" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">"Invalid width. Terminating"</span>, <span class="bu">file</span><span class="op">=</span>sys.stderr)</span>
<span id="cb38-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-24" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span>                      <span class="co">#←‘failure’ exit code.</span></span>
<span id="cb38-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-26" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> line <span class="kw">in</span> <span class="bu">range</span>(width):</span>
<span id="cb38-27"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-27" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">'#'</span> <span class="op">*</span> width)</span>
<span id="cb38-28"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-29"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-29" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span>                          <span class="co">#←‘success’ exit code.</span></span>
<span id="cb38-30"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-31"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb38-32"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-32" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">"__main__"</span>:</span>
<span id="cb38-33"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb38-33" aria-hidden="true" tabindex="-1"></a>    sys.exit(main(sys.argv))</span></code></pre></div>
<p>To get a better score with <code>pylint</code>, replace the unused <code>line</code> variable with an underscore character (<code>_</code>). This is a common convention.</p>
<p>And here is the output of <code>python3 -m pydoc rect</code> (or <code>python -m pydoc rect</code>, or <code>pydoc3 rect</code>):</p>
<pre class="output"><code>NAME
    rect - Render a text rectangle on standard output.

FUNCTIONS
    main(args)
        Get `width` from command line argument, or prompt the user.
        Draw a text rectangle using `#` characters. Validate `width`
        (must be in range `1..24`).

FILE
    ···/rect.py</code></pre>
<p>The program can still be approved by using our custom <code>to_int</code> function instead of <code>int</code>, and checking for invalid input. Also, instead of hard-coding <code>1</code> and <code>24</code> ‘magic numbers’ in the program, they could be given names before <code>main</code>:</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb40-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#cb40-1" aria-hidden="true" tabindex="-1"></a>MIN, MAX <span class="op">=</span> <span class="dv">1</span>, <span class="dv">24</span></span></code></pre></div>
<div class="history">
<br>
<p>2020-12-07: Created. [brx]</p>
</div>
</div></main>
<footer>
<div class="ftrleft"><a href="http://www.incusdata.com/" title="Main Site">© 2020 Incus Data (Pty) Ltd.</a>
<a href="https://za.linkedin.com/company/incus-data-pty-ltd"><span class="icon-linkedin-rect"></span></a>
<a href="https://www.facebook.com/incusdata/"><span class="icon-facebook-rect"></span></a></div>

<div class="ftrright">Made with 
   <a href="http://www.pandoc.org/" title="Pandoc - a universal document converter">
      Pandoc</a>,
   <a href="https://github.com/adobe-fonts/source-serif-pro#source-serif-pro" title="GitHub — Adobe / Source Serif Pro">Source</a>,
   <a href="https://mozilla.github.io/Fira/" title="Free sans-serif font from Mozilla">Fira</a> &amp;
   <a href="https://be5invis.github.io/Iosevka/" title="Free, condensed monospaced font">Iosevka</a>
</div>
</footer>

<!-- script>document.write('<script src="res/live.js"></'+'script>')</script -->

</body></html>