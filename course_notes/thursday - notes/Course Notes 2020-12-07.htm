<!DOCTYPE html>
<!-- saved from url=(0061)https://incusdata.site/pan/py/python-ipyp-20201207-notes.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <meta name="generator" content="pandoc">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">
  <meta name="author" content="Codi Matters">
  <meta name="dcterms.date" content="2020-12-07">
  <meta name="keywords" content="python, course, notes, code, programs">
  <link rel="shortcut icon" href="https://incusdata.site/favicon.ico">
  <title>Course Notes 2020-12-07</title>
  <style type="text/css">code{white-space: pre;}</style>
<style type="text/css">
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    background-color: #ffffff;
    color: #a0a0a0;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #a0a0a0;  padding-left: 4px; }
div.sourceCode
  { color: #1f1c1b; background-color: #ffffff; }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span { color: #1f1c1b; } /* Normal */
code span.al { color: #bf0303; background-color: #f7e6e6; font-weight: bold; } /* Alert */
code span.an { color: #ca60ca; } /* Annotation */
code span.at { color: #0057ae; } /* Attribute */
code span.bn { color: #b08000; } /* BaseN */
code span.bu { color: #644a9b; font-weight: bold; } /* BuiltIn */
code span.cf { color: #1f1c1b; font-weight: bold; } /* ControlFlow */
code span.ch { color: #924c9d; } /* Char */
code span.cn { color: #aa5500; } /* Constant */
code span.co { color: #898887; } /* Comment */
code span.cv { color: #0095ff; } /* CommentVar */
code span.do { color: #607880; } /* Documentation */
code span.dt { color: #0057ae; } /* DataType */
code span.dv { color: #b08000; } /* DecVal */
code span.er { color: #bf0303; text-decoration: underline; } /* Error */
code span.ex { color: #0095ff; font-weight: bold; } /* Extension */
code span.fl { color: #b08000; } /* Float */
code span.fu { color: #644a9b; } /* Function */
code span.im { color: #ff5500; } /* Import */
code span.in { color: #b08000; } /* Information */
code span.kw { color: #1f1c1b; font-weight: bold; } /* Keyword */
code span.op { color: #1f1c1b; } /* Operator */
code span.ot { color: #006e28; } /* Other */
code span.pp { color: #006e28; } /* Preprocessor */
code span.re { color: #0057ae; background-color: #e0e9f8; } /* RegionMarker */
code span.sc { color: #3daee9; } /* SpecialChar */
code span.ss { color: #ff5500; } /* SpecialString */
code span.st { color: #bf0303; } /* String */
code span.va { color: #0057ae; } /* Variable */
code span.vs { color: #bf0303; } /* VerbatimString */
code span.wa { color: #bf0303; } /* Warning */
</style>
  <link rel="stylesheet" href="./Course Notes 2020-12-07_files/incus-pandoc-fonts.css">
  <link rel="stylesheet" href="./Course Notes 2020-12-07_files/incus-pandoc.css">
  <script src="./Course Notes 2020-12-07_files/katex.min.js"></script><script id="dataslayerLaunchMonitors">
console.log('** dataslayer: injecting Launch monitors **');
window._satellite = window._satellite || {};
window._satellite._monitors = window._satellite._monitors || [];
window._satellite._monitors.push({
  ruleTriggered: function(e) {
    window.parent.postMessage(
      {
        type: 'dataslayer_launchruletriggered',
        url: window == window.parent ? window.location.href : 'iframe',
        data: JSON.parse(JSON.stringify(e.rule)),
      },
      '*'
    );
  },
  ruleCompleted: function(e) {
    // console.log('** dataslayer: Launch rule completed **', e.rule);
    var rule = JSON.parse(JSON.stringify(e.rule));
    var sendRule = function() {
        if (window.dataslayer) {
            window.parent.postMessage(
                {
                    type: 'dataslayer_launchrulecompleted',
                    url: window == window.parent ? window.location.href : 'iframe',
                    data: rule,
                },
                '*'
            );       
            // console.log('** dataslayer: posted rule '+rule+'**'); 
        } else {
            if (document.readyState === 'complete') {
                // console.log('** dataslayer: giving up on launch **');
                window._dataslayerQueue = window._dataslayerQueue || [];
                window._dataslayerQueue.push({
                  type: 'dataslayer_launchrulecompleted',
                  url: window == window.parent ? window.location.href : 'iframe',
                  data: rule,
                });
                return;
            } else {
                // console.log('** dataslayer: waiting 250ms to repost rule **');
                window.setTimeout(sendRule, 250);
            }
        }
    }
    sendRule();
    if (
      window._satellite &&
      window._satellite._container &&
      window._satellite._container.dataElements &&
      true
    ) {
      var elementNames = Object.keys(
        window._satellite._container.dataElements
      ).sort(function(a, b) {
        var nameA = a.toUpperCase();
        var nameB = b.toUpperCase();

        if (nameA < nameB) {
          return -1;
        } else if (nameA > nameB) {
          return 1;
        } else {
          return 0;
        }
      });

      let launchElements = {};

      for (const elementName of elementNames) {
        var newElement = JSON.parse(
          JSON.stringify(
            window._satellite._container.dataElements[elementName]
          )
        );
  
        let cleanValue = window._satellite.getVar(elementName);
        if (typeof cleanValue === 'function') {
          cleanValue = '(function)';
        } else if (
          typeof cleanValue === 'object' &&
          typeof cleanValue.then === 'function'
        ) {
          cleanValue = '(Promise)';
        }
        launchElements[elementName] = cleanValue;
        // launchElements.push({
        //   key: elementNames[i],
        //   value: cleanValue,
        //   element: newElement,
        // });
      }
      try {
        window.parent.postMessage(
          {
            type: 'dataslayer_launchdataelements',
            data: 'found',
            url: window == window.parent ? window.location.href : 'iframe',
            elements: launchElements
          },
          '*'
        );
      } catch (e) {
        console.warn(e);
      }
  
    }
  },
  ruleConditionFailed: function(e) {
    window.parent.postMessage(
      {
        type: 'dataslayer_launchrulefailed',
        url: window == window.parent ? window.location.href : 'iframe',
        data: JSON.parse(JSON.stringify(e.rule)),
      },
      '*'
    );
  },
});
</script>
  <script>document.addEventListener("DOMContentLoaded", function () {
   var mathElements = document.getElementsByClassName("math");
   var macros = [];
   for (var i = 0; i < mathElements.length; i++) {
    var texText = mathElements[i].firstChild;
    if (mathElements[i].tagName == "SPAN") {
     katex.render(texText.data, mathElements[i], {
      displayMode: mathElements[i].classList.contains('display'),
      throwOnError: false,
      macros: macros,
      fleqn: false
     });
  }}});
  </script>
  <link rel="stylesheet" href="./Course Notes 2020-12-07_files/katex.min.css">
  <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"></script>
  <![endif]-->
</head>
<body>
<div id="totop-div">
    <hr>
    <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#" class="totop-div"></a>
</div>
<header>
<div class="pglogo"><a href="https://incusdata.site/index.html" title="Incus Data Complementary Material"><img alt="Incus Data" height="34" width="124" src="./Course Notes 2020-12-07_files/incuslogocm.png">
</a>
<a href="https://za.linkedin.com/company/incus-data-pty-ltd"><span class="icon-linkedin-rect"></span></a>
<a href="https://www.facebook.com/incusdata/"><span class="icon-facebook-rect"></span></a>
</div>
<div class="pghdright">
<div class="pgauthor">Codi Matters</div>
<div class="pglicdate">
<div class="pgdate">2020-12-07</div>
<div class="pglic"><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode" title="Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International"><span class="icon-creative-commons"></span> by-nc-sa</a></div>
</div></div>
<div class="pgcategory">Python</div>
</header>
<main role="main">
<div class="pgtitle">&nbsp;&nbsp;</div><div class="page">
<h1 class="pgtitle" style="text-align:left;">Course Notes 2020-12-07</h1>
<h1 class="pgsubtitle">Python Programming Course Notes</h1>
<div class="pgabstract"><p>Collection of miscellaneous topics and examples related to Python, provided as sup­ple­men­ta­ry material for the convenience of attendees of a virtual Python Pro­gram­ming course pre­sen­ted in December 2020. It has a <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html" title="Python Course Notes - 2020-12-07">permanent place</a> on the internet.</p>
<div class="pgnav">
<!-- <input type="checkbox" id="isexpanded" -->
<input type="checkbox" id="isexpanded" checked="">
<label for="isexpanded" id="togglebutton">Table of Contents</label>
<nav id="TOC" class="expandable">
<ul>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#introduction">Introduction</a>
<ul>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#python-background">Python Background</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#distributions-of-python">Distributions of Python</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#winpython-notes">WinPython Notes</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#python-on-macos">Python on macOS</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#windows-subsystem-for-linux-wsl">Windows Subsystem for Linux (WSL)</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#useful-utilities">Useful Utilities</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#python-scripts">Python Scripts</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#python-launchers">Python Launchers</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#script-structure">Script Structure</a></li>
</ul></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#python-features">Python Features</a>
<ul>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#pythonic-pythonistas">Pythonic Pythonistas</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#fundamental-characteristics">Fundamental Characteristics</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#keywords-and-identifiers">Keywords and Identifiers</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#observations-about-types">Observations About Types</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#literals">Literals</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#expressions">Expressions</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#writing-output">Writing Output</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#standard-types">Standard Types</a></li>
</ul></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#collections-sequences">Collections / Sequences</a>
<ul>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#lists">Lists</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#tuples">Tuples</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#sorting-sequences">Sorting Sequences</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#dictionaries">Dictionaries</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#sets">Sets</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#comprehensions">Comprehensions</a></li>
</ul></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#statements">Statements</a>
<ul>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#expression-statements">Expression Statements</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#import-statements">Import Statements</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#assignment-statements">Assignment Statements</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#common-topics">Common Topics</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#blockscompound-statements">Blocks/Compound Statements</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#do-nothingno-opnull-statement">Do-Nothing/No-Op/Null Statement</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#conditionalselection-statements">Conditional/Selection Statements</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#iterationloop-statements">Iteration/Loop Statements</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#exceptions">Exceptions</a></li>
</ul></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#functions">Functions</a>
<ul>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#documentation">Documentation</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#function-returns">Function Returns</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#parameters">Parameters</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#functions-as-objects">Functions as Objects</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#list-argument-unpacking">List Argument Unpacking</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#dictionary-argument-unpacking">Dictionary Argument Unpacking</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#more-on-functions-are-values">More on Functions are Values</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#lambdas-anonymous-functions">Lambdas / Anonymous Functions</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#achieving-closure">Achieving Closure</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#scope-and-functions">Scope and Functions</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#recursion">Recursion</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#generator-functions">Generator Functions</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#function-decorators">Function Decorators</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#function-attributes">Function Attributes</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#static-local-variables">Static Local Variables</a></li>
</ul></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#classes">Classes</a>
<ul>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#class-fundamentals">Class Fundamentals</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#initialisers">Initialisers</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#instance-methods">Instance Methods</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#shared-attributes">Shared Attributes</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#private-members-properties">Private Members &amp; Properties</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#inheritance">Inheritance</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#operator-overloading">Operator Overloading</a></li>
</ul></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#miscellaneous-topics">Miscellaneous Topics</a>
<ul>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#package-management">Package Management</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#custom-modules">Custom Modules</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#virtual-environments">Virtual Environments</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#pip-certificate-failure">Pip Certificate Failure</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#type-annotations-hints">Type Annotations / Hints</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#unit-testing">Unit Testing</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#windows-consoles">Windows Consoles</a></li>
</ul></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#whiteboard-bits">Whiteboard Bits</a>
<ul>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#dies-primus">Dies Primus</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#dies-secundus">Dies Secundus</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#dies-tertium">Dies Tertium</a></li>
<li><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#dies-quartum">Dies Quartum</a></li>
</ul></li>
</ul>
</nav></div>
</div>
<div class="preqs">
<p><a href="https://www.python.org/" title="Python Home Page"><img src="./Course Notes 2020-12-07_files/python-logo-generic.svg" style="display:block;margin-left:auto;margin-right:auto;margin-top:2rem;margin-bottom:1.5rem;width:33%;overflow:hidden;" alt="python-logo"></a> PREREQUISITES — <em>You should already…</em></p>
<ul>
<li>have some programming experience in another language;</li>
</ul>
</div>
<h1 id="introduction">Introduction</h1>
<p>Here is an overview of Python background, concepts, tools and distributions.</p>
<h4 id="about-this-personalised-course-notes-page">About This Personalised Course Notes Page</h4>
<p>This page may still be updated in the future, so you may want to check back regularly. It is not a complete book. It does not cover <em>every</em> topic treated on the course. Some example code is on a <a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html"><strong>separate page</strong></a> — it too may receive some updates. Some topics may have been moved to separate pages; check the <a href="https://incusdata.site/index.html#python">front page</a>.</p>
<h4 id="conventions">Conventions</h4>
<p>In our text, the ‘<code>≡</code>’ character means “equivalent to”;</p>
<p>The sequence: <span class="xar">t</span> means “has the type”, and <span class="xar">r</span> means “is read as”. For example:</p>
<p><span class="tab1"></span><code>123</code> <span class="xar">t</span> <code>int</code></p>
<p>means: “the literal <code>123</code> has type <code>int</code>”, and</p>
<p><span class="tab1"></span><code>foo[i]</code> <span class="xar">r</span> ‘<code>foo</code> subscript <code>i</code>’</p>
<p>means: <code>foo[i]</code> is read as ‘<code>foo</code> subscript <code>i</code>’.</p>
<p>In comments, we use ‘<code>#⇒</code>…’ to show the output of a statement, or the value of an expression.</p>
<p>The <span class="math inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.36687em; vertical-align: 0em;"></span><span class="mrel">⇒</span></span></span></span></span> symbol is shorthand for: “…is defined in terms of…” or “…means the following…”.</p>
<p>The <span class="alt"></span> symbol means <em>alternation</em>… it can be read as “or”.</p>
<p>Any text between single guillemets like this: <span class="stx">ident</span> is a <em>description</em>; it must be replaced by a language element relevant to the syntax, and must not be appear verbatim in code. This means that you must replace <span class="stx">ident</span> with a legal Python <span class="stx">ident</span>ifier (name). Any monospaced text must be entered verbatim.</p>
<h2 id="python-background">Python Background</h2>
<p>The <a href="https://en.m.wikipedia.org/wiki/Python_(programming_language)" title="Wikipedia — Python (programming language)">Python programming language</a> was created by <a href="https://en.m.wikipedia.org/wiki/Guido_van_Rossum" title="Wikipedia — Guido van Rossum">Guido van Rossum</a> (<a href="https://en.m.wikipedia.org/wiki/Benevolent_dictator_for_life" title="Wikipedia — Benevolent Dictator for Life">Benevolent Dictator for Life</a>), first re­leas­ed in 1991, with Python development time sponsored by Google, where he worked for a period. Thanks Guido, and thanks Google, we guess. At the time of writing, <a href="https://www.python.org/downloads/" title="Python 3 — Release Notes and Download">Python 3.8.6</a> is available for down­load (see the list of available <a href="https://www.python.org/downloads/release/latest" title="Python Downloads — Latest Releases">releases</a>). The <em>very</em> latest, is 3.9.1.</p>
<h4 id="ubiquity">Ubiquity</h4>
<p>Python, and most Python <span class="sc">IDE</span>s and libraries, run on Linux®, macOS® and Windows®. It is a scripting lang­uage, with similar capabilities to the <a href="https://en.m.wikipedia.org/wiki/Perl" title="Wikipedia — Perl">Perl</a> programming language (<a href="https://www.perl.org/" title="Perl Programming Language Home">Perl home</a>), but has gained the at­ten­tion of the scientific and academic communities as an alternative to MatLab™, to the ex­tent that <a href="https://www.tiobe.com/tiobe-index/" title="TIOBE Index">Python's popularity</a> now far exceeds that of Perl. The even newer <a href="https://en.m.wikipedia.org/wiki/Julia_(programming_language)" title="Wikipedia — Julia (programming language)">Julia</a> pro­gram­ming lang­uage (<a href="https://julialang.org/" title="Julia Programming Language Home">Julia home</a>) is beginning to encrouch somewhat on Python's new domain, especially for ap­pli­ca­tions involving numerical computation and research. It, too, can be used in the very popular <a href="https://en.m.wikipedia.org/wiki/IPython" title="Wikipedia — IPython">IPython</a> shell, which spawned the <a href="http://jupyter.org/" title="Project Jupyter Home">Jupyter</a> browser-based environment (and the latest <a href="https://jupyterlab.readthedocs.io/en/latest/" title="JupyterLab — Documentation">JupyterLab</a>).</p>
<p>Both Perl and Python are standard on typical distributions of Linux and also macOS — even if they are not the latest versions. Many tools use shell scripts, Perl scripts or Python scripts to man­age their affairs. For other uses, most users will create personal Perl or Python installs (<em>en­vi­ron­ments</em>) with newer versions of either, without affecting the official versions that were in­stal­led as part of the operating system.</p>
<h3 id="versionitus">Versionitus</h3>
<p>Due to some not-so-insignificant changes to the syntax of Python, we effectively have two major Python versions: the 2.7.x branch (Python2), which does not receive updates, only bug fixes; and the 3.5+ (currently 3.9.1) branch, <span class="sc">AKA</span> Python3, whose code is not entirely compatible with Python2. Many older libraries, utilities, tools and Python programs, have not yet been updated to Python3; some never will be.</p>
<p>This is a dilemma for users, and they must be aware that on their systems, just executing <strong><code>python</code></strong> may run Python2 or Python3. On some systems, with both Python2 and Python3 installed, one may have <code>python2</code> and <code>python3</code> executables. Our guideline is to exclusively use Python3 unless you have a pressing reason not to — for example, you may be dependent on a Python2 library or tools that have not been ported to Python3. There is <a href="https://docs.python.org/3/howto/pyporting.html" title="Python Docs — Porting Python2 Code to Python3">official advice</a> on porting Python2 code to Python3. See <a href="http://python-future.org/automatic_conversion.html" title="Python-Future Automatic Conversion">Python-Future</a> and <a href="https://python-modernize.readthedocs.io/en/latest/" title="Python-Modernize">Python-Modernize</a> for different approaches to port code or at­tain com­pa­ti­bi­li­ty.</p>
<p>Some libraries are continuously updated. So you should be aware of the version of any library that your current application requires. Newer versions of libraries are sometimes incompatible with the older versions. If the work is important, documentation should be kept re­gard­ing not only the ver­sion and variant of Python being used, but also the libraries and their versions that are employed.</p>
<h4 id="the-.net-java-connections">The .NET &amp; Java Connections</h4>
<p>Any .NET knowledge can be leveraged in Python, either via <a href="http://ironpython.net/" title="IronPython .NET Home">IronPython</a>, which is a native .NET im­ple­men­ta­tion of Python, or <a href="https://pythonnet.github.io/" title="GitHub — Python for .NET Home">Python for .NET</a>, which is a Python library interfacing with the .NET Frame­work. There are several <a href="https://www.python.org/download/alternatives/" title="Python — Alternative Python Implementations">alternative implementations</a> of the Python <em>language</em> available, each having varying degrees of com­pa­ti­bi­li­ty with <a href="https://en.m.wikipedia.org/wiki/CPython" title="Wikipedia — CPython">CPython</a> (the original, official, and most po­pu­lar, im­ple­ment­ed in the C language). Like IronPython, the Java afficionados can use <a href="https://en.m.wikipedia.org/wiki/Jython" title="Wikipedia — Jython">Jython</a>, an im­ple­men­ta­tion of Python in Java.</p>
<h2 id="distributions-of-python">Distributions of Python</h2>
<p>While <a href="https://www.python.org/" title="Python Home Page">python.org</a> hosts compiled versions of Python for all supported platforms, it is fully open source, and several groups or individuals use that source to build their own Python interpreters and li­bra­ries. It is possible to embed Python in programs and applications, and even package a Python ap­pli­ca­tion as an ex­e­cu­ta­ble, so users with­out Python can still run the application.</p>
<h3 id="snakepit">Snakepit</h3>
<p>We will be using the official <a href="https://en.m.wikipedia.org/wiki/CPython" title="Wikipedia — CPython">CPython</a>, which most of the major distributors of Python use. Just as a matter of interest, here is a list of alternative implementations of the <em>language</em>, or utilities that create executables (optionally, some also create installers). We omit <a href="http://ironpython.net/" title="IronPython .NET Home">IronPython</a> and <a href="https://en.m.wikipedia.org/wiki/Jython" title="Wikipedia — Jython">Jython</a> from this list, since they are <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#the-.net-java-connections">discussed above</a>:</p>
<ul>
<li><p><strong><a href="https://en.m.wikipedia.org/wiki/CPython" title="Wikipedia — CPython">CPython</a></strong> — For completeness, at the top of the list, the reference implementation of Python, written in C. It is not terribly fast, but can interface with C/C++ libraries, which are fast.</p></li>
<li><p><strong><a href="https://bitbucket.org/stackless-dev/stackless/wiki/Home" title="Stackless Python">Stackless Python</a></strong> — An enhanced version of Python improving performance with threads, channels, scheduling and serialisation.</p></li>
<li><p><strong><a href="http://pypy.org/" title="PyPy Home">PyPy</a></strong> — An alternative implementation that compiles Python code to native machine code, using JIT (Just In Time) compilation. It is purportedly more memory-efficient than CPython, and it uses <a href="https://bitbucket.org/stackless-dev/stackless/wiki/Home" title="Stackless Python">Stackless</a>' threads.</p></li>
<li><p><strong><a href="http://cython.org/" title="Cython C-Extensions for Python Home">Cython</a></strong> — An implementation of Python that statically compiles Python code, with an extended syntax. It is generally faster than CPython, and easier to interface with C code.</p></li>
<li><p><strong><a href="http://micropython.org/" title="MicroPython Home">MicroPython</a></strong> — A special implementation of Python geared towards embedded systems, or small systems like the <a href="https://en.m.wikipedia.org/wiki/Raspberry_Pi" title="Wikipedia — Raspberry Pi">Raspberry Pi</a>.</p></li>
<li><p><strong><a href="https://www.egenix.com/products/python/PyRun/" title="eGenix PyRun — Single-File Python Executable">PyRun</a></strong> — Although not supported (“yet”, they say) under Windows, it packages Python and libraries into a single executable. This is very useful in the environments where it is supported.</p></li>
</ul>
<h3 id="python-executable-installer-packagers">Python Executable / Installer Packagers</h3>
<p>This is a non-exhaustive selection of tools that <em>may</em> help you create an executable from your Python program. They bundle the Python interpreter, standard Python libraries, and extra li­bra­ries to­geth­er into one or more executables and/or DLLs. At best, you can end up with a single executable, and at worst, a directory containing your executable, together with all the ancillary files.</p>
<ul>
<li><p><strong><a href="http://www.pyinstaller.org/" title="PyInstaller Home">PyInstaller</a></strong> — Runs on Linux, macOS, Solaris, FreeBSD. Can be installed with <strong><a href="https://pip.pypa.io/en/stable/" title="PyPa — pip Documentation">pip</a></strong> (Python's of­fi­ci­al package installer) from <a href="https://pypi.python.org/" title="PyPi Package Index">PyPi</a>.</p></li>
<li><p><strong><a href="https://anthony-tuininga.github.io/cx_Freeze/" title="GitHub — cx_Freeze Home">cx_Freeze</a></strong> — Works on any platform where Python is available.</p></li>
<li><p><strong><a href="http://www.py2exe.org/" title="py2exe Home">py2exe</a></strong> — This is a Windows-only solution. You can set a custom icon to be embedded in the re­sult­ing ex­e­cu­ta­ble.</p></li>
<li><p><strong><a href="http://nuitka.net/" title="Nuitka Home">Nuitka</a></strong> — Nuitka is unique in that it translates Python code to C/C++, which can then be com­pil­ed to an executable with a compatible C/C++ compiler. You can read their <a href="http://nuitka.net/pages/overview.html" title="Nuitka Overview">overview</a>.</p></li>
<li><p><strong><a href="https://pypi.python.org/pypi/pynsist" title="PyPi — pynsist package">pynsist</a></strong> — Works only on Windows, but makes it easy to create <a href="http://nsis.sourceforge.net/Main_Page" title="SourceForge — NSIS Home">NSIS</a> (Nullsoft Scriptable In­stall Sys­tem) installers from your Python application.</p></li>
</ul>
<h3 id="larger-python-distributions">Larger Python Distributions</h3>
<p>This is, again, a non-exhaustive list of other Python distributions, and we omitted the com­mer­cial options:</p>
<ul>
<li><p><strong><a href="https://store.continuum.io/cshop/anaconda" title="Anaconda Python Home">Anaconda</a></strong> — It has free and commercial versions, and is one of the “batteries-included” scien­ti­fic­al­ly-minded distributions. It is probably the most popular of the large distributions. An alternative is <a href="https://docs.conda.io/en/latest/miniconda.html">Miniconda</a>.</p></li>
<li><p><strong><a href="http://python-xy.github.io/" title="Python-xy Home">Python(x,y)</a></strong> — “Python(x,y) is a free scientific and engineering development software for nu­me­ri­cal computations, data analysis and data visualization based on Python programming language, <a href="https://www.qt.io/" title="Qt Graphical Library">Qt</a> graphical user interfaces and <a href="https://pythonhosted.org/spyder/#" title="Spyder Documentation">Spyder <span class="sc">IDE</span></a> interactive scientific development en­vi­ron­ment”.</p></li>
<li><p><strong><a href="http://www.activestate.com/activepython/" title="ActiveState ActivePython Home">ActivePython</a></strong> — ActiveState provides free and commercial versions of various tools and lan­gua­ges. It is probably one of the most newbie-friendly options to get a working Python and some Windows-specific accoutrements.</p></li>
<li><p><strong><a href="http://winpython.sourceforge.net/" title="SourceForge — WinPython Home">WinPython</a></strong> — Windows-only, with all the accessories you need, including Spyder3. Its main ad­van­tage is that it does not require installation. Its “installer” simply extracts all the parts to a directory of your choice. Optionally, it can “register” itself with Windows to become your glo­bal Python installation. Another advantage is that users can work with <strong><a href="https://pip.pypa.io/en/stable/" title="PyPa — pip Documentation">pip</a></strong>, in addition to the custom <span class="sc">GUI</span> (Graphical User Interface) package manager of WinPython.</p></li>
</ul>
<h3 id="shells-ides-and-other-environments">Shells, <span class="sc">IDE</span>s and Other Environments</h3>
<p>Although you can get by writing Python scripts with any editor (preferably a “<a href="https://wiki.python.org/moin/PythonEditors" title="Python Wiki — Python Editors">programmer's edi­tor</a>” supporting Python syntax highlighting), and run the scripts on the command line (in a <a href="https://en.m.wikipedia.org/wiki/Unix_shell" title="Wikipedia — Unix shell"><span class="sc">POSIX</span> Shell</a>, Windows <a href="https://en.m.wikipedia.org/wiki/Cmd.exe" title="Wikipedia — cmd.exe (Command Prompt)">Command Prompt</a>, or <a href="https://en.m.wikipedia.org/wiki/PowerShell" title="Wikipedia — PowerShell">PowerShell</a>), it is possible to interactively run Python in its own shell, having a <a href="https://en.m.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" title="Wikipedia — Read-eval-print loop"><span class="sc">REPL</span></a> (Read-Eval-Print-Loop). More involved environments allow you to debug your Python, and use mouse and graphical features to help make you more comfortable.</p>
<ul>
<li><p><strong><a href="https://docs.python.org/3/tutorial/interpreter.html" title="Python Docs — Tutorial — Using the Python Interpreter">CPython <span class="sc">REPL</span></a></strong> — Just the normal CPython interpreter, but run without arguments to interpret scripts. Instead, it will continuously allow you to type in Python, which it interprets, and if any values result, automatically prints them out for you… ready for the next input.</p></li>
<li><p><strong><a href="https://docs.python.org/3/library/idle.html" title="Python Docs — IDLE">IDLE</a></strong> — The same mechanics as the standard CPython <span class="sc">REPL</span>, but built as a graphical ap­pli­ca­tion using the portable <a href="https://wiki.python.org/moin/TkInter" title="Python Wiki — TkInter main page">TkInter</a> <span class="sc">GUI</span> (Graphical User Interface) library. It is fairly capable in its newer incarnations, and is part of the standard Python distribution.</p></li>
<li><p><strong><a href="https://en.m.wikipedia.org/wiki/IPython" title="Wikipedia — IPython">IPython</a></strong> — A much-enhanced and user-friendly alternative to the standard CPython <span class="sc">REPL</span>. Highly recommended. It was originally known as the “IPython Notebook”, but has been separated, with the generic part now called Jupyter.</p></li>
<li><p><strong><a href="https://github.com/jonathanslenders/ptpython" title="GitHub — ptpython Home">ptpython</a></strong> — A popular enhanced shell, for <span class="sc">POSIX</span> shells, or the Windows Command Prompt. It can also enhance IPython, via the <strong><code>ptipython</code></strong> program.</p></li>
<li><p><strong><a href="http://jupyter.org/" title="Project Jupyter Home">Jupyter Notebook</a></strong> — The Jupyter Project is a generic set of technologies, which allows you to interact with a variety of “<a href="https://github.com/jupyter/jupyter/wiki/Jupyter-kernels" title="GitHub — Jupyter Kernels">kernels</a>”, via a browser. Of interest, of course, is the Python kernel, which allows you to interface with IPython through the browser. We recommend <a href="https://jupyterlab.readthedocs.io/en/latest/" title="JupyterLab — Documentation">Jupyter Lab</a>, which is a superset of Jupyter Notebook, and includes interactive Python environments and even operating system shells.</p></li>
<li><p><strong><a href="http://qtconsole.readthedocs.io/en/latest/" title="ReadTheDocs — QtConsole for Jupyter">QtConsole</a></strong> — The interface works exactly like IPython, but runs in a graphical environment. This means plots, for example, can appear in the same window as your code. From the same people who brought you Jupyter and IPython.</p></li>
<li><p><strong><a href="https://pythonhosted.org/spyder/#" title="Spyder Documentation">Spyder</a></strong> — A very popular <span class="sc">IDE</span> written in Python, using Qt libraries. It is not half-bad, and if you have no preference, it should be the first one you try. It may be all you ever need.</p></li>
<li><p><strong><a href="https://www.jetbrains.com/pycharm/" title="JetBrains — PyCharm">PyCharm</a></strong> — Provides both commercial and free “community” editions. If you like Jet­Brain's In­tel­liJ <span class="sc">IDE</span>A types of <span class="sc">IDE</span>s, this might be just your cup of tea.</p></li>
<li><p><strong><a href="https://atom.io/" title="ATOM Home Page">Atom</a></strong> — This is a general programmer's editor, but with their <a href="https://atom.io/packages/python-tools" title="Atom python-tools home page">python-tools</a>, you can use it as your Python <span class="sc">IDE</span>.</p></li>
<li><p><strong><a href="https://code.visualstudio.com/" title="Visual Studio Code Home">Visual Studio Code</a></strong> — Like Atom, a free and gp]eneral-purpose programmer's editor, with <em>many</em> plugins (extensions), including one for <a href="https://code.visualstudio.com/docs/languages/python" title="Visual Studio Code — Python">Python</a>. See their <a href="https://code.visualstudio.com/docs/python/python-tutorial#_prerequisites" title="MS Docs — Visual Studio Code / Getting Started with Python in Visual Studio Code">Getting Started with Python</a> article for ideas. Be sure to also read <a href="https://code.visualstudio.com/docs/getstarted/tips-and-tricks" title="MS Docs — Visual Studio Code Tips and Tricks">Visual Studio Code Tips and Tricks</a> and <a href="https://code.visualstudio.com/docs/python/settings-reference" title="MS Docs — Visual Studio Code Python Settings Reference">Python settings reference</a>.</p></li>
</ul>
<p>Any of these will work, but you should learn the basics of writing scripts with any editor, and run­ning them on the command line, using a standard <span class="sc">REPL</span> shell. Then, finally, you can graduate to an <span class="sc">IDE</span> that holds your hands and hides all complexity from you.</p>
<h4 id="visual-studio-code-and-python">Visual Studio Code and Python</h4>
<p>Microsoft's documentation, has a whole <a href="https://code.visualstudio.com/docs/python/python-tutorial" title="VSCode Docs — Getting Started with Python in VSCode">Python Editing</a> chapter. If you are serious about using VSCode, especially with Python, you will have to put in some effort by yourself. In particular, be sure to read <a href="https://code.visualstudio.com/docs/python/editing" title="VSCode Docs — Editing Python in Visual Studio Code">Editing Python in Visual Studio Code</a>. There is also a <a href="https://marketplace.visualstudio.com/items?itemName=iansan5653.format-python-docstrings" title="VSCode Marketplace — Python Docstring Formatter">Python Docstring Formatter</a> extension you might find useful).</p>
<p>Independent of VSCode, you can use several code formatters that is build on the spirit of <a href="https://www.python.org/dev/peps/pep-0008/" title="Python — Enhancement Proposal 8"><span class="sc">PEP</span>-8</a>: <a href="https://github.com/google/yapf" title="GitHub — Google / yapf"><strong><code>yapf</code></strong></a>, <a href="https://pypi.org/project/autopep8/" title="PyPi — autopep8"><strong><code>autopep8</code></strong></a> and <a href="https://github.com/python/black" title="GitHub — Python / black"><strong><code>black</code></strong></a> (<a href="https://black.readthedocs.io/en/stable/" title="Read the Docs — Black / Stable">read the docs</a>). For checking code <em>compliance</em> with <a href="https://www.python.org/dev/peps/pep-0008/" title="Python — Enhancement Proposal 8"><span class="sc">PEP</span>-8</a>, you can use <a href="https://code.visualstudio.com/docs/python/linting#_specific-linters">any of these</a>, but most common are <a href="https://pypi.org/project/flake8/" title="PyPi — flake8"><strong><code>flake8</code></strong></a>, <a href="http://pylint.pycqa.org/en/latest/" title="Pylint — User Manual"><strong><code>pylint</code></strong></a>, <a href="https://pycodestyle.readthedocs.io/en/latest/" title="Read the Docs — pycodetyles&#39; Documenation"><strong><code>pycodestyle</code></strong></a> and some others. VSCode can be configured to automatically use these for formatting and continuous error checking and/or ‘linting’.</p>
<p>VSCode is quite an advanced editor, which inludes, for example, <a href="https://code.visualstudio.com/docs/editor/codebasics#_multiple-selections-multicursor" title="MS Docs — Visual Studio Code — Basic Editing # Multiple Cursors">multiple cursors</a>, but you can start with the basic <a href="https://code.visualstudio.com/docs/editor/codebasics#_multiple-selections-multicursor" title="MS Docs — Visual Studio Code — Basic Editing">Basic Editing</a> page.</p>
<h4 id="interactive-python">Interactive Python</h4>
<p>The simplest way to get started with Python, is to use an interactive <span class="sc">REPL</span> (Repeat, Execute, Print, Loop) shell. Running the <code>python</code> executable without arguments, will result in such a shell, although friendlier ones like IPython, ptpython, or ptipython, are available, but is not installed by default.</p>
<p><span class="sc">IDE</span>s (Integrated Development Environments) like Spyder, also allow for interactive shell use, although many use the IPython shell (which is a ‘good thing’). Most tutorials shows the CPython <span class="sc">REPL</span> prompt as: <code>&gt;&gt;&gt;</code>, which means it is ready for the next statement. The CPython shell is <em>always</em> available, whereas other shells require manual installation, unless it is installed by your chosen Python distribution (WinPython, Anaconda, ActivePython, etc.).</p>
<p>In a Python shell, the cursor keys can be used to scroll through previous commands. A command can be edited, and is only executed when you press <span class="key">enter</span>. Some commands may continue on the next line, and the prompt part will change to indicate that it is waiting for the rest of the code. This is a <em>continuation</em> prompt, normally: <code>...</code></p>
<p>Unlike a Python script, where you must explicitly use <code>print</code> for visual output, a shell will automatically print the result of any expression. So, <code>2 + 3</code><span class="key">enter</span> in a shell, will automatically print: <code>5</code>, whereas in a script, you will have to write: <code>print(2 + 3)</code> for the same effect.</p>
<p>Shells like IPython, have <em>tab completion</em>. This means that you can type one or two letters, and then press the <span class="key">tab</span> key, which will list possible completions starting with the typed letters. You can normally select one of the possibilities with <span class="key">up</span> or <span class="key">dn</span> arrows, followed by <span class="key">enter</span>.</p>
<p>The <code>dir()</code> and <code>help()</code> functions are generally only useful in a shell, and will never be used in real application scripts. The IPython interface is used by the <a href="http://qtconsole.readthedocs.io/en/latest/" title="ReadTheDocs — QtConsole for Jupyter">QT Console</a>, and Jupyter Notebooks, so you might be well advised to read the <a href="https://ipython.readthedocs.io/en/stable/" title="Read the Docs — IPython Documentation">IPython Documentation</a>, in particular the useful <a href="https://ipython.readthedocs.io/en/stable/interactive/tutorial.html#magic-functions" title="Read the Docs — IPython Documentation / Tutorial # Magic functions">Magic Functions</a> or ‘magics’. Useful magics are:</p>
<ul>
<li><code>%ls</code> — list files in current directory.</li>
<li><code>%reset</code> — delete all names (variables, functions, etc.)</li>
<li><code>%clear</code> — clear the screen (or <code>%cls</code> on Windows).</li>
<li><code>%cd</code> — change working directory.</li>
<li><code>%pwd</code> — print working directory.</li>
<li><code>%run</code> <span class="stx">script</span><span class="opt"><code>.py</code></span> — run a script in current dicectory.</li>
<li><code>%edit</code> <span class="stx">script</span><code>.py</code> — edit a file in your designated editor (<code>$EDITOR</code>).</li>
</ul>
<p>While the IPython <span class="sc">REPL</span> supports <code>dir()</code> and <code>help()</code>, you also can get information summaries by appending a question mark after a word, and pressing <span class="key">ENTER</span>, e.g.: <code>print?</code><span class="key">ENTER</span>. Also useful in IPython, is a line starting with an exclamation mark, which can be followed by a operating system shell command… you can even run a shell, and when you exit it, you will be back into the IPython <span class="sc">REPL</span>.</p>
<div class="admonition note">
<p><strong>NOTE</strong> — <strong><em>Online Python</em></strong></p>
<p>If you do not have Python available on a PC, you can still practice Python using some online interactive environment. One example, is <a href="https://repl.it/" title="repl.it Home Page"><strong>repl.it</strong></a>. The latest version requires (free) registration. A newer alternative is <a href="https://code.visualstudio.com/docs/remote/codespaces" title="GitHub — Codespaces">Github Codespaces</a></p>
</div>
<h2 id="winpython-notes">WinPython Notes</h2>
<p><a href="https://winpython.github.io/#releases" title="SourceForge — WinPython # Releases">WinPython</a> is a very convenient <a href="https://wiki.python.org/moin/PythonDistributions" title="Python Wiki — Python Distributions">distribution</a> of <a href="https://www.python.org/" title="Python — Home Page">Python</a> for Windows™, in that it does not require installation, i.e., it is a <a href="https://en.m.wikipedia.org/wiki/Portable_application" title="Wikipedia — Portable application">portable application</a> (relocateable) that does interfere with any installed Python.</p>
<p>By default, it extracts to the directory where you copied the <strong><code>Winpython64-3.8.6.0.exe</code></strong> executable, under the name <strong><code>WPy64-3860</code></strong>. For your convenience, it provides a number of <em>launcher</em> executables, not all of which are relevant for our purposes, nor are all mentioned here:</p>
<ul>
<li><p><strong><code>IDLE (Python GUI).exe</code></strong> — The official <a href="https://en.m.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" title="Wikipedia — Read-eval-print loop"><span class="sc">REPL</span></a> <span class="sc">GUI</span> (Graphical User Interface) text shell for Python.</p></li>
<li><p><strong><code>Spyder.exe</code></strong> — Launches the <a href="https://www.fossmint.com/spyder-python-ide-for-data-science/" title="Spyder — The Scientific Python IDE for Data Science">Spyder</a> <a href="https://en.m.wikipedia.org/wiki/Integrated_development_environment" title="Wikipedia — Integrated development environment"><span class="sc">IDE</span></a>, which provides a Python editor, and a shell.</p></li>
<li><p><strong><code>WinPython Command Prompt.exe</code></strong> — Opens a <a href="https://en.m.wikipedia.org/wiki/Cmd.exe" title="Wikipedia — cmd.exe">Command Prompt</a> (<code>cmd.exe</code>), with properly set <code>PATH</code> environment variable.</p></li>
<li><p><strong><code>WinPython Powershell Prompt.exe</code></strong> — Opens a <a href="https://en.m.wikipedia.org/wiki/PowerShell" title="Wikipedia — PowerShell">PowerShell</a> (<code>powershell.exe</code>), with properly set <code>PATH</code> environment variable. It does not open <strong><code>pwsh.exe</code></strong> (PowerShell Core/7).</p></li>
<li><p><strong><code>WinPython Control Panel.exe</code></strong> — Optionally allows you to ‘register’ (install) the WinPython distribution, with <a href="https://en.m.wikipedia.org/wiki/Start_menu" title="Wikipedia — Start Menu">Start Menu</a> shortcuts.</p></li>
<li><p><strong><code>Jupyter Notebook</code></strong> — Runs Python as a server, and allows you to write Python <a href="http://jupyter.org/" title="Project Jupyter Home">Jupyter</a> notebooks in your browser (formerly IPython Notebooks, now part of the <a href="https://en.m.wikipedia.org/wiki/Project_Jupyter" title="Wikipedia — Project Jupyter">Jupyter Project</a>).</p></li>
<li><p><strong><code>Jupyter Lab</code></strong> — Like Jupyter Notebook, but with a more modern and extended interface..</p></li>
</ul>
<p>For educational purposes, we really only require a programmer's editor to write Python <em>scripts</em>, and to execute those scripts in a command line shell (Command Prompt, PowerShell, or a <span class="sc">POSIX</span> shell). For Windows, we sometimes create a <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#python-launchers">batch file launcher</a> as a matter of convenience.</p>
<p>Python is very popular for <em>interactive</em> use, especially since it by default provides a <a href="https://en.m.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" title="Wikipedia — Read-eval-print loop"><span class="sc">REPL</span></a> <em>shell</em>. Most prefer the <a href="https://ipython.org/install.html" title="IPython Home Page">IPython</a> shell, and is the default for the Spyder <span class="sc">IDE</span>, and Jupyter Notebook. This is not part of the official CPython distribution, but can be easily installed in a standard Python installation.</p>
<h3 id="python-on-linux">Python on Linux</h3>
<p>Python is installed by default on most Linux distributions. This is your “system Python”, and should <strong>never ever be modified or updated</strong>. In commercial situations, the Linux distributions used are very convervative in terms of version numbers — you will generally not find the latest version of anything, since the overriding concern is stability, not features.</p>
<p>Practically then, for applications written in Python on Linux or <em>for</em> Linux, developers would want a later version than the system Python, but without affecting the system Python. This is en­tire­ly pos­si­ble, even if it may involve man­u­al­ly com­pi­ling CPython from source, and manually in­stal­ling any Python li­bra­ries a project may need.</p>
<p>Available options will depend on your Linux distribution; it will not be possible to pro­vide a ge­ne­ral re­ci­pe. Even if you compile from scratch, you will still have to manage different ver­sions of the stan­dard C/C++ li­bra­ries, ver­sions of com­pi­lers, etc. The price of choice. The concepts, how­ever, are generic — you want a newer/latest Python version, and you want to be able to use it without af­fect­ing the system Python.</p>
<p>If you try <a href="https://duckduckgo.com/?q=install+python+3.6+on+ubuntu+18.04&amp;t=hf&amp;ia=qa" title="DuckDuckGo Searh — install pythone 3.6 on ubuntu 18.04">this search</a>, you will find many guides on how to install Python 3.6 on Ubuntu 18.04 (Bionic Beaver) <span class="sc">LTS</span> (Long Term Support version). You can follow any guide that shows you a route to in­stall the pre­re­quis­ite compilers, build tools and libraries, followed by downloading the Python source code, configuring it, and compiling it. Or you can follow a guide that shows you ways to install a pre-compiled version from non-official sources (a <span class="sc">PPA</span> ­ Personal Package Archive). The two <span class="sc">PPA</span>s that are most commonly referenced with regard to Python, are from <a href="https://launchpad.net/~jonathonf/+archive/ubuntu/python-3.6" title="PPA — Jonathan F&#39;s for Python 3.6">Jonathan F</a>, and <a href="https://launchpad.net/~deadsnakes/+archive/ubuntu/ppa" title="PPA — Deadsnakes New Python Versions">deadsnakes</a>.</p>
<h2 id="python-on-macos">Python on macOS</h2>
<p>One of the most popular package managers for macOS, is <a href="https://brew.sh/" title="The Missing Package Manager for macOS">Homebrew</a>. We recommend you use Homebrew to install an up-to-date Python. The first command-line below will install the <code>brew</code> application.</p>
<h6 id="sh-install-homebrew-and-python-on-macos"><em>sh — Install Homebrew and Python on macOS</em></h6>
<div class="ws cmdline">
<div class="line-block"><sup>$</sup> /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"<br>
<sup>$</sup> brew install python3</div>
</div>
<p>You can also use <code>brew</code> to install VSCode and other useful utilities. Installing VSCode using this method, will also ensure that you will have a <code>code</code> command-line command that will run VSCode, so that ‘<code>code .</code>’ will run VSCode and open the current directory, ready for editing.</p>
<h6 id="sh-install-vscode-utilities-on-macos"><em>sh — Install VSCode &amp; Utilities on macOS</em></h6>
<div class="ws cmdline">
<div class="line-block"><sup>$</sup> brew install --cask <a href="https://code.visualstudio.com/">vscode</a><br>
<sup>$</sup> brew install --cask <a href="https://kapeli.com/dash">dash</a><br>
<sup>$</sup> brew install <a href="https://github.com/junegunn/fzf">fzf</a> <a href="https://github.com/sharkdp/fd">fd</a> <a href="https://github.com/BurntSushi/ripgrep">rg</a> <a href="https://github.com/sharkdp/bat">bat</a></div>
</div>
<p>On regular intervals, you can instruct Homebrew to upgrade all upgradable packages:</p>
<h6 id="sh-upgrade-installed-packages-on-macos"><em>sh — Upgrade Installed Packages on macOS</em></h6>
<div class="ws cmdline">
<div class="line-block"><sup>$</sup> brew upgrade<br>
<sup>$</sup> brew upgrade --cask<br>
<sup>$</sup> brew cleanup</div>
</div>
<p>The last command will delete old package downloads from Homebrew's cache.</p>
<p>You may also be prompted to run the following two commands <em>once</em>:</p>
<h6 id="sh-unshallow-homebrew-repositories"><em>sh — Unshallow Homebrew Repositories</em></h6>
<div class="ws cmdline">
<div class="line-block"><sup>$</sup> git -C "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core" fetch --unshallow<br>
<sup>$</sup> git -C "/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask" fetch --unshallow</div>
</div>
<h2 id="windows-subsystem-for-linux-wsl">Windows Subsystem for Linux (WSL)</h2>
<p>In case you want to use Python on Linux, one option is to enable Windows Subsystem for Linux (WSL), and install one of the <a href="https://www.microsoft.com/en-za/search?q=linux">available</a> WSL distributions. We recommend <a href="https://www.microsoft.com/en-za/p/ubuntu-1804-lts/9n9tngvndl3q?activetab=pivot:overviewtab">Ubuntu 18.04 LTS</a>. You can enable WSL and install a Linux image from the command line.</p>
<p>First off, use a PowerShell sesssion, which can be the default PowerShell that is installed with Windows.</p>
<p>To <em>enable</em> the use of WSL, run the following, <em>after</em> making some temporary directory your download directory with <strong><code>cd</code></strong>:</p>
<h6 id="enable-wsl-powershell"><em>Enable WSL (PowerShell)</em></h6>
<div class="sourceCode" id="cb1"><pre class="sourceCode ps1"><code class="sourceCode powershell"><span id="cb1-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb1-1" aria-hidden="true" tabindex="-1"></a>Enable-WindowsOptionalFeature -Online `</span>
<span id="cb1-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb1-2" aria-hidden="true" tabindex="-1"></a>   -FeatureName Microsoft-Windows-Subsystem-Linux</span></code></pre></div>
<p>Then, to download an Ubuntu 18.04 (LTS) image from the Windows App store:</p>
<h6 id="download-ubuntu-18.04-lts-with-powershell"><em>Download Ubuntu 18.04 (LTS) with PowerShell</em></h6>
<div class="sourceCode" id="cb2"><pre class="sourceCode ps1"><code class="sourceCode powershell"><span id="cb2-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">Invoke-WebRequest</span> -Uri https://aka.<span class="fu">ms</span>/wsl-ubuntu-1804 `</span>
<span id="cb2-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb2-2" aria-hidden="true" tabindex="-1"></a>   -OutFile ubuntu-1804.<span class="fu">appx</span> -UseBasicParsing</span></code></pre></div>
<p>You can also use the built-in <strong><code>curl</code></strong> command (which is available in later builds of Windows):</p>
<h6 id="alternative-download-method"><em>Alternative Download Method</em></h6>
<div class="sourceCode" id="cb3"><pre class="sourceCode ps1"><code class="sourceCode powershell"><span id="cb3-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="fu">curl</span>.<span class="fu">exe</span> -L -o ubuntu-1804.<span class="fu">appx</span> https://aka.<span class="fu">ms</span>/wsl-ubuntu-1804</span></code></pre></div>
<p>Now, you can install that <code>ubuntu-1804.appx</code> image with:</p>
<h6 id="install-ubuntu-image-powershell"><em>Install Ubuntu Image (PowerShell)</em></h6>
<div class="sourceCode" id="cb4"><pre class="sourceCode ps1"><code class="sourceCode powershell"><span id="cb4-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb4-1" aria-hidden="true" tabindex="-1"></a>Add-AppxPackage .\ubuntu-1804.<span class="fu">appx</span></span></code></pre></div>
<p>Once finished, you can run <strong>Ubuntu</strong> from the Start Menu, or the <strong><code>bash.exe</code></strong> executable (it's on your <code>PATH</code>).</p>
<h2 id="useful-utilities">Useful Utilities</h2>
<p>Some command line utilities that can be placed in any directory, e.g. <code>C:\Course\rxutils</code>, and can be used from anywhere as long as the directory is in your <code>PATH</code> (or <code>$Env.Path</code> in PowerShell). Here is a short summary for the most useful ones:</p>
<ul>
<li><p><a href="https://github.com/sharkdp/bat" title="GitHub — bat - A cat clone with wings"><strong><code>bat</code></strong></a> — Works like <code>cat</code> on Linux/Unix/macOS systems (and the PowerShell <code>cat</code> alias on Windows), except it syntax highlight the contents of files.</p></li>
<li><p><a href="http://www.greenwoodsoftware.com/less/" title="Less — Home Page"><strong><code>less</code></strong></a> — A <em>much</em> better pager/file viewer than <strong><code>more</code></strong> (which is all you get with Windows).</p></li>
<li><p><a href="https://github.com/BurntSushi/ripgrep" title="GitHub — BurntSushi / ripgrep"><strong><code>rg</code></strong> (ripgrep)</a> — Like a better recursive <code>grep</code>. Much better and much faster.</p></li>
<li><p><a href="https://github.com/sharkdp/fd" title="GitHub — sharkdp / fd"><strong><code>fd</code></strong></a> — Recursive file finder. Fast.</p></li>
<li><p><a href="https://github.com/junegunn/fzf" title="GitHub — junegunn / fzf"><strong><code>fzf</code></strong></a> — Fuzzy finder for files to process. Requires a Unix-like shell, or PowerShell to use for full effect. For example, you can use it in PowerShell to edit a file with our <code>vscode</code> alias like this:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb5-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ex">vscode</span> <span class="va">$(</span><span class="ex">fzf</span><span class="va">)</span></span></code></pre></div>
<p>The above command will run <code>fzf</code> first, which will allow you to easily select a file, whose name is then placed in the command line, and which VSCode will then open for editing. See this <a href="https://www.youtube.com/watch?v=qgG5Jhi_Els" title="YouTube — Vim univers. fzf - command line fuzzy finder">YouTube Video</a>.</p>
<p>Instead of <code>vscode</code> or <code>code</code>, you can use any editor or command that needs to edit or otherwise process one or more files returned by the <code>fzf</code> command… like <strong><code>vim</code></strong> or <strong><code>gvim</code></strong>.</p></li>
</ul>
<h2 id="python-scripts">Python Scripts</h2>
<p>Python code that is stored in a file, and is then generically called a <em>Python script</em>. The script may be a complete program, but generally, programs consist of several Python files and modules. A module is simply a Python script following certain conventions that makes it suitable for use with <strong><code>import</code></strong>.</p>
<h3 id="hash-bang-shebang-comment">Hash-Bang / Shebang Comment</h3>
<p>The first comment may follow a <span class="sc">POSIX</span> convention. When followed by an exclamation mark (called ‘bang’ in this context), it is treated as the path to an interpreter to run the script with. This only has effect if the <em>mode</em> of the file contains <strong><code>x</code></strong> (executable), which can be changed with <strong><code>chmod</code></strong>. <span class="sc">POSIX</span> shells will treat the script the same as an executable.</p>
<p>Example: <code>#!/usr/bin/env python3</code></p>
<h3 id="encoding">Encoding</h3>
<p>The encoding of the Python script should be <span class="sc">UTF-8</span>. You can tell Python that it is encoding as such, with another special comment:</p>
<h6 id="python-encoding-specifier"><em>Python encoding specifier</em></h6>
<div class="sourceCode" id="cb6"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb6-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding utf-8 -*-</span></span></code></pre></div>
<p>This should follow the hash-bang line, although python will recognise it, even if it does not directly follow.</p>
<h3 id="executable-scripts">Executable Scripts</h3>
<p>On <span class="sc">POSIX</span> systems, you can make a script executable (just like a compiled program), with:</p>
<h6 id="make-script-executable"><em>Make script executable</em></h6>
<div class="ws cmdline">
<div class="line-block"><sup>&gt;</sup> <strong>chmod</strong> a+x <span class="stx">script</span></div>
</div>
<p>Now, instead of running a script with:</p>
<h6 id="manually-running-a-python-script"><em>Manually running a Python script</em></h6>
<div class="ws cmdline">
<div class="line-block"><sup>&gt;</sup> <strong>python</strong> <span class="stx">script</span><br>
<sup>&gt;</sup> <strong>python3</strong> <span class="stx">script</span></div>
</div>
<p>you can run it in the current directory as follows (or if it is somewhere on your <code>PATH</code>, without the <strong><code>./</code></strong>):</p>
<h6 id="running-an-executable-python-script"><em>Running an executable Python script</em></h6>
<div class="ws cmdline">
<div class="line-block"><sup>&gt;</sup> <strong>./</strong><span class="stx">script</span></div>
</div>
<p>As a suggestion, keep your <span class="stx">script</span> with the <strong><code>.py</code></strong> extension, but create a symbolic or hard link to it with <strong><code>ln</code></strong> in some directory in your <code>PATH</code>, without the <strong><code>.py</code></strong> extension.</p>
<p>You may also have to run <strong><code>python3</code></strong>, instead of <strong><code>python</code></strong>… and <strong><code>ipython3</code></strong>, <strong><code>pip3</code></strong>, etc.</p>
<div class="admonition note">
<p><strong>NOTE</strong> — <strong><em>Set Default Python on Ubuntu 18.04</em></strong></p>
<p>Ubuntu 18.04 (including the WSL version), does not install Python2 by default — Python3 (minimal) is installed. If you accidentally installed Python2, or some other installation switched the default to Python2, you can revert this with these commands:</p>
<div class="ws cmdline">
<div class="line-block"><sup>&gt;</sup> sudo apt purge python-2.x-minimal<br>
<sup>&gt;</sup> sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 20</div>
</div>
<p>You could also try: <strong><code>sudo apt purge python2.x-minimal</code></strong></p>
</div>
<h2 id="python-launchers">Python Launchers</h2>
<p>On Windows, we can create executable programs, batch files, or scripts that indirectly executes or <em>luanches</em> your Python <span class="stx">scripts</span>. Because of the way POSIX shells interpret a <em>hash-bang</em> or <em>shebang</em> line, this is less useful on Unix, macOS and Linux.</p>
<p>By convention then, even if not usable under Windows Command Prompt or Windows PowerShell, you should start your scripts with a ‘hash bang’ (or she-bang) line:</p>
<p><span class="tab1"></span><code>#!/usr/bin/env python3</code></p>
<p>What you should also include, is the <em>encoding</em>, which should be <span class="sc">UTF-8</span>:</p>
<p><span class="tab1"></span><code># -*- coding: utf-8 -*-</code></p>
<p>Here is an example ‘hello world’ script, which you can use as an example:</p>
<h5 id="hello.py-traditional-hello-world-python-example"><strong><code>hello.py</code></strong> — <strong><em>Traditional ‘Hello World’ Python Example</em></strong></h5>
<div class="sourceCode" id="cb7"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb7-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb7-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb7-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb7-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="co">A simple ‘Hello, World’ program in Python</span></span>
<span id="cb7-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb7-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">'Hello, World!'</span>)</span>
<span id="cb7-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb7-7" aria-hidden="true" tabindex="-1"></a>name <span class="op">=</span> <span class="bu">input</span>(<span class="st">"What's your name?: "</span>)</span>
<span id="cb7-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"Well, hello </span><span class="sc">{0}</span><span class="st">!"</span>.<span class="bu">format</span>(name))</span></code></pre></div>
<p>You can add a Vim <a href="https://vim.fandom.com/wiki/Modeline_magic"><strong>modeline</strong></a> in addition (as the 3rd line or at the end of the script):</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb8-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co"># vim: set fenc=utf-8 et ts=4 sw=3 sts=3 :</span></span></code></pre></div>
<p>The above script's style is suitable for ‘quick and dirty’ Python utilities and simple programs. However, sooner rather than later, learn to use the ‘<a href="https://incusdata.site/pan/py/python-ipyp-20191118-code.html#main-pattern-for-python-scripts"><code>main</code> pattern</a>’. By the same token, do not get lured by ‘convenience’ to omit the <strong><code>.py</code></strong> extension, since many tools, including Python's <code>import</code> statements <strong>expects</strong> the <strong><code>.py</code></strong> (or <strong><code>.pyc</code></strong> to be exact).</p>
<p>You can run the script with: <span class="cmdline"><code>python hello.py</code></span>, or you can create a batch file on Windows, called <code>hello.cmd</code>, with the following content, and then just run <span class="cmdline"><code>hello</code></span>. The <code>hello.py</code> should be in the same directory as <code>hello.cmd</code>.</p>
<h5 id="hello.cmd-launcher-batch-file-for-windows"><strong><code>hello.cmd</code></strong> — <strong><em>Launcher Batch File for Windows</em></strong></h5>
<pre class="batch"><code>@echo off &amp;&amp; setlocal enableextensions
:: This is a ‘launcher’ batch file for `hello.py`. Any arguments passed to
:: this batch file, will be forwarded to the script, in case it cares.
::
python %~dp0~n0.py %*
pause</code></pre>
<p>If you do not expect users to double-click on the file, you may want to remove the <code>pause</code> at the end.</p>
<p>You can use the above batch file as a template to create ‘launchers’ for your other scripts, otherwise you just run it with: <span class="cmdline"><code>python</code> <span class="stx">script-name</span><code>.py</code></span>. You can also use a shell script on <span class="sc">POSIX</span> systems to launch your Python program. Here is a simple example:</p>
<h5 id="hello-shell-script-launcher"><strong><code>hello</code></strong> — <strong><em>Shell Script Launcher</em></strong></h5>
<div class="sourceCode" id="cb10"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb10-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env sh</span></span>
<span id="cb10-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="co"># This is a ‘launcher’ script for `hello.py`. Any arguments passed to</span></span>
<span id="cb10-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="co"># this shell script, will be forwarded to the Python script.</span></span>
<span id="cb10-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="ex">python3</span> ~/work/scripts/hello.py <span class="va">$@</span></span></code></pre></div>
<p>Getting the actual directory of a script, irrespective of the current directory (like <strong><code>%~dp0</code></strong> in batch files), has no equivalent in <span class="sc">POSIX</span>. It is a <a href="https://stackoverflow.com/questions/29832037/how-to-get-script-directory-in-posix-sh" title="StackOverflow — How to get script directory in POSIX">non-trivial problem</a>. If you are willing to use a <strong><code>bash</code></strong> non <span class="sc">POSIX</span>-compliant feature, you can try this:</p>
<h5 id="hello-bash-specific-launcher"><strong><code>hello</code></strong> — <strong><em>Bash-Specific Launcher</em></strong></h5>
<div class="sourceCode" id="cb11"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb11-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env bash</span></span>
<span id="cb11-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="co"># This is a ‘launcher’ script for `hello.py`. Any arguments passed to</span></span>
<span id="cb11-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="co"># this shell script, will be forwarded to the Python script. Bash-specific.</span></span>
<span id="cb11-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="va">SCRIPTPATH=$(</span><span class="fu">dirname</span> <span class="st">"</span><span class="va">$BASH_SOURCE</span><span class="st">"</span><span class="va">)</span></span>
<span id="cb11-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="ex">python3</span> <span class="st">"</span><span class="va">${SCRIPTPATH}</span><span class="st">/hello.py"</span> <span class="va">$@</span></span></code></pre></div>
<p>As with all scripts that are to be treated as executable, you should <code>chmod a+x</code> the shell script.</p>
<p>You can put a “pause” in the script if you expect people will double-click on it. In <span class="sc">POSIX</span> shell scripts, you can simply use <code>read</code>, or in Window batch files, <code>pause</code>. If you do not, the operating system will automatically close the terminal or console it allocated for your script when it terminates. This is discretionary… not all scripts would need a pause; and you could also simply use a <strong><code>input()</code></strong> statement in your script.</p>
<p>This is a portable PowerShell script, that will launch a Python3 script with the same basename, and in the same directory. You basically copy this <code>pylauncher.ps1</code> file to: <code>hello.ps1</code> (for example), which will then launch <code>hello.py</code>. Just as under Command Prompt, you do not have to specify the extension of executables or batch files, PowerShell does not require you to run a <code>hello.ps1</code> with the extension… just <code>hello</code> will do (or <code>.\hello</code> if it is in the current directory, and not on your <code>$Env:PATH</code>).</p>
<h6 id="pylauncher.ps1-powershell-script-to-launch-python-script"><strong><code>pylauncher.ps1</code></strong> — <strong><em>PowerShell Script to Launch Python Script</em></strong></h6>
<div class="sourceCode" id="cb12"><pre class="sourceCode ps1"><code class="sourceCode powershell"><span id="cb12-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co"># Launches `‹basename›.py`, expected to be in the same directory as this script,</span></span>
<span id="cb12-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="co"># assuming it was renamed `‹basename›.ps1`. Designed to be used from PowerShell.</span></span>
<span id="cb12-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="co">#</span></span>
<span id="cb12-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="va">$PyScript</span> = [IO.<span class="fu">Path</span>]::ChangeExtension(<span class="va">$PSCommandPath</span>, <span class="st">"py"</span>)</span>
<span id="cb12-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="kw">if</span> (<span class="va">$IsWindows</span>) {</span>
<span id="cb12-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb12-6" aria-hidden="true" tabindex="-1"></a>   python <span class="va">$PyScript</span> <span class="va">$args</span></span>
<span id="cb12-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb12-7" aria-hidden="true" tabindex="-1"></a>   }</span>
<span id="cb12-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb12-8" aria-hidden="true" tabindex="-1"></a><span class="kw">else</span> {</span>
<span id="cb12-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb12-9" aria-hidden="true" tabindex="-1"></a>   python3 <span class="va">$PyScript</span> <span class="va">$args</span></span>
<span id="cb12-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb12-10" aria-hidden="true" tabindex="-1"></a>   }</span></code></pre></div>
<p>It is designed to be run from a PowerShell session, but you could put a <em>hash-bang</em>/<em>shebang</em> line at the top. This is only useful if PowerShell is installed in Linux, Unix, or macOS. And you would still have to mark it as executable with <strong><code>chmod</code></strong> on those operating systems.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb13-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env pwsh -NoLogo</span></span></code></pre></div>
<p>Then, you can run it from a Bash or other <span class="sc">POSIX</span> shell,… though you may want the remove the <code>.ps1</code> extension in this case. And, do not forget to do <span class="cmdline"><code>chmod a+x</code> <span class="stx">script</span></span>. Optionally, for convenience, you could ensure that it can be found via your <code>PATH</code>.</p>
<p>But, to be clear, on Linux (including WSL) and macOS, the best solution is to keep your <span class="stx">basename</span><strong><code>.py</code></strong> files in your source directory; <code>chmod a+x</code> <span class="stx">basename</span><strong><code>.py</code></strong> and make a symbolic link in some directory in your <code>$PATH</code>, like <code>$HOME/bin/</code><span class="stx">basename</span>, Some people prefer <code>$HOME/.local/bin</code> for ‘personal’ binaries, where <strong><code>pip</code></strong> also installs ‘local’ launchers for some modules that can work like applications.</p>
<h2 id="script-structure">Script Structure</h2>
<p>Technically, a Python script may simply consist of a sequence of <span class="stx">statement</span>s, executed from top to bottom. For trivial code that is not meant for production, this is perfectly acceptable. With time however, a useful pattern has emerged that provides several benefits.</p>
<figure>
<img src="./Course Notes 2020-12-07_files/py-script-web.svg" class="shade" data-padding="2rem,0,2rem" style="width:100.0%" alt="figure: Typical Script Structure"><figcaption aria-hidden="true">figure: <strong><em>Typical Script Structure</em></strong></figcaption>
</figure>
<p>Since the figure above is a <em>pattern</em> and a common <em>convention</em>, it is not a required syntax, but conformance to the above structure means that it can be applied to both modules and scripts (programs). Furthermore, the <a href="https://docs.python.org/3/library/pydoc.html" title="Python Docs — Library / pydoc"><strong>pydoc</strong></a> module requires such a structure, and can then generate text or HTML documentation for the program. The <a href="https://docs.readthedocs.io/en/stable/intro/getting-started-with-sphinx.html" title="Read the Docs — Getting Started with Sphinx">Sphinx</a> documentation generation system is popular for larger Python projects. It too, requires a structure like above.</p>
<p>Variations are possible. For example, you do not <em>have</em> to pass <code>sys.argv</code> to the <code>main</code> function. You also do not <em>have</em> to return an exit code from your script; then a ‘<code>return</code>’ statement is not necessary in <code>main</code>, and you do not call <code>sys.exit</code>.</p>
<h6 id="minimal-alternative-pattern"><em>Minimal alternative pattern</em></h6>
<div class="sourceCode" id="cb14"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb14-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb14-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb14-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb14-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main():</span>
<span id="cb14-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb14-5" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"Hello, World!"</span>)</span>
<span id="cb14-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb14-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb14-7" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">"__main__"</span>:</span>
<span id="cb14-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb14-8" aria-hidden="true" tabindex="-1"></a>   main()</span></code></pre></div>
<p>You should still document the file and each function.</p>
<p>This pattern is not required for interactive code, or code in Jupyter Notebooks.</p>
<h1 id="python-features">Python Features</h1>
<p>This section will provide an overview of most of Python's features, starting with the char­ac­te­ris­tics that distinguish it from other languages you may be familiar with — or what is has in common with languages you know.</p>
<p>Python is a computer programming language, and like human languages, have a vocabulary (keywords), a syntax and a grammar. Unlike a human language, the rules are unambiguous. Some rules are based on <em>context</em> (where the language element appears).</p>
<p>Programming language works with <em>values</em>, and often values have <em>types</em>, as in Python. A type determines what <em>operations</em> can be performed on the value. Operations can be performed by <em>operator</em>, or <em>built-in functions</em>, or <em>methods</em> (special type-specific functions).</p>
<p>Values can be <em>compound</em> (consist of other values). In Python, this can be <em>attributes</em> or <em>properties</em> of an object (value). Values can be arranged in collections with different characteristics. Lists and tuples in Python, have overlapping behaviour, but tuples are more memory efficient, though has fewer possible operations.</p>
<h2 id="pythonic-pythonistas">Pythonic Pythonistas</h2>
<p>Since Python has some features not found in many other languages, and aspires to a ‘philosophy’, called “The Zen of Python”, neophytes are constantly reminded to follow the guidelines in <a href="https://www.python.org/dev/peps/pep-0008/" title="Python — Enhancement Proposal 8">Python Enhancement Proposal 8</a> (<span class="sc">PEP</span> 8), or check the <a href="https://github.com/PyCQA/pycodestyle" title="GitHub — pycodestyle (formally called pep8) - Python style guide checker">PyCodeStyle</a>, or even <a href="https://google.github.io/styleguide/pyguide.html" title="GitHub — Google / Google Python Style Guide">Google Python Style Guide</a></p>
<p>Once programmers can demonstrate that they aspire to, and apply this ‘Pythonic’ philosophy, they may consider calling themselves ‘Pythonistas’.</p>
<p>From Wikipedia's <a href="https://en.m.wikipedia.org/wiki/Python_%28programming_language%29" title="Wikipedia — Python (programming language)">Python</a> page:</p>
<div class="quotation">
<p>A common neologism in the Python community is <strong><em>pythonic</em></strong>, which can have a wide range of meanings related to program style. To say that code is pythonic is to say that it uses Python idioms well, that it is natural or shows fluency in the language, that it conforms with Python's minimalist philosophy and emphasis on readability. In contrast, code that is difficult to understand or reads like a rough transcription from another programming language is called unpythonic.</p>
</div>
<p>Furthermore, beginners will do well to at least once run ‘<strong><code>import this</code></strong>’ in a Python <span class="sc">REPL</span> shell. For your convenience, here is the output, and a link to <a href="https://www.python.org/dev/peps/pep-0020/" title="Python — PEP 20 — The Zen of Python"><span class="sc">PEP</span>-20</a>:</p>
<pre class="output"><code>The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!</code></pre>
<h3 id="convention-conformance">Convention Conformance</h3>
<p>Learn to use tools like <code>pylint</code> <span class="alt"></span> <code>flake8</code>, and <a href="https://black.readthedocs.io/en/stable/" title="Read the Docs / black"><code>black</code></a> <span class="alt"></span> <code>yapf</code> at minimum, as soon as possible. This will help you create code with ‘acceptable’ style and indentation. In partuclar, <code>pylint</code> can point out some questionable practices. The <code>black</code> tool has very few customisation options, and as such we recommend it for newcomers.</p>
<p>These are all third-party tools, and may not be available in your environment. However, you can install them locally (in your personal directory) with <strong><code>pip</code></strong>. If you are running in a virtual environment, you can install it there.</p>
<h6 id="install-some-useful-style-related-and-formatting-modules-locally"><em>Install some useful style-related and formatting modules locally</em></h6>
<pre class="cmd"><code>pip install --user pylint flake8 black yapf</code></pre>
<p>At minimum, you need <code>pylint</code> and <code>black</code>. Both modules provide ‘launcher’ executables with the same names. All tools base there rules on <a href="https://www.python.org/dev/peps/pep-0008/" title="Python — Enhancement Proposal 8"><span class="sc">PEP</span>-8</a> (Python Enhancement Proposal 8 — Style Guide for Python).</p>
<p>Do note that Python IDEs and editors like VSCode with the Python plugin, can be configured to automatically run a specific <em>formatter</em> and <em>linter</em>. One can set up VSCode to automatically format a file when saved. Do note though, that formatters only work with syntactically correct code.</p>
<h2 id="fundamental-characteristics">Fundamental Characteristics</h2>
<p>Here are some fun­da­men­tal features of Python you need to be aware of, right from the start:</p>
<ul>
<li><p><strong><span class="sc">UTF-8</span> encoding</strong> — By default, Python assumes your code and scripts are <span class="sc">UTF-8</span> encoded. There is no reason to use any other encoding. Literal strings are by default <span class="sc">UTF-8</span> encoded as well.</p></li>
<li><p><strong>Case-sensitive</strong> — Python is case-sensitive, which means upper-case and lower-case letters have different meanings.</p></li>
<li><p><strong>White-space aware</strong> — Whitespace (newlines, tabs, spaces) have <em>semantic</em> importance in Python: a newline indicates the end of a statement, and indentation (typically 4 spaces are recommended) forms a block or scope. Python does try to be intelligent, and will allow line breaking where it is clear that the statement is not complete (when inside paired delimiters like <strong><code>(</code></strong>, <strong><code>[</code></strong> and <strong><code>{</code></strong>), and before or after binary operators.</p></li>
<li><p><strong>Blocks</strong> — Python does not have block delimiters. A block is implied in a context (e.g. after an <strong><code>if</code></strong>, <strong><code>while</code></strong> or <strong><code>for</code></strong> statement), and must be indented. All statements that are indented at the same level, are part of the block. The block ends with the first statement not indented, or the end of the file.</p></li>
<li><p><strong>Comments</strong> — Python only has line comments: a hash character (<code>#</code>) and all following text until the end of the line, will be treated as a comment and ignored. A triple-quoted string at the be­gin­ning of a module, or after the start of a function or class, is treated as documentation for the class, which module <code>pydoc</code> can extract and display.</p></li>
<li><p><strong>Line joining</strong>&nbsp;— Two lines can be joined, or continued, by ending the first with a trailing back­slash character (<code>\</code>). Logically, the lines will become one line. Several lines can be joined this way. Interactive Python shells will change the prompt to show when a line is continued, for whatever reason.</p></li>
<li><p><strong>Documentation Strings</strong> — Special <em>docstrings</em> are just string literals at the beginning of a file, function, or class. These are actually stored as documentation for the file, function or class. They are not comments in a syntactical sense, but does ‘comment’, or rather <em>document</em> the code.</p></li>
<li><p><strong>Expressions</strong> — Like most languages, <em>expressions</em> are values, which may be simple expressions (literals or variables), or more complex, containing <em>operators</em>. Either way, an expression <em>results</em> in a value, and every value has a <em>type</em>. An expression can be used as a statement, but is generally only useful in interactive environments.</p></li>
<li><p><strong>Statements</strong> — Statements are generally terminated by a newline. This rule is relaxed between the paired characters: <strong><code>()</code></strong>, <strong><code>[]</code></strong>, and <strong><code>{}</code></strong>. In this case a <em>logical line</em> may consist of several <em>physical lines</em>. Multiple physical lines are always possible with the <em>line-continuation</em> syntax (backslash at the end of a line).</p></li>
<li><p><strong>Blocks</strong> — Python's statement blocks do no have delimiters, but is achieved by <em>indentation</em> when the syntax requires a <span class="stx">block</span>, normally after a colon (<code>:</code>). A block is thus a sequence of indented statements. Blocks do not have scope, though <em>function</em> do have a nested scope.</p></li>
<li><p><strong>Statement separator</strong> — A semi-colon character (<code>;</code>) acts as separator between multiple state­ments that appear on the same line. This is not recommended practice, except maybe in­ter­ac­tive­ly.</p></li>
<li><p><strong>Names</strong> — What you may think of as a <em>variable</em> or a <em>function</em> in other languages, is just a label in Python — just a <em>name</em>, in other words. A name has no type, and can only ever represent a <em>reference</em> to an actual object. At any point, it can be re-assigned to represent another object — even of a different type. We indicate names formally as <span class="stx">ident</span>ifiers.</p></li>
<li><p><strong>Type safety</strong> — Python is a <em>type-safe</em> language. This means it has built-in types, and you can cre­ate user-defined types. A piece of memory (object) can only be of one type once created, and cannot be converted. Some types can be converted to other types, but this still does not change the original.</p></li>
<li><p><strong>Duck typing</strong> — Arguments passed to a function's parameter are not checked by Python. The func­tion will work with <em>any</em> type, as long as the type provides the methods, prop­er­ties or at­tri­but­es required by the code. <a href="https://en.m.wikipedia.org/wiki/Duck_typing" title="Wikipedia — Duck typing">Wikipedia's entry</a></p></li>
<li><p><strong>Built-in functions</strong> — Unlike languages like C and C++, Python has a fair number of <a href="https://docs.python.org/3/library/functions.html" title="Python Docs — Python Built-in Functions">built-in func­tions</a> (and an extensive <a href="https://docs.python.org/3/library/index.html" title="Python Docs — Python Standard Library">standard library</a>).</p></li>
<li><p><strong>User-Defined Functions</strong> — User-defined functions are created with the <strong><code>def</code></strong> keyword, and cannot be overloaded, but can be designed to take arbitrary arguments. This leverages <em>duck typing</em>: it does not matter what types of values you pass to a function; it only matters that the operations you perform in the function, is legal for the type passed.</p></li>
<li><p><strong>Dictionaries</strong> — Apart for the user-level <strong><code>dict</code></strong> type, all <span class="stx">ident</span>ifiers in Python, are stored in dictionaries. Every module has a dictionary of names. Every function has a local dictionary for local name. Inheritance are performed by chaining nested dictionaries. Scope is implemented as nested dictionaries. Dictionaries are <strong>important</strong>.</p></li>
</ul>
<h2 id="keywords-and-identifiers">Keywords and Identifiers</h2>
<p>The reserved keywords in the language cannot be used as identifiers (names). They can only be used as per their formal syntax descriptions.</p>
<h3 id="keywords">Keywords</h3>
<p>There are not many keywords in Python, which is to its advantage…</p>
<h4 id="syntax-python-keywords"><strong>Syntax</strong> — <strong><em>Python Keywords</em></strong></h4>
<div class="stx">
<div class="line-block"><code>False      class      finally    is         return</code><br>
<code>None       continue   for        lambda     try</code><br>
<code>True       def        from       nonlocal   while</code><br>
<code>and        del        global     not        with</code><br>
<code>as         elif       if         or         yield</code><br>
<code>assert     else       import     pass</code><br>
<code>break      except     in         raise</code></div>
</div>
<p>The only purpose of the above table is to save you some time: avoid using them for your names (identifiers). You can ask Python to produce the above list with:</p>
<h6 id="pattern-list-keywords"><em>Pattern: List Keywords</em></h6>
<div class="sourceCode" id="cb17"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb17-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> keyword</span>
<span id="cb17-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(keyword.kwlist)</span></code></pre></div>
<p>Although we will eventually cover all keywords, note that <strong><code>None</code></strong> is equivalent to <code>nil</code>, <code>NULL</code>, <code>null</code> or <code>nullptr</code> as found in other languages — representing the ‘absence of a value’. It has type <code>NoneType</code> (try: <code>type(None)</code>). Also note, that <code>keyword.iskeyword(</code><span class="stx">string</span><code>)</code> will return <code>True</code> if <span class="stx">string</span> is a keyword, else <code>False</code>.</p>
<p>For interest's sake, to get a list of built-in functions do the following:</p>
<h6 id="pattern-list-built-in-functions"><em>Pattern: list Built-in Functions</em></h6>
<div class="sourceCode" id="cb18"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb18-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> builtins</span>
<span id="cb18-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">dir</span>(builtins))</span></code></pre></div>
<p>You should thus also avoid user-defined identifiers that are built-in function names. The Python <em>reflection</em> module <a href="https://docs.python.org/3/library/inspect.html" title="Python Docs — Library / inspect — Inspect live objects"><strong><code>inspect</code></strong></a> provides the <code>isbuiltin(</code><span class="stx">obj</span><code>)</code> that can determine if <span class="stx">obj</span> is a built-in function, or not. Tools like <a href="https://www.pylint.org/" title="PyLint — Star your Python code!">Pylint</a> and <a href="https://gitlab.com/pycqa/flake8" title="GitLab — Flake8">Flake8</a> (<a href="http://flake8.pycqa.org/en/latest/" title="Flake8 — Documentation">docs here</a>) can check if your code conforms to <a href="https://www.python.org/dev/peps/pep-0008/" title="Python — Enhancement Proposal 8"><span class="sc">PEP</span>-8</a>, and will warn you about identifiers that are built-in functions. You can configure some editors/<span class="sc">IDE</span>s like VSCode to automatically run <code>pylint</code> or <code>flake8</code> on your code.</p>
<h3 id="identifiers">Identifiers</h3>
<p>Your own names cannot start with a digit. Although starting a name with underscores is legal syn­tax, it should be avoided: names that begin with underscores are reserved for special purposes within Py­thon (you will be using this later). After the first character, you can use any <span class="sc">UTF-8</span> al­pha­bet­ic letters, but should restrict yourself to <span class="sc">ASCII</span> characters, digits, and underscores.</p>
<p>Apart from keywords, also do not use that names of built-in functions for your identifiers. This is not technically illegal, but constitutes bad programming practice if you do.</p>
<h2 id="observations-about-types">Observations About Types</h2>
<p>All types in Python are <em>classes</em>; when we talk about <span class="stx">type</span>, it really means ‘class <span class="stx">type</span>’.</p>
<p>The first four important types are: <strong><code>int</code></strong>, <strong><code>float</code></strong>, <strong><code>str</code></strong> and <strong><code>bool</code></strong>, meaning <em>integer</em>, <em>floating point</em>, <em>string</em> and <em>boolean</em>, respectively. You can ask Python to show you the type of any <span class="stx">expr</span>ession, using the <strong><code>type()</code></strong> built-in function.</p>
<p>These are actually <em>type functions</em> (acting much like constructors in languages like C++, Java and C#). They can ‘construct’ or ‘convert’ many arguments types to the corresponding specific type. Absolutely any type is convertible to <strong><code>str</code></strong> (much like <span class="stx">object</span><strong><code>.ToString()</code></strong> in other languages).</p>
<p>The <strong><code>repr()</code></strong> function can also convert anything to a <strong><code>str</code></strong>, but the appearance of the result is more technical. This is the function Python <span class="sc">REPL</span>s use to automatically print the results of expressions; the <strong><code>print()</code></strong> function on the other hand, uses <strong><code>str</code></strong> on all its arguments.</p>
<p>These types are enough to understand the fundamental <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#literals">literals</a>, although with discuss it more deeply under the <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#standard-types">Standard Types</a> heading.</p>
<h2 id="literals">Literals</h2>
<p><a href="https://docs.python.org/3/reference/lexical_analysis.html#literals" title="Python Docs — Lexical Analysis # Literals">Literals</a> are constant values without a name. Python allows for string and numeric literals. You can treat <strong><code>True</code></strong> and <strong><code>False</code></strong> as literals as well, though Python calls them ‘<a href="https://docs.python.org/3/library/constants.html" title="Python Docs — Built-in Constants">constants</a>’, as do many languages.</p>
<p>The first literal you would usually encounter in learning a new language, is a string literal, as in <code>"Hello World"</code>. Initial excursions with Python normally involve using it interactively as a cal­cu­la­tor, how­ever, which means <a href="https://docs.python.org/3/reference/lexical_analysis.html#numeric-literals" title="Python Docs — Lexical Analysis # Numeric Literals">numeric literals</a> are usually elaborated first.</p>
<p>For educational purposes, you can use the <a href="https://docs.python.org/3/library/functions.html#type" title="Python Docs — Built-in Functions — type()"><code>type(</code><span class="stx">literal</span><code>)</code></a> function to inspect the type of any <span class="stx">literal</span>. In fact, you can use any object (value) in place of <span class="stx">literal</span>; for that matter, any <span class="stx">expr</span>ession.</p>
<h3 id="numeric-literals">Numeric Literals</h3>
<p>There are three <a href="https://docs.python.org/3/library/stdtypes.html" title="Python Docs — Built-in Types">types</a> of numeric literals: <a href="https://docs.python.org/3/library/functions.html#int" title="Python Docs — Built-in Functions # int()"><code>int</code>eger</a>, <a href="https://docs.python.org/3/library/functions.html#float" title="Python Docs — Built-in Functions # float()"><code>float</code>ing point</a>, and imaginary (as in <a href="https://docs.python.org/3/library/functions.html#complex" title="Python Docs — Built-in Functions # complex()"><code>complex</code> number</a>). From Python 3.6, numeric literals may use underscores as digit separators.</p>
<p>Literal numbers without a decimal sign, optionally prefixed with <code>0b</code> (binary), <code>0o</code> (octal) or <code>0x</code> (hex­a­dec­i­mal), are of <a href="https://docs.python.org/3/library/functions.html#int" title="Python Docs — Built-in Functions # int()">type <code>int</code></a>. The unary minus (<code>-</code>) or unary plus (<code>+</code>) may appear right at the start. The default is <code>+</code>, so almost nobody ever writes it explicitly.</p>
<p>Numbers that contain a decimal point are of <a href="https://docs.python.org/3/library/functions.html#float" title="Python Docs — Built-in Functions # float()">type <code>float</code></a>. They can use fixed point notation, or exponential (scientific) notation.</p>
<p>To get an imaginary number, use the suffix <code>j</code>. There is no type for an imaginary number, simply write it as a <a href="https://docs.python.org/3/library/functions.html#complex" title="Python Docs — Built-in Functions # complex()"><code>complex</code> literal</a> with the real part being <code>0</code>: <code>0.12j</code>, for example.</p>
<p>Numeric literals can be converted to string representation. The default base is decimal, but the <a href="https://docs.python.org/3/library/functions.html#bin" title="Python Docs — Functions # ord()"><code>bin</code> ()</a>, <a href="https://docs.python.org/3/library/functions.html#oct" title="Python Docs — Functions # ord()"><code>oct</code> ()</a> and <a href="https://docs.python.org/3/library/functions.html#hex" title="Python Docs — Functions # ord()"><code>hex</code> ()</a> functions can convert a number to a string representation in binary, octal and hexadecimal, respectively.</p>
<h4 id="syntax-floating-point-literals"><strong>Syntax</strong> — <strong><em>Floating Point Literals</em></strong></h4>
<div class="stx">
<ul>
<li><strong>Exponential notation</strong>: <span class="opt"><strong><code>+</code></strong><span class="alt"></span><strong><code>-</code></strong></span><span class="stx">digits</span><sub>*</sub><strong><code>.</code></strong><span class="stx">digits</span><sub>+</sub><strong><code>e</code></strong><span class="opt"><strong><code>+</code></strong><span class="alt"></span><strong><code>-</code></strong></span><span class="stx">digits</span><sub><code>+</code></sub>
<ul>
<li><span class="stx">digits</span> ⇒ <code>0</code>…<code>9</code></li>
</ul></li>
<li><strong>Fixed point notation</strong>: <span class="opt"><strong><code>+</code></strong><span class="alt"></span><strong><code>-</code></strong></span><span class="stx">digits</span><sub>*</sub><strong><code>.</code></strong><span class="stx">digits</span><sub>*</sub>
<ul>
<li>At least one <span class="stx">digit</span> on left <em>or</em> right of decimal point.</li>
</ul></li>
</ul>
</div>
<p>Note that ‘<span class="stx">digits</span><sub>*</sub>’ means <em>zero or more digits</em>, and ‘<span class="stx">digits</span><sub>+</sub>’ mean <em>one or more digits</em>.</p>
<h6 id="example-numeric-literals-and-their-types-in-a-python-shell"><em>Example numeric literals and their types in a Python shell</em></h6>
<div class="ws cmdline">
<div class="line-block"><sup>&gt;</sup> type(123)<br>
<sup>&gt;</sup> type(123.)<br>
<sup>&gt;</sup> type(123.456)<br>
<sup>&gt;</sup> type(1.23456e2)<br>
<sup>&gt;</sup> type(0xFE)<br>
<sup>&gt;</sup> type(0b1010101)</div>
</div>
<p>If you wanted similar results in a <em>script</em>, we would show it like this:</p>
<h6 id="example-numeric-literals-and-their-types-as-a-python-snippet"><em>Example numeric literals and their types as a Python snippet</em></h6>
<div class="sourceCode" id="cb19"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb19-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">type</span>(<span class="dv">123</span>))              <span class="co">#←decimal int</span></span>
<span id="cb19-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">type</span>(<span class="fl">123.</span>))             <span class="co">#←fixed point float</span></span>
<span id="cb19-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">type</span>(<span class="fl">123.456</span>))          <span class="co">#←fixed point float</span></span>
<span id="cb19-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb19-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">type</span>(<span class="fl">1.23456e2</span>))        <span class="co">#←fixed point exponential</span></span>
<span id="cb19-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb19-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">type</span>(<span class="bn">0xFE</span>))             <span class="co">#←hexadecimal int</span></span>
<span id="cb19-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">type</span>(<span class="bn">0b1010101</span>))        <span class="co">#←binary int</span></span></code></pre></div>
<p>The <strong><code>int</code></strong> and <strong><code>float</code></strong> types support normal arithmetic operators (<strong><code>*</code></strong>, <strong><code>/</code></strong>, <strong><code>//</code></strong>, <strong><code>+</code></strong>, <strong><code>-</code></strong> the modulus/remainder operator: <strong><code>%</code></strong>), where <strong><code>/</code></strong> is always <em>floating point division</em>, and <strong><code>//</code></strong> always performs <em>integer division</em> (truncation) ← big change from Python2.</p>
<p>Both types also supports the <em>exponentiation</em> or ‘to the power’ operator: <span class="stx">expr</span><strong><code>**</code></strong><span class="stx">exponent</span></p>
<p>The <strong><code>int</code></strong> type uses processor 64-bit integer types until the results go out of range, in which case it switches over to an arbitrary precision integer type transparently.</p>
<h3 id="string-literals">String Literals</h3>
<p><a href="https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals" title="Python Docs — Lexical Analysis # String Literals">String literals</a> are enclosed in either paired single quotes, or paired double quotes, and have <a href="https://docs.python.org/3/library/stdtypes.html#str" title="Python Docs — Built-in Functions # str()">type <code>str</code></a>. The single and double quote characters here are functionally equivalent (unlike your typical <span class="sc">POSIX</span> shell, where single-quoted strings ignore escape characters or variable <a href="https://en.m.wikipedia.org/wiki/String_interpolation" title="Wikipedia — String Interpolation">interpolation</a>, but double-quoted strings honour escape sequences, and allow interpolation). Strings are by default <em>encoded</em> in <a href="https://en.m.wikipedia.org/wiki/UTF-8" title="Wikipedia — UTF-8"><span class="sc">UTF-8</span></a> (<a href="https://en.m.wikipedia.org/wiki/Unicode" title="Wikipedia — Unicode">Unicode</a>).</p>
<p>Python has no type to represent a single character, so a string containing one character <em>is</em> ef­fec­tive­ly a character. Literal strings can represent a sequence of <a href="https://docs.python.org/3/library/stdtypes.html#bytes" title="Python Docs — Built-in Functions # bytes()"><code>bytes</code></a>, by prefixing the literal with <code>b</code> or <code>B</code>. This is called a ‘byte string’, since every character is exactly one byte long, while in <span class="sc">UTF-8</span> encoding, a character can be one to 4 bytes long (variable width encoding).</p>
<h4 id="multi-line-strings">Multi-Line Strings</h4>
<p>String literals can be enclosed in <em>triple quotes</em>, in which case they may contain em­bed­ded new­lines. Prac­ti­cal­ly, this means such string literals can span several lines in your editor. You can use either single quotes or double quotes, for this purpose. Multi-line strings are also used as do­cu­men­ta­tion, and are in <em>that</em> context, are ‘<a href="https://www.python.org/dev/peps/pep-0257/" title="PEP-257 — Docstring Conventions">docstrings</a>’. Another ‘Python-specific’ term, although the concept is not unique to Python.</p>
<p>Adjacent literal strings that are separated by (only) whitespace, including newlines, are im­pli­cit­ly con­ca­te­nat­ed, and will practically form one longer string.</p>
<h6 id="implicit-string-concatenation-spanning-multiple-lines"><em>Implicit string concatenation spanning multiple lines</em></h6>
<div class="sourceCode" id="cb20"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb20-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span> (<span class="st">"this will "</span></span>
<span id="cb20-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb20-2" aria-hidden="true" tabindex="-1"></a>       <span class="st">"print as "</span></span>
<span id="cb20-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb20-3" aria-hidden="true" tabindex="-1"></a>       <span class="st">"one long line"</span>)</span></code></pre></div>
<p>This particular example works because Python does not consider end-of-line a state­ment ter­mi­nat­or when it appears between paired delimiters like parentheses, square brackets, and curly braces. The following will accordingly <em>not</em> work:</p>
<h6 id="error-no-parentheses-or-other-brackets"><em>Error: no parentheses or other brackets</em></h6>
<div class="sourceCode" id="cb21"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb21-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb21-1" aria-hidden="true" tabindex="-1"></a>result <span class="op">=</span> <span class="st">"this will"</span></span>
<span id="cb21-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb21-2" aria-hidden="true" tabindex="-1"></a>   <span class="co">"cause a syntax"</span></span>
<span id="cb21-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb21-3" aria-hidden="true" tabindex="-1"></a>   <span class="co">"error!"</span></span></code></pre></div>
<p>Python will complain about ‘inconsistent indentation’, since it will see the above three lines, as three separate statements.</p>
<p>Take note, that the following is not a syntax error, simply because a statement can consist of <em>any</em> single expression, even ‘useless’ expressions, but the <code>result</code> name, will only refer to <code>"this will"</code>:</p>
<h6 id="not-useful-code-but-still-legal-no-syntax-error"><em>Not useful code, but still legal (no syntax error)</em></h6>
<div class="sourceCode" id="cb22"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb22-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb22-1" aria-hidden="true" tabindex="-1"></a>result <span class="op">=</span> <span class="st">"this will"</span>                  <span class="co">#←`result` ⇒ `"this will"` </span></span>
<span id="cb22-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="co">"not cause a"</span>                          <span class="co">#←‘useless’, but legal expression.</span></span>
<span id="cb22-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="co">"syntax error"</span>                         <span class="co">#←ditto.</span></span></code></pre></div>
<p>To solve the first problem and use implicit literal string concatenation <em>across</em> multiple lines, simply enclose it in parentheses:</p>
<h6 id="ok-parentheses-around-implicit-literal-string-concatenation"><em>OK: parentheses around implicit literal string concatenation</em></h6>
<div class="sourceCode" id="cb23"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb23-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb23-1" aria-hidden="true" tabindex="-1"></a>result <span class="op">=</span> (</span>
<span id="cb23-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb23-2" aria-hidden="true" tabindex="-1"></a>   <span class="st">"this will NOT"</span></span>
<span id="cb23-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb23-3" aria-hidden="true" tabindex="-1"></a>   <span class="st">"cause a syntax"</span></span>
<span id="cb23-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb23-4" aria-hidden="true" tabindex="-1"></a>   <span class="st">"error!"</span></span>
<span id="cb23-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb23-5" aria-hidden="true" tabindex="-1"></a>   )</span></code></pre></div>
<p>Remember, parentheses themselves do not create a <code>tuple</code>… in other words, <code>(11)</code> is <em>not</em> a tuple, but <code>(11,)</code> is — we just used the parentheses above, so that Python would allow us to continue the statement across several lines. If we separated the string literals with commas, <strong>then</strong> it would be a <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#tuples">tuple</a>, and we are not talking about implicit literal string concatenation anymore.</p>
<h4 id="triple-quoted-strings">Triple-Quoted Strings</h4>
<p>Strings can be delimited with three single quotes, or three double quotes (matched). In this case, the closing delimiter does not have to be on the same line as the opening delimiter. This is another way of saying the string can span across arbitrary lines; in this case, new line (linefeed) characters are inserted at each line break.</p>
<h6 id="triple-quoted-literal-string-example"><em>Triple-quoted literal string example</em></h6>
<div class="sourceCode" id="cb24"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb24-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb24-1" aria-hidden="true" tabindex="-1"></a>result <span class="op">=</span> <span class="st">'''This is a very</span></span>
<span id="cb24-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="st">long string that</span></span>
<span id="cb24-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb24-3" aria-hidden="true" tabindex="-1"></a><span class="st">spans many lines'''</span></span></code></pre></div>
<p>The above statement associates the <code>result</code> name, with the following string representation:</p>
<p><span class="tab1"></span><code>'This is a very\nlong string that\nspans many lines'</code></p>
<p>For some situations, the triple-quoted strings are simply more readable. They also support <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#escape-sequences">escaping</a>, and can be a prefixed with <strong><code>r</code></strong><span class="alt"></span><strong><code>R</code></strong> (<a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#raw-strings">raw string</a> that prevents escaping).</p>
<p>If you like a ‘prettier’ application of triple-quoted string literals, the following is indeed more readable, but not that efficient:</p>
<h6 id="triple-quoted-literal-string-example-with-stripped-newlines"><em>Triple-quoted literal string example with stripped newlines</em></h6>
<div class="sourceCode" id="cb25"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb25-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb25-1" aria-hidden="true" tabindex="-1"></a>result <span class="op">=</span> <span class="st">'''</span></span>
<span id="cb25-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb25-2" aria-hidden="true" tabindex="-1"></a><span class="st">This is a very</span></span>
<span id="cb25-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb25-3" aria-hidden="true" tabindex="-1"></a><span class="st">long string that</span></span>
<span id="cb25-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb25-4" aria-hidden="true" tabindex="-1"></a><span class="st">spans many lines</span></span>
<span id="cb25-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb25-5" aria-hidden="true" tabindex="-1"></a><span class="st">'''</span>.strip(<span class="st">'</span><span class="ch">\n</span><span class="st">'</span>)</span></code></pre></div>
<p>Not recommended, simply from a performance perspective, but you might see it now and again in example code, simply because it is easier to ‘see’ what the actual string contents look like.</p>
<h4 id="escape-sequences">Escape Sequences</h4>
<p>An escape sequence, starting with a backslash (<code>\</code>), may appear in string literals — regardless of which quote character (or which triple-quote characters) are used. This can be used to represent unprintable characters, or <a href="https://en.m.wikipedia.org/wiki/Unicode" title="Wikipedia — Unicode">Unicode</a> characters by number. To get a single back­slash in­to memory, two backslashes must appear together: <code>"C:\\Path\\file.txt"</code>.</p>
<p>The predefined escape sequences mirror that of C (<code>\t</code>, <code>\n</code>, <code>\xFF</code>, <code>\777</code>, etc.), but Python also allows: <code>"\N{</code><span class="stx">unicode-char­ac­ter-name</span><code>}"</code>, or <code>\uFFFF</code> and <code>\UFFFFFFFF</code> for Unicode hexadecimal <a href="https://en.m.wikipedia.org/wiki/Code_point" title="Wikipedia — Code Point">code points</a>. The <code>\u</code> must be followed by exactly 4 hex digits, while the <code>\U</code> must be followed by exactly 8 hex digits; upper or lower case values for <code>A</code>…<code>F</code> are legal.</p>
<h4 id="raw-strings">Raw Strings</h4>
<p>Escape sequences are ignored in a ‘raw string’, indicated when the string literal is prefixed with <code>r</code> or <code>R</code>. This means that a path, as shown previously, can instead be written as: <code>r"C:\Path\file.txt"</code>. This can also be applied to <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#triple-quoted-strings">triple-quoted-string</a> literals.</p>
<h4 id="formatted-string-literal">Formatted String Literal</h4>
<p>From Python 3.6, an ‘<code>f</code>’ or ‘<code>F</code>’ may prefix a string literal. This is a <em>formatted string literal</em> (or <em>f-string</em>), which may contain curly-brace delimited placeholders, inside which any Python ex­pre­ssion may appear. The whole placeholder sequence is replaced with the result of the expression, converted to a string.</p>
<p>Some formatting is possible by suffixing the expression with a colon (<code>:</code>), fol­low­ed by for­mat­ting char­ac­ters. However, although the formatting characters are the same as used by <a href="https://docs.python.org/3/library/stdtypes.html#str.format" title="Python Docs — str.format()"><code>str.format()</code></a> (which leads to <a href="https://docs.python.org/3/library/string.html#formatstrings" title="Python Docs — string # Format String Syntax">Format String Syntax</a>), the results are not the same. To actually represent curly braces instead of them be­ing treat­ed as place­hold­er characters, use two in succession.</p>
<h6 id="example-simple-formatted-strings-f-strings-and-alternatives"><em>Example: simple formatted strings (“f-strings”) and alternatives</em></h6>
<div class="sourceCode" id="cb26"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb26-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb26-1" aria-hidden="true" tabindex="-1"></a>uname <span class="op">=</span> <span class="st">'Michael'</span></span>
<span id="cb26-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="ss">f'User name: </span><span class="sc">{</span>uname<span class="sc">}</span><span class="ss">.'</span>                <span class="co">#←result is 'User name: Michael.' (in REPL)</span></span>
<span id="cb26-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f'User name: </span><span class="sc">{</span>uname<span class="sc">}</span><span class="ss">.'</span>)         <span class="co">#←result is 'User name: Michael.' (in script)</span></span>
<span id="cb26-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb26-4" aria-hidden="true" tabindex="-1"></a>text <span class="op">=</span> <span class="ss">f'User: </span><span class="sc">{</span>uname<span class="sc">}</span><span class="ss">.'</span>              <span class="co">#←associated result with name `text`.</span></span>
<span id="cb26-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb26-5" aria-hidden="true" tabindex="-1"></a>text <span class="op">=</span> <span class="st">'User: </span><span class="sc">{0}</span><span class="st">.'</span>.<span class="bu">format</span>(uname)     <span class="co">#←alternative formatting (pre-3.6.x)</span></span>
<span id="cb26-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb26-6" aria-hidden="true" tabindex="-1"></a>text <span class="op">=</span> <span class="st">'User: </span><span class="sc">{X}</span><span class="st">.'</span>.<span class="bu">format</span>(X<span class="op">=</span>uname)   <span class="co">#←keyword argument instead of offset (1)</span></span>
<span id="cb26-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb26-7" aria-hidden="true" tabindex="-1"></a>text <span class="op">=</span> <span class="st">'User: </span><span class="sc">%s</span><span class="st">.'</span> <span class="op">%</span> (uname)          <span class="co">#←much older alternative (python 2.x)</span></span></code></pre></div>
<p><code>(1)</code> Notice that <code>X</code> above, can be any name.</p>
<p>The <a href="https://docs.python.org/3/library/functions.html#ord" title="Python Docs — Functions # ord()"><code>ord</code> function</a> can be used to get the <em>ordinal value</em> of the first character in a string (a Unicode <a href="https://en.m.wikipedia.org/wiki/Code_point" title="Wikipedia — Code Point">code point</a>). To obtain a character representation from its Unicode value, use the <a href="https://docs.python.org/3/library/functions.html#chr" title="Python Docs — Built-in Functions # chr()"><code>chr</code> function</a>.</p>
<p>For formatted string literals, any expression may appear between the curly brace delimiters. This, for example, is perfectly legal:</p>
<h6 id="arbitrary-expression-in-placeholder-of-a-formatted-string-literal"><em>Arbitrary expression in placeholder of a formatted string literal</em></h6>
<div class="sourceCode" id="cb27"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb27-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb27-1" aria-hidden="true" tabindex="-1"></a>uname <span class="op">=</span> <span class="st">'Armand'</span></span>
<span id="cb27-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb27-2" aria-hidden="true" tabindex="-1"></a>text <span class="op">=</span> <span class="ss">f'User: </span><span class="sc">{</span>(uname <span class="op">+</span> <span class="st">" "</span>) <span class="op">*</span> <span class="dv">3</span><span class="sc">}</span><span class="ss">'</span></span>
<span id="cb27-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb27-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(text)                            <span class="co">#⇒User: Armand Armand Armand</span></span></code></pre></div>
<p>Other languages uses the term “<a href="https://en.m.wikipedia.org/wiki/String_interpolation" title="Wikipedia — String interpolation">string interpolation</a>” for the same concept, as a matter of interest, so it is actually embarrassing that Python took so long to implement it.</p>
<h2 id="expressions">Expressions</h2>
<p>Every value has a <span class="stx">type</span>. Any value is also an <span class="stx">expr</span>ession. The results of operators and function calls are <span class="stx">expr</span>essions. A single expression on a line, is an <em>expression statement</em>; its result is discarded.</p>
<p>Expressions can be simple, like a single variable or literal; or it can be <em>compound</em>: contain sub-expressions separated by <em>operators</em>. Note that assignment (<strong><code>=</code></strong>) is a <em>statement</em> that creates new names, or reassigns the value of existing names.</p>
<h3 id="arithmetic-expressions">Arithmetic Expressions</h3>
<p>Python supports the standard arithmetic operators on <code>int</code>, <code>float</code>, <code>Decimal</code>, <code>Complex</code> and other numeric type. In addition, is has an exponent (to the power) operator (<code>**</code>), and a modulus or <em>remainder</em> operator (<code>%</code>). Each operator has a <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" title="Python Docs — Expressions # Operator Precedence"><strong>precedence</strong></a> level.</p>
<h2 id="writing-output">Writing Output</h2>
<p>The primary output function is <a href="https://docs.python.org/3/library/functions.html#print" title="Python Docs — Built-in Functions # print"><strong><code>print()</code></strong></a>, which is a built-in function. It does not perform any formatting, except for converting all arguments to strings (<strong><code>str</code></strong>). It is documented as follows:</p>
<figure>
<img src="./Course Notes 2020-12-07_files/py-print-func-web.svg" class="shade" data-padding="2rem,0,2rem" style="width:100.0%" alt="figure: Print Function Syntax"><figcaption aria-hidden="true">figure: <strong><em>Print Function Syntax</em></strong></figcaption>
</figure>
<p>In this case, ‘<strong><code>*objects</code></strong>’  means that the caller can pass an arbitrary number of comma separated arguments. Some documentation will indicate this effect with: ‘<code>object,...</code>’, but the above is more formal and the actual Python syntax used when it was defined.</p>
<p>The <code>sep</code>, <code>end</code>, <code>file</code> and <code>flush</code> items are <em>parameters</em> with <em>default values/arguments</em>. The only way to change a default value, is to use a specific syntax called <a href="https://en.m.wikipedia.org/wiki/Named_parameter" title="Wikipedia — Named parameter"><strong>keyword arguments</strong></a>. Keyword arguments must come after the leading <em>positional arguments</em>. They have the form: ‘<span class="stx">arg-name</span><strong><code>=</code></strong><span class="stx">argument</span>’. For example, to prevent <code>print</code> from adding a newline after the last argument printed, we must change the argument of the <code>end</code> parameter.</p>
<h6 id="prevent-newline-after-last-object-printed"><em>Prevent newline after last object printed</em></h6>
<div class="sourceCode" id="cb28"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb28-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"First text"</span>, end<span class="op">=</span><span class="st">""</span>)   <span class="co">#←set `end` to empty string.</span></span>
<span id="cb28-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb28-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">" more text"</span>, end<span class="op">=</span><span class="st">" "</span>)  <span class="co">#←set `end` to a space.</span></span>
<span id="cb28-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb28-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"last text"</span>)            <span class="co">#←use default for `end` (`\n`).</span></span>
<span id="cb28-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb28-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"On the next line"</span>)</span></code></pre></div>
<pre class="output"><code>First text more text last text
On the next line</code></pre>
<p>The <code>sep</code> parameter is used as a <em>separator</em> string to print between positional arguments passed. Consider this example and its output when executed:</p>
<h6 id="control-print-separator-between-positional-arguments"><em>Control print separator between positional arguments</em></h6>
<div class="sourceCode" id="cb30"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb30-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"ONE"</span>, <span class="st">"TWO"</span>, <span class="st">"THREE"</span>, <span class="st">"FOUR"</span>)</span>
<span id="cb30-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb30-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"ONE"</span>, <span class="st">"TWO"</span>, <span class="st">"THREE"</span>, <span class="st">"FOUR"</span>, sep<span class="op">=</span><span class="st">", "</span>)</span>
<span id="cb30-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb30-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"ONE"</span>, <span class="st">"TWO"</span>, <span class="st">"THREE"</span>, <span class="st">"FOUR"</span>, sep<span class="op">=</span><span class="st">", "</span>, end<span class="op">=</span><span class="st">".</span><span class="ch">\n</span><span class="st">"</span>)</span>
<span id="cb30-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb30-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"ONE"</span>, <span class="st">"TWO"</span>, <span class="st">"THREE"</span>, <span class="st">"FOUR"</span>, end<span class="op">=</span><span class="st">"!!</span><span class="ch">\n</span><span class="st">"</span>, sep<span class="op">=</span><span class="st">"; "</span>)</span></code></pre></div>
<pre class="output"><code>ONE TWO THREE FOUR
ONE, TWO, THREE, FOUR
ONE, TWO, THREE, FOUR.
ONE; TWO; THREE; FOUR!!</code></pre>
<p>The order of keyword arguments are not significant… as long as they appear <em>after</em> the positional arguments.</p>
<h3 id="standard-io-redirection">Standard IO Redirection</h3>
<p>By default then, <code>print</code> writes to <em>standard output</em> (file descriptor <code>1</code> in an OS shell). We can write to the <em>standard error</em> (file descriptor <code>2</code> in an OS shell) device/file by providing the keyword argument: ‘<code>file=sys.stderr</code>’. Good convention dictates that that we write error message to standard error.</p>
<h5 id="stdio.py-standard-output-and-standard-error-output-example"><strong><code>stdio.py</code></strong> — <em>Standard output, and standard error output example</em></h5>
<div class="sourceCode" id="cb32"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb32-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb32-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb32-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb32-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb32-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb32-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb32-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"1) Written to standard output."</span>)</span>
<span id="cb32-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb32-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"2) Written to standard output too."</span>, <span class="bu">file</span><span class="op">=</span>sys.stdout)</span>
<span id="cb32-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb32-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"3) Written to standard error."</span>, <span class="bu">file</span><span class="op">=</span>sys.stderr)</span></code></pre></div>
<p>If you run this script, your shell will by default write <em>everything</em> to your terminal or console. However all operating shells supports <em>redirection</em>.</p>
<h6 id="pwsh-redirect-standard-output-to-a-file"><em>pwsh — Redirect standard output to a file</em></h6>
<div class="ws cmdline">
<div class="line-block"><sup>&gt;</sup> <strong>python</strong> stdio.py &gt; output.txt</div>
</div>
<p>The ‘<code>&gt;</code>’ is a <em>special character</em> for shells… all output from the program before it, will be <em>redirected</em> to a file; which in this case, is arbitrarily called <code>output.txt</code>. This is shorthand for ‘<code>1&gt;</code>’. Standard error output will still appear on your screen.</p>
<p>To redirect standard error output, you have to use: ‘<code>2&gt;</code>’.</p>
<h5 id="pwsh-redirect-standard-error-output-to-a-file"><em>pwsh — Redirect standard error output to a file</em></h5>
<div class="ws cmdline">
<div class="line-block"><sup>&gt;</sup> <strong>python</strong> stdio.py 2&gt; errors.txt</div>
</div>
<p>You can use both <code>&gt;</code> and <code>2&gt;</code> in the same command line, if you like.</p>
<h5 id="pwsh-redirect-both-standard-output-and-standard-error-output"><em>pwsh — Redirect both standard output and standard error output</em></h5>
<div class="ws cmdline">
<div class="line-block"><sup>&gt;</sup> <strong>python</strong> stdio.py 1&gt; output.txt 2&gt; errors.txt</div>
</div>
<p>If you want both standard output and standard error output to be redirected to the <em>same</em> file, another syntax is required:</p>
<h5 id="pwsh-redirect-both-outputs-to-a-single-file"><em>pwsh — Redirect both outputs to a single file</em></h5>
<div class="ws cmdline">
<div class="line-block"><sup>&gt;</sup> <strong>python</strong> stdio.py &gt; alloutputs.txt 2&gt;&amp;1<br>
<sup>&gt;</sup> <strong>python</strong> stdio.py 2&gt;&amp;1 &gt; alloutputs.txt</div>
</div>
<p>In PowerShell, the position of ‘<code>2&gt;&amp;1</code>’ is not particularly important. In POSIX shells however, the second version will not work, but all other variations above are supported.</p>
<p>An additional feature of shells, is that they support output redirection that <em>appending</em> instead of overwriting the destination. These are the ‘<code>&gt;&gt;</code> <span class="alt"></span> <code>1&gt;&gt;</code>’ (for standard output) and ‘<code>2&gt;&gt;</code>’ (for standard error) special ‘operators’.</p>
<h3 id="piping-standard-output">Piping Standard Output</h3>
<p>Another special shell character, is the ‘pipe’ or vertical bar (<code>|</code>). This can separate two different programs on the command line. Any standard output of the left hand program, is send or <em>piped</em> to the standard input of the right hand program.</p>
<p>If necessary, the output of the right hand program program can be piped to yet another program. Or, the output can be redirected as shown before.</p>
<h2 id="standard-types">Standard Types</h2>
<p>Python has a number of <a href="https://docs.python.org/3/library/stdtypes.html" title="Python Docs — Built-in Types">standard types</a>. Every value, including literals, has a type. Names do not have types. If you are unsure about the type of an expression, you can use the <a href="https://docs.python.org/3/library/functions.html#type" title="Python Docs — Built-in Functions — type()"><code>type</code> function</a> to determine its type and the result of that with the <a href="https://docs.python.org/3/reference/expressions.html#is" title="Python Docs — Expressions # Identity comparisons"><code>is</code> operator</a>.</p>
<h6 id="the-is-operator-testing-type-equivalence"><em>The ‘is’ operator testing type equivalence</em></h6>
<div class="sourceCode" id="cb33"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb33-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="bu">type</span>(<span class="dv">5</span>) <span class="kw">is</span> <span class="bu">int</span>                         <span class="co">#←evaluates to True</span></span></code></pre></div>
<p>All types in Python, are classes. This means all values are objects, and have <em>attributes</em> in the form of a dictionary of names. These names can be associated with <em>data</em> or <em>functions</em>, which are in this case, called <em>methods</em>.</p>
<p>Every type, can be ‘called’, i.e., they act like functions (<em>initialisers</em> or <em>constructors</em>) to create and initialise new objects. They can also be used as a result, to <em>convert</em> from any acceptable argument to the type being ‘called’. Examples:</p>
<h6 id="convert-floats-and-strings-to-integer"><em>Convert floats and strings to integer</em></h6>
<div class="sourceCode" id="cb34"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb34-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb34-1" aria-hidden="true" tabindex="-1"></a>number <span class="op">=</span> <span class="bu">int</span>(<span class="fl">12.34</span>)                     <span class="co">#←convert `float` to `int`.</span></span>
<span id="cb34-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb34-2" aria-hidden="true" tabindex="-1"></a>number <span class="op">=</span> <span class="bu">int</span>(<span class="st">"123"</span>)                     <span class="co">#←convert `str`ing to `int`.</span></span></code></pre></div>
<p>Other common types include: <strong><code>float</code></strong>, <strong><code>str</code></strong>, <strong><code>bool</code></strong>, <strong><code>list</code></strong> and <strong><code>tuple</code></strong>.</p>
<h3 id="integral-integrity">Integral Integrity</h3>
<p>The <a href="https://docs.python.org/3/library/functions.html#int" title="Python Docs — Built-in Functions # int()"><code>int</code> type</a> is very common. It can be used as a function to convert <a href="https://docs.python.org/3/library/stdtypes.html#str" title="Python Docs — Built-in Functions # str()"><code>str</code>ings</a> to <code>int</code>, as long as the string contains a sequence of digit characters as specified in the <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#numeric-literals">Numeric Literals</a> section above. It can also be used to <em>truncate</em> <a href="https://docs.python.org/3/library/functions.html#float" title="Python Docs — Built-in Functions # float()"><code>float</code>ing point</a> values. Alternatively, use the <a href="https://docs.python.org/3/library/math.html#math.trunc" title="Python Docs — Standard Library - math.trunc()"><code>trunc</code> function</a> from the <a href="https://docs.python.org/3/library/math.html#module-math" title="Python Docs — Standard Library - math"><code>math</code> module</a>. If truncation is too limiting, use <a href="https://docs.python.org/3/library/math.html#math.floor" title="Python Docs — Standard Library - math.floor()"><code>floor</code></a>, <a href="https://docs.python.org/3/library/math.html#math.ceil" title="Python Docs — Standard Library - math.ceil()"><code>ceil</code></a>, or the global <a href="https://docs.python.org/3/library/functions.html#round" title="Python Docs — Python Built-in Functions — round()"><code>round</code> function</a>.</p>
<p>Integer types are represented as 64-bit values in the computer, but when values exceed that range, Python will automatically switch to <em>arbitrary precision</em> integers. This means Python can handle integer values of any size, which is useful for numerical work.</p>
<h3 id="floating-point">Floating Point</h3>
<p>The <a href="https://docs.python.org/3/library/functions.html#float" title="Python Docs — Built-in Functions # float()"><code>float</code> type</a> is equivalent to <code>double</code> in many languages (a 64-bit <a href="https://en.m.wikipedia.org/wiki/IEEE_754" title="Wikipedia — IEEE 754 Standard for Floating Point Arithmetic">IEEE754</a> value). It can also be used as a function to “construct” <code>float</code>s, most commonly to convert <code>str</code>ings (user input) to a val­ue of type <code>float</code>. The syntax of the characters in the string must follow the Python conventions, as described in <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#numeric-literals">Numeric Literals</a>.</p>
<div class="admonition warn">
<p><strong>WARNING</strong> — <strong><em>Floating Point Comparisons</em></strong></p>
<p>In case you are unaware, never compare floating point results with the equality operator; rather subtract them, and check if the absolute difference is small enough to sa­tis­fy your program's precision requirements. This is due to (very small) round-off errors that oc­cur due to the representation of floating point bits in a computer. If you want higher pre­ci­sion (at the expense of execution speed), use the <a href="https://docs.python.org/3/library/decimal.html#module-decimal" title="Python Docs — Standard Library — decimal"><code>decimal</code> module</a> — it is useful to represent currency, for example.</p>
</div>
<p>Floating point values are sufficient for physical data and measurements. They are not well suited for currency work (use the <a href="https://docs.python.org/3/library/decimal.html#module-decimal" title="Python Docs — Standard Library — decimal"><code>decimal</code> module</a>). For the connoisseur, financial wizards, and engineering types, there is always your trusty <a href="https://docs.python.org/3/library/functions.html#complex" title="Python Docs — Built-in Functions # complex()"><code>complex</code> type</a>.</p>
<h1 id="collections-sequences">Collections / Sequences</h1>
<p>As standard, Python provides mutable and immutable collections of values. Lists, tuples and dic­tio­na­ries are built-in, while the Python standard library provides several extra collections for more specialised uses.</p>
<p>There are a number of global <a href="https://docs.python.org/3/library/functions.html" title="Python Docs — Built-in Functions">built-in functions</a>, statements and operators that can be used with collections. We mention a few below:</p>
<ul>
<li><p>The <a href="https://docs.python.org/3/library/functions.html#len" title="Python Docs — Built-in Functions - len()"><code>len</code> function</a> works on any collection, and will return the number of items in the collection.</p></li>
<li><p>The <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-del_stmt" title="Python Docs — Simple Statements - del Statement"><code>del</code> statement</a> (not a function) can delete items from any collection, and it can also delete any <strong><em>name</em></strong>.</p></li>
<li><p>The <a href="https://docs.python.org/3/reference/expressions.html#is" title="Python Docs — Expressions - in operator"><code>in</code> operator</a> (<a href="https://docs.python.org/3/reference/expressions.html#membership-test-operations" title="Python Docs — Expressions - Membership Test Operations">membership test</a> operator) can test if a value is present in any col­lec­tion, including <code>str</code>ings. You can also use ‘<code>not in</code>’ for a negative test.</p></li>
<li><p>Where appropriate, the <a href="https://docs.python.org/3/library/functions.html#sorted" title="Python Docs — Built-in Functions / sorted()"><code>sorted</code> function</a> can be used to sort collections (returns a copy).</p></li>
<li><p>The <a href="https://docs.python.org/3/library/functions.html#reversed" title="Python Docs — Built-in Functions -reversed()"><code>reversed</code> func­tion</a> can reverse a collection (returns a copy).</p></li>
<li><p>Lists can be sorted in-place with the <code>list</code>'s <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" title="Python Docs — list.sort()"><code>sort</code> method</a>. To create a sorted <em>copy</em>, you can use the built-in <a href="https://docs.python.org/3/library/functions.html#sorted" title="Python Docs — Built-in Functions / sorted()"><code>sorted</code> function</a> mentioned above.</p></li>
</ul>
<div class="admonition note">
<p><strong>NOTE</strong> — <strong><em>Iterables</em></strong></p>
<p>All <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#sequences-collections">sequences / collection</a> in Python are <em>iterable</em> — items can be ‘visited’ or <em>referenced</em>, one-by-one in sequence. This includes <strong><code>str</code></strong>ings, <strong><code>list</code></strong>s, <strong><code>tuple</code></strong>s and <strong><code>range</code></strong>s.</p>
<p>Documentation for many functions require an <span class="stx">iterable</span>, so any of the above can be passed.</p>
</div>
<p>All sequences can be <em>concatenated</em> with the plus character (<strong><code>+</code></strong>), and <em>repeated</em> with the asterisk character (<strong><code>*</code></strong>). Both these overloaded operators returns copies of the result (they do not modify their operands).</p>
<h2 id="lists">Lists</h2>
<p>A <a href="https://docs.python.org/3/library/stdtypes.html#list" title="Python Docs — Standard Types — list">list</a> is the Pythonic equivalent of an array or vector in other languages. It can contain a mixture of different types of items (elements). For ef­fi­cient­ly work­ing with lists of <em>numeric</em> values, an option is the <a href="https://docs.python.org/3/library/array.html" title="Python Docs — Python Standard Library - array of Numeric Values"><code>array</code> class</a> in the Python <a href="https://docs.python.org/3/library/" title="Python Docs — Python Standard Library Index">Stan­dard Li­bra­ry</a>. And of course, there is always <a href="http://www.numpy.org/" title="NumPy Home">NumPy</a> for serious numeric work.</p>
<p>List literals are created with a comma-separated list of values between square brackets. Although the values are usually of the same type, this is not a requirement. Individual items are accessed by subscript. Subscripts (some call them <em>indexes</em>), start at <code>0</code>, which is why it is generally better to think of it as an <em>offset</em> value. You can use the <code>len()</code> method to determine the number of items. The highest subscript value is then: <code>len(</code><span class="stx">list</span><code>)-1</code>.</p>
<p>Lists are iterable, and frequently used with the <code>for</code> statement. Some <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" title="Python Docs — Python Tutorial - More on Lists">useful methods</a> applicable to lists are described in the official Python tutorial.</p>
<p>Lists are mutable:</p>
<ul>
<li><p>To change the value that an item references, assign a different value to the item at that subscript number.</p></li>
<li><p>Use the <code>append()</code> method to add an item to the list: <span class="stx">list</span><code>.append(</code><span class="stx">new-item</span><code>)</code>. You cannot create a new item by assigning a value to the next subscript. If you think of a <code>list</code> as a stack, <code>append()</code> effectively ‘pushes’ a new value on the stack.</p></li>
<li><p>The <code>pop()</code> method removes the last value from a <code>list</code>. It returns the value removed as its result. By pairing <code>append()</code> and <code>pop()</code>, you can treat lists as stacks when needed.</p></li>
<li><p>Use the <code>extend</code> method to add an <em>list</em> to the list: <span class="stx">list</span><code>.extend(</code><span class="stx">list</span><code>)</code>. You cannot create a new item by assigning a value to the next subscript.</p></li>
<li><p>The <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-del_stmt" title="Python Docs — Simple Statements - del Statement"><code>del</code> statement</a> can delete items from the list.</p></li>
<li><p>See <a href="https://docs.python.org/3/tutorial/datastructures.html#more-on-lists" title="Python Docs — More on Lists">More on Lists</a> for other methods like <code>copy</code>, <code>pop</code>, etc.</p></li>
</ul>
<p>The following simple example illustrates these points:</p>
<h6 id="list-operations"><em>List operations</em></h6>
<div class="sourceCode" id="cb35"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb35-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb35-1" aria-hidden="true" tabindex="-1"></a>listA <span class="op">=</span> [<span class="st">'a'</span>, <span class="st">'b'</span>, <span class="dv">23</span>, <span class="fl">19.65</span>, <span class="va">False</span>]</span>
<span id="cb35-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb35-2" aria-hidden="true" tabindex="-1"></a>listA[<span class="dv">2</span>] <span class="op">=</span> <span class="st">'c'</span>              <span class="co">#←item no longer references `23`.</span></span>
<span id="cb35-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb35-3" aria-hidden="true" tabindex="-1"></a>listA.append(<span class="dv">50</span>)            <span class="co">#←append item with value `50` to end of list.</span></span>
<span id="cb35-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb35-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">len</span>(listA))           <span class="co">#⇒6</span></span>
<span id="cb35-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb35-5" aria-hidden="true" tabindex="-1"></a><span class="kw">del</span> listA[<span class="dv">4</span>]                <span class="co">#←delete reference to `False`.</span></span>
<span id="cb35-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb35-6" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> listA:</span>
<span id="cb35-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb35-7" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(i, end<span class="op">=</span><span class="st">' '</span>)       <span class="co">#⇒'a' 'b' 'c' 19.65 50</span></span>
<span id="cb35-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb35-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb35-9" aria-hidden="true" tabindex="-1"></a>listB <span class="op">=</span> []                  <span class="co">#←empty list.</span></span>
<span id="cb35-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb35-10" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">100</span>,<span class="dv">95</span>,<span class="op">-</span><span class="dv">1</span>):</span>
<span id="cb35-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb35-11" aria-hidden="true" tabindex="-1"></a>  listB.append(i)           <span class="co">#⇒[100, 99, 98, 97, 96]</span></span></code></pre></div>
<p>Appropriate objects can be converted to a list by using the <a href="https://docs.python.org/3/library/functions.html#func-list" title="Python Docs - Standard Library - List constructor">‘<code>list(</code><span class="stx">iterable</span><code>)</code>’</a> function:</p>
<h6 id="converting-iterables-to-a-list"><em>Converting iterables to a list</em></h6>
<div class="sourceCode" id="cb36"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb36-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb36-1" aria-hidden="true" tabindex="-1"></a>listC <span class="op">=</span> <span class="bu">list</span>(<span class="bu">range</span>(<span class="dv">0</span>,<span class="dv">5</span>))</span>
<span id="cb36-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb36-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(listC)                <span class="co">#⇒[0, 1, 2, 3, 4]</span></span></code></pre></div>
<p>The built-in <a href="https://docs.python.org/3/library/functions.html#func-range" title="Python Docs — Built-in Functions — range()"><code>range</code> function</a> function is a <em>generator</em> function for efficiency, but in the short term, you can simply think of it as a function that produces a list (a <code>tuple</code> would be a better analogy really, which it actually does create in Python2), except that the result is not of <em>type</em> <code>tuple</code>, though it is convertible to a <code>list</code>, just like a <code>tuple</code>.</p>
<p>Since a <strong><code>str</code></strong>ing is iterable, you can ‘split’ a string into a list of individual characters. You can then manipulate the list of characters and ‘join’ them into a single <strong><code>str</code></strong>ing again with the <em>str</em><strong><code>.join()</code></strong> method:</p>
<h6 id="splitting-and-joining-a-string"><em>Splitting and joining a string</em></h6>
<div class="sourceCode" id="cb37"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb37-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb37-1" aria-hidden="true" tabindex="-1"></a>list_of_chars <span class="op">=</span> <span class="bu">list</span>(<span class="st">"ABCDE"</span>)</span>
<span id="cb37-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb37-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(list_of_chars)               <span class="co">#⇒['A', 'B', 'C', 'D', 'E']</span></span>
<span id="cb37-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb37-3" aria-hidden="true" tabindex="-1"></a><span class="kw">del</span> list_of_chars[<span class="dv">2</span>]</span>
<span id="cb37-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb37-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(list_of_chars)               <span class="co">#⇒['A', 'B', 'D', 'E']</span></span>
<span id="cb37-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb37-5" aria-hidden="true" tabindex="-1"></a>list_of_chars[<span class="dv">3</span>] <span class="op">=</span> <span class="st">'X'</span></span>
<span id="cb37-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb37-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(list_of_chars)               <span class="co">#⇒['A', 'B', 'D', 'X']</span></span>
<span id="cb37-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb37-7" aria-hidden="true" tabindex="-1"></a>list_of_chars.append(<span class="st">'Z'</span>)</span>
<span id="cb37-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb37-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(list_of_chars)               <span class="co">#⇒['A', 'B', 'D', 'X', 'Z']</span></span>
<span id="cb37-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb37-9" aria-hidden="true" tabindex="-1"></a>s1 <span class="op">=</span> <span class="st">''</span>.join(list_of_chars)</span>
<span id="cb37-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb37-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(s1)                          <span class="co">#⇒'ABDXZ'</span></span>
<span id="cb37-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb37-11" aria-hidden="true" tabindex="-1"></a>s2 <span class="op">=</span> <span class="st">'--'</span>.join(list_of_chars)</span>
<span id="cb37-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb37-12" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(s2)                          <span class="co">#⇒'A--B--D--X--Z'</span></span></code></pre></div>
<p>Note that when (and only when), you call a function that can handle an arbitrary number of arguments, like <strong><code>print</code></strong>, you can ‘explode’ or ‘expand’ a list argument with: ‘<strong><code>*</code></strong><span class="stx">list-arg</span>’. With this in mind, we could get the same output as the last output statement, using <code>s1</code> (which contains a single string, which is a <em>sequence</em>):</p>
<h6 id="unpacking-a-list-as-a-sequence-of-arguments"><em>Unpacking a list as a sequence of arguments</em></h6>
<div class="sourceCode" id="cb38"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb38-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb38-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="op">*</span>s1, sep<span class="op">=</span><span class="st">'--'</span>)               <span class="co">#⇒'A--B--D--X--Z'</span></span>
<span id="cb38-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb38-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="op">*</span>list_of_chars)              <span class="co">#⇒A B D X Z</span></span></code></pre></div>
<h3 id="slices">Slices</h3>
<p>Any sequential type like <code>list</code>, <code>str</code> and <code>tuple</code>, can be <em>sliced</em> — which means a <em>copy</em> of a generally smaller selection of items are obtained from a list… call it a “sub-list” if it helps. It does not have to be adjacent items — you could “extract” every second item, for example; or even extract a range in reverse; or ever third value in reverse; etc. Slices are both an <a href="https://docs.python.org/3/reference/expressions.html#slicings" title="Python Docs — Expressions - Slicings">expression syntax</a>, and a <a href="https://docs.python.org/3/library/functions.html?highlight=slice#slice" title="Python Docs — Built-in Functions — slice()">class <code>slice</code> function</a>.</p>
<h4 id="syntax-slice-syntax"><strong>Syntax</strong> — <strong><em>Slice Syntax</em></strong></h4>
<div class="stx">
<ul>
<li><span class="stx">list</span><strong><code>[</code></strong> <span class="opt"><span class="stx">start</span></span> <strong><code>:</code></strong> <span class="opt">&nbsp;<span class="opt"><span class="stx">end</span></span> <span class="opt"><strong><code>:</code></strong> <span class="stx">step</span></span>&nbsp;</span> <strong><code>]</code></strong>
<ul>
<li><span class="stx">list</span> ⇒ actually, any <em>iterable</em> <em>sequence</em>, including tuples and strings.</li>
<li><span class="stx">start</span> ⇒ offset of first item in slice; default: <code>0</code>.</li>
<li><span class="stx">end</span> ⇒ offset of <span class="stx">end</span><strong><code>-1</code></strong> item to include in slice; default: last item's offset + 1.</li>
<li><span class="stx">step</span> ⇒ steps to take, default = <code>1</code>; can be negative.</li>
</ul></li>
</ul>
</div>
<p>When the <span class="stx">list</span> object is a <strong><code>range()</code></strong>, the slice will produce an <em>new</em> range!</p>
<p>It is important to understand that any item in a list can be reached by two offsets: either a positive number, starting with <code>0</code>, or a negative number, which counts from the end of the list, where offset <code>-1</code> will represent the last item in any subscriptable collection. The slice operation does not care <em>how</em> you represent the item location by negative or positive offset, except that the <span class="stx">start</span> position is smaller or equal to the end position.</p>
<p>Also note, the a slice operation never produces an error; at worst, it will return an empty list for invalid ranges — even if they are out of bounds. The only time an error is produced, is during certain <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#slice-assignment">slice assignment</a> (when a slice appears on the left).</p>
<h4 id="slice-assignment">Slice Assignment</h4>
<p>What is even more significant, is that you can <strong><em>assign</em></strong> to a slice, which means you can effectively use it to…</p>
<h4 id="syntax-slice-assignment-abstractions"><strong>Syntax</strong> — <strong><em>Slice Assignment Abstractions</em></strong></h4>
<div class="stx">
<ul>
<li><strong><em>insert</em></strong> a list of any size before any position <span class="stx">n</span>: ‘<span class="stx">list</span><sub>1</sub><code>[</code><span class="stx">n</span><code>:</code><span class="stx">n</span><code>] =</code> <span class="stx">list</span><sub>2</sub>’;</li>
<li><strong><em>delete</em></strong> a slice by assigning an empty list: ‘<span class="stx">list</span><code>[</code><span class="stx">slice</span><code>] = []</code>’;</li>
<li><strong><em>replace</em></strong> a slice with an abitrary-sized list: ‘<span class="stx">list<sub>1</sub></span><code>[</code><span class="stx">slice</span><code>] =</code> <span class="stx">list<sub>2</sub></span>’.</li>
</ul>
</div>
<p>This allows for very concise and expressive code, compared to many other languages. And, although not shown in the common abstractions above, the slice on the left can have a <span class="stx">step</span>, but then the list on the right of the assignment, must have the same number of items.</p>
<div class="admonition note">
<p><strong>NOTE</strong> — <strong><em>Slice Idioms</em></strong></p>
<p>The versatility of slices leads to some common idioms involving slices.</p>
<p><strong>Copy a List</strong> — <span class="stx">list</span><strong><code>[::]</code></strong><br>
Normally, you can have two names referring to the same list, but with this idiom, you can assign a <em>copy</em> to another name.</p>
<p><strong>Reverse a List</strong> — <span class="stx">list</span><strong><code>[::-1]</code></strong><br>
The make a reverse <em>copy</em> of a list, use: <span class="stx">list</span><strong><code>[::-1]</code></strong></p>
</div>
<p>Since slices can be applied to any <em>iterable</em> sequence, this means <strong><code>str</code></strong>ings as well:</p>
<h6 id="slices-on-strings"><em>Slices on strings</em></h6>
<div class="sourceCode" id="cb39"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb39-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb39-1" aria-hidden="true" tabindex="-1"></a>upperascii <span class="op">=</span> <span class="st">''</span>.join([<span class="bu">chr</span>(c) <span class="cf">for</span> c <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">65</span>, <span class="dv">65</span><span class="op">+</span><span class="dv">26</span>)])</span>
<span id="cb39-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb39-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(upperascii[::<span class="op">-</span><span class="dv">1</span>])              <span class="co">#←reverse string.</span></span>
<span id="cb39-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb39-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(upperascii[::<span class="dv">2</span>])               <span class="co">#←every second character.</span></span>
<span id="cb39-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb39-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(upperascii[<span class="dv">12</span>:])               <span class="co">#←print from 13th character (`M`).</span></span></code></pre></div>
<p>For interest's sake, we could have used <strong><code>ascii_uppercase</code></strong> from the <a href="https://docs.python.org/3/library/string.html" title="Python Docs — string — Common string operations"><strong><code>string</code></strong> module</a>, instead of generating our own set. Then the first line could be replace with:</p>
<h6 id="using-the-string-module-for-list-of-uppercase-letters"><em>Using the string module for list of uppercase letters</em></h6>
<div class="sourceCode" id="cb40"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb40-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> string <span class="im">import</span> ascii_uppercase <span class="im">as</span> upperascii</span></code></pre></div>
<p>You can also use the <strong><code>del</code></strong> statement to delete a slice from a list.</p>
<h6 id="deleting-slices-from-lists"><em>Deleting slices from lists</em></h6>
<div class="sourceCode" id="cb41"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb41-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb41-1" aria-hidden="true" tabindex="-1"></a>L <span class="op">=</span> <span class="bu">list</span>(<span class="bu">range</span>(<span class="dv">10</span>))                  <span class="co">#←L = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span>
<span id="cb41-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb41-2" aria-hidden="true" tabindex="-1"></a><span class="kw">del</span> L[::<span class="dv">2</span>]                           <span class="co">#←delete every second element.</span></span>
<span id="cb41-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb41-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(L)                             <span class="co">#⇒[1, 3, 5, 7, 9]</span></span>
<span id="cb41-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb41-4" aria-hidden="true" tabindex="-1"></a><span class="kw">del</span> L[<span class="dv">1</span>:<span class="dv">3</span>]                           <span class="co">#←delete 2nd to 3rd elements.</span></span>
<span id="cb41-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb41-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(L)                             <span class="co">#⇒[1, 7, 9]</span></span></code></pre></div>
<h2 id="tuples">Tuples</h2>
<p>A <a href="https://docs.python.org/3/library/stdtypes.html#tuple" title="Python Docs - Standard Types - Tuples">tuple</a> is like a list, except that once created, it is immutable. You cannot change the items or add or delete items. Provided these limitations are acceptable for your purpose, a tuple is more efficient than a list.</p>
<p>The syntax to create a tuple is almost identical to lists, but it uses parentheses instead of square brackets. The parentheses are actually optional (it is the comma-separated list that is required), except in the empty tuple case, or when they are needed to avoid syntactic ambiguity.</p>
<p>Like lists, you can iterate through the items in a tuple, and you can access individual items via a subscript.</p>
<h6 id="tuple-operations-and-iteration"><em>Tuple operations and iteration</em></h6>
<div class="sourceCode" id="cb42"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb42-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb42-1" aria-hidden="true" tabindex="-1"></a>tpl <span class="op">=</span> (<span class="st">'a'</span>, <span class="st">'b'</span>, <span class="dv">23</span>, <span class="fl">19.65</span>, <span class="va">False</span>)</span>
<span id="cb42-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb42-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">len</span>(tpl))               <span class="co">#⇒5</span></span>
<span id="cb42-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb42-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(tpl[<span class="dv">3</span>])                 <span class="co">#⇒19.65</span></span>
<span id="cb42-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb42-4" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> tpl:</span>
<span id="cb42-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb42-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(i)                  <span class="co">#⇒'a' 'b' 23 19.65 False</span></span></code></pre></div>
<p>Suitable objects can be converted to a tuple by using the <a href="https://docs.python.org/3/library/functions.html#func-tuple" title="Python Docs - Standard Library - Tuple constructor"><code>tuple(</code><span class="stx">iterable</span><code>)</code></a> function:</p>
<h6 id="converting-iterable-sequences-to-a-tuple"><em>Converting iterable sequences to a tuple</em></h6>
<div class="sourceCode" id="cb43"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb43-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb43-1" aria-hidden="true" tabindex="-1"></a>nums <span class="op">=</span> <span class="bu">tuple</span>(<span class="bu">range</span>(<span class="dv">0</span>,<span class="dv">5</span>))</span>
<span id="cb43-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb43-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(nums)                   <span class="co">#⇒(0, 1, 2, 3, 4)</span></span></code></pre></div>
<p>Tuples also support <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#slices">slicing</a>, except for slice assignment — tuples are immutable, if you recall.</p>
<h2 id="sorting-sequences">Sorting Sequences</h2>
<p>To create a sorted <em>copy</em> of some <span class="stx">list</span> , use the <a href="https://docs.python.org/3/library/functions.html#sorted" title="Python Docs — Built-in Functions / sorted()"><strong><code>sorted</code></strong> function</a> (built-in). It does not modify the list argument, but <em>returns</em> the sorted list. This function can sort any <span class="stx">iterable</span> sequence, including <strong><code>tuple</code></strong>s and <strong><code>str</code></strong>ings.</p>
<p>Optionally, a <em>keyword argument</em> called <strong><code>key</code></strong> can be passed after the <span class="stx">list</span> argument, which may refer to a function that will be called on each list item before ordering. This could also be a <a href="https://docs.python.org/3/reference/expressions.html#grammar-token-lambda-expr" title="Python Docs — Expressions / Lambda"><strong><code>lambda</code></strong> expression</a>. The <strong><code>key</code></strong> can be used to do a case-insensitive sort, or it can be used to select an item (key) on which to sort. See the <a href="https://wiki.python.org/moin/HowTo/Sorting" title="Python Wiki — Sorting Mini-HOW TO">Python Wiki</a> for some examples.</p>
<p>Alternatively, to sort a <span class="stx">list</span> without making a copy, you can simply use the <a href="https://docs.python.org/3/library/stdtypes.html#list.sort" title="Python Docs — list.sort()"><strong><code>sort</code></strong> method</a> of the <a href="https://docs.python.org/3/library/stdtypes.html#lists" title="Python Docs — Lists"><strong><code>list</code></strong> class</a>. This performs an <em>in-place</em> sort (no copy is made). Since <strong><code>tuple</code></strong> and <strong><code>str</code></strong> types are both immutable, they have no <strong><code>sort</code></strong> method.</p>
<h2 id="dictionaries">Dictionaries</h2>
<p>Python has 3 built-in sequence types that we have discussed: lists, tuples and ranges. In addition, it has a built-in mapping type: the <a href="https://docs.python.org/3/library/functions.html#func-dict" title="Python Docs — Standard Types — dict"><code>dict</code>ionary</a>. The dictionary object maps keys to values.</p>
<p>Dictionaries are created by placing a comma-separated list of key: value pairs within curly braces. Each key must be unique and it must be “hashable” i.e. it must have a value that does not change. It may be a numeric or string literal, but it may not be an expression. Values can be of any type.</p>
<p>Dictionaries are mutable:</p>
<ul>
<li>To access a value, use its key in square brackets (similar to a subscript).</li>
<li>To add a new key-value pair to the dictionary, just assign a value to a previously non-existent key:</li>
<li>To modify the value in a key-value pair, assign a new value to the key.</li>
<li>You cannot change the key: you will need to delete a key-value pair using the <code>del</code> statement, and add a new pair.</li>
</ul>
<p>Dictionaries are iterable. The various methods and functions that apply to iterables also apply to dictionaries. For example, the <code>len()</code> function returns the number of <em>pairs</em>. Note, however, that the sequence of pairs in the dictionary when extracted, is not necessarily the same as the sequence in which they were inserted — we say they are <em>unordered</em> (which has a different meaning to <em>unsorted</em>).</p>
<h6 id="dictionary-type-and-related-operations-example"><em>Dictionary type and related operations example</em></h6>
<div class="sourceCode" id="cb44"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb44-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb44-1" aria-hidden="true" tabindex="-1"></a>cartoons <span class="op">=</span> {<span class="st">'cat'</span> : <span class="st">'Tom'</span>, </span>
<span id="cb44-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb44-2" aria-hidden="true" tabindex="-1"></a>           <span class="st">'bird'</span> : <span class="st">'Tweety'</span>, </span>
<span id="cb44-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb44-3" aria-hidden="true" tabindex="-1"></a>           <span class="st">'dog'</span>  : <span class="st">'Pluto'</span>, </span>
<span id="cb44-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb44-4" aria-hidden="true" tabindex="-1"></a>           <span class="st">'duck'</span> : <span class="st">'Donald'</span>,</span>
<span id="cb44-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb44-5" aria-hidden="true" tabindex="-1"></a>           <span class="dv">400</span>    : <span class="st">'Bambino'</span>}               <span class="co">#←key can be numeric</span></span>
<span id="cb44-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb44-6" aria-hidden="true" tabindex="-1"></a>cartoons[<span class="st">'dog'</span>] <span class="op">=</span> <span class="st">'Goofy'</span>                    <span class="co">#←change value for key 'dog'</span></span>
<span id="cb44-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb44-7" aria-hidden="true" tabindex="-1"></a><span class="kw">del</span> cartoons[<span class="dv">400</span>]                            <span class="co">#←delete key-value pair</span></span>
<span id="cb44-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb44-8" aria-hidden="true" tabindex="-1"></a>s <span class="op">=</span> <span class="st">'deer'</span></span>
<span id="cb44-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb44-9" aria-hidden="true" tabindex="-1"></a>cartoons[s] <span class="op">=</span> <span class="st">'Bambi'</span>                        <span class="co">#←add new key-value pair.</span></span>
<span id="cb44-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb44-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb44-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb44-11" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> k <span class="kw">in</span> cartoons:</span>
<span id="cb44-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb44-12" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(cartoons[k], end<span class="op">=</span><span class="st">'! '</span>)             <span class="co">#⇒Tom! Tweety! Goofy! Donald! Bambi!</span></span></code></pre></div>
<p>Suitable objects and values can be converted to a dictionary by using the <a href="https://docs.python.org/3/library/functions.html#dict" title="PyDoc — Built-in Functions # dict()"><code>dict(</code><span class="stx">keyword-args-list</span><code>)</code></a> function:</p>
<h6 id="create-dictionary-using-keyword-arguments"><em>Create dictionary using keyword arguments</em></h6>
<div class="sourceCode" id="cb45"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb45-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb45-1" aria-hidden="true" tabindex="-1"></a>d <span class="op">=</span> <span class="bu">dict</span>(key1<span class="op">=</span><span class="st">'value1'</span>, key2<span class="op">=</span><span class="dv">22</span>, key3<span class="op">=</span><span class="st">'value3'</span>)</span></code></pre></div>
<p>Note that in this form, the keys do not need to be passed as strings: they can be passed as unquoted key name variables. Behind the scenes, Python creates a key with the same value as the named key variable. But when you want to use that as the key into the dictionary, however, you still need to quote the key name.</p>
<p>The <code>dict()</code> type function also accepts any iterable sequence, as long as each item is a <strong>pair</strong> of values, in which case the first value of the pair will be treated as the key, and the second, its value. The <a href="https://docs.python.org/3/library/functions.html#zip" title="Python Docs — Built-In Functions / zip"><strong><code>zip()</code></strong></a> function can be useful in this regard:</p>
<h6 id="create-dictionary-with-two-lists-and-the-zip-function"><em>Create dictionary with two lists and the zip function</em></h6>
<div class="sourceCode" id="cb46"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb46-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb46-1" aria-hidden="true" tabindex="-1"></a>K <span class="op">=</span> [ <span class="st">"ABC"</span>, <span class="st">"DEF"</span>, <span class="st">"GHI"</span> ]      <span class="co">#←list or other sequence of keys.</span></span>
<span id="cb46-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb46-2" aria-hidden="true" tabindex="-1"></a>V <span class="op">=</span> [ <span class="dv">11111</span>, <span class="dv">22222</span>, <span class="dv">33333</span> ]      <span class="co">#←list or other sequence of values.</span></span>
<span id="cb46-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb46-3" aria-hidden="true" tabindex="-1"></a>D <span class="op">=</span> <span class="bu">dict</span>(<span class="bu">zip</span>(K, V))              <span class="co">#←zip ‘pairs up’ the keys and values.</span></span></code></pre></div>
<p>You can extract an iterable list of the keys or values of a dictionary using the <a href="https://docs.python.org/3/library/stdtypes.html#dict-views" title="PyDoc — Standard Types # Dictionary Views"><code>keys</code> and <code>values</code></a> methods. These are called “dictionary view objects”: they provide a ‘live’ view of the dictionary; if the dictionary is updated, their contents will automatically be updated. As a result their contents cannot be directly changed.</p>
<h6 id="extracting-keys-and-values-from-a-dictionary"><em>Extracting keys and values from a dictionary</em></h6>
<div class="sourceCode" id="cb47"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb47-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb47-1" aria-hidden="true" tabindex="-1"></a>d <span class="op">=</span> <span class="bu">dict</span>(key1 <span class="op">=</span> <span class="st">'value1'</span>, key2 <span class="op">=</span> <span class="dv">22</span>, key3 <span class="op">=</span> <span class="st">'value3'</span>)</span>
<span id="cb47-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb47-2" aria-hidden="true" tabindex="-1"></a>dkeys <span class="op">=</span> d.keys()                  <span class="co">#←List of "live" keys</span></span>
<span id="cb47-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb47-3" aria-hidden="true" tabindex="-1"></a>dvalues <span class="op">=</span> d.values()              <span class="co">#←List of "live" values</span></span>
<span id="cb47-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb47-4" aria-hidden="true" tabindex="-1"></a>d[<span class="st">'key4'</span>] <span class="op">=</span> <span class="st">"new"</span>                 <span class="co">#←dkeys and dvalues will also be updated</span></span>
<span id="cb47-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb47-5" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> k <span class="kw">in</span> dkeys:</span>
<span id="cb47-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb47-6" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(d[k], end<span class="op">=</span><span class="st">' '</span>)          <span class="co">#⇒'value 1' 22 'value3' 'new'</span></span>
<span id="cb47-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb47-7" aria-hidden="true" tabindex="-1"></a>newkeys <span class="op">=</span> <span class="bu">list</span>(dkeys)             <span class="co">#←newkeys is not linked to d</span></span></code></pre></div>
<p>You can iterate through the dictionary as a whole using the <a href="https://docs.python.org/3/library/stdtypes.html#dict.items" title="PyDoc — Standard Types - dict.items() method"><code>items</code> method</a>. This method returns a <em>pair</em> of values as a tuple. You can use <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#assignment">tuple assignment</a> to split them up into separate names.</p>
<h6 id="iterate-through-dictionary-with-the-items-method"><em>Iterate through dictionary with the items method</em></h6>
<div class="sourceCode" id="cb48"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb48-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb48-1" aria-hidden="true" tabindex="-1"></a>D <span class="op">=</span> {<span class="st">'k1'</span>: <span class="dv">11</span>, <span class="st">'k2'</span>: <span class="dv">22</span>, <span class="st">'k3'</span>: <span class="dv">33</span>}</span>
<span id="cb48-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb48-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> k, v <span class="kw">in</span> D.items():</span>
<span id="cb48-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb48-3" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"key=</span><span class="sc">{}</span><span class="st">, val=</span><span class="sc">{}</span><span class="st">"</span>.<span class="bu">format</span>(k, v))</span></code></pre></div>
<p>The <a href="https://docs.python.org/3/library/stdtypes.html#dict.get" title="Python Docs — Standard Types / Dictionaries # get()"><strong><code>get()</code></strong></a> function works like subscript, in that it expects a key as first argument, but unlike subscript, it will not raise an exception if the key does not exist; instead, it will return <code>None</code>, or the caller can optionally provide a default value to return with the second argument. We put it to good use in an example <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#pythonic-alternative-to-switch-example">below</a>.</p>
<p>If you want a dictionary that preserves the <em>order</em> in which the items were inserted, you can use the <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" title="PyDoc — collections - OrderedDict"><code>OrderedDict</code> class</a> from the <a href="https://docs.python.org/3/library/collections.html" title="PyDoc — collections"><code>collections</code> module</a>. Another useful alternative dictionary class is <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict" title="PyDoc — collections - defaultdict"><code>defaultdict</code></a>, which can automatically create an item, with the value part set to some default, by simply referencing a non-existing key.</p>
<p>Creating a dictionary where you have <em>three</em> parallel lists (or other sequence), with the key being values from the first list, and you want the value to be a dictionary, whose key is values from the second list, a comprehension would not be the most elegant, but tastes vary:</p>
<h6 id="creating-a-dictionary-of-dictionaries-from-three-sequences"><em>Creating a dictionary of dictionaries from three sequences</em></h6>
<div class="sourceCode" id="cb49"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb49-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb49-1" aria-hidden="true" tabindex="-1"></a>MK <span class="op">=</span> ( <span class="st">"AA"</span>, <span class="st">"BB"</span>, <span class="st">"CC"</span>, <span class="st">"DD"</span>, <span class="st">"EE"</span> )       <span class="co">#←main keys</span></span>
<span id="cb49-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb49-2" aria-hidden="true" tabindex="-1"></a>KK <span class="op">=</span> ( <span class="st">"ZY"</span>, <span class="st">"XV"</span>, <span class="st">"UT"</span>, <span class="st">"SR"</span>, <span class="st">"QP"</span> )       <span class="co">#←sub keys  | value of</span></span>
<span id="cb49-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb49-3" aria-hidden="true" tabindex="-1"></a>VV <span class="op">=</span> ( <span class="dv">1111</span>, <span class="dv">2222</span>, <span class="dv">3333</span>, <span class="dv">4444</span>, <span class="dv">5555</span> )       <span class="co">#←values    | the main key</span></span>
<span id="cb49-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb49-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb49-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb49-5" aria-hidden="true" tabindex="-1"></a><span class="co"># create with a dictionary comprehension:</span></span>
<span id="cb49-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb49-6" aria-hidden="true" tabindex="-1"></a>DD <span class="op">=</span> { K[i]:{KK[i],VV[i]} <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="bu">len</span>(MK)) }</span>
<span id="cb49-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb49-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(DD)</span>
<span id="cb49-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb49-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb49-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb49-9" aria-hidden="true" tabindex="-1"></a><span class="co"># create empty dictionary, populate with iteration:</span></span>
<span id="cb49-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb49-10" aria-hidden="true" tabindex="-1"></a>DD <span class="op">=</span> {} </span>
<span id="cb49-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb49-11" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="bu">len</span>(MK)):</span>
<span id="cb49-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb49-12" aria-hidden="true" tabindex="-1"></a>   DD[MK[i]] <span class="op">=</span> { KK[i]:VV[i] }</span>
<span id="cb49-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb49-13" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(DD)</span></code></pre></div>
<p>This is not necessarily a useful structure, but Python makes it easy to create any kind of data arrangement.</p>
<h2 id="sets">Sets</h2>
<p>A set is a unique set of values. It is created with the <a href="https://docs.python.org/3/library/functions.html#func-set" title="PyDoc — Built-in Functions # set()"><code>set()</code> function</a>, or as a comma-separated list within parentheses. A set is basically a dictionary containing only keys, and no values: just like keys in a dictionary, items in a set must be unique.</p>
<p>The <code>set</code> function is particularly useful as a tool to remove duplicates from any iterable: convert the iterable to a set to remove duplicates, and then, optionally, convert it back to the type of iterable you require. Because strings are iterable, you can even use <code>set</code> to remove duplicate letters in a string.</p>
<p>Python overloads some of the binary operators to provide special set operators. These operators all return a new set:</p>
<div class="tabs">
<table>
<thead>
<tr class="header">
<th style="text-align: left;">Operator</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>|</code></td>
<td style="text-align: left;">Returns the <em>union</em> of sets</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>-</code></td>
<td style="text-align: left;">Returns the <em>set difference</em></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>&amp;</code></td>
<td style="text-align: left;">Returns the <em>intersection</em> of sets</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>^</code></td>
<td style="text-align: left;">Return the <em>symmetric difference</em> of sets (elements in one but not the other sets)</td>
</tr>
</tbody>
</table>
</div>
<p>You can also use these operators in augmented assignment statements, to modify an existing set. In addition, you can compare sets with the comparison operators.</p>
<h6 id="example-operations-on-sets"><em>Example operations on sets</em></h6>
<div class="sourceCode" id="cb50"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb50-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb50-1" aria-hidden="true" tabindex="-1"></a>s1 <span class="op">=</span> {<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>}</span>
<span id="cb50-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb50-2" aria-hidden="true" tabindex="-1"></a>s2 <span class="op">=</span> <span class="bu">set</span>([<span class="dv">1</span>, <span class="dv">5</span>, <span class="dv">6</span>, <span class="dv">7</span>, <span class="dv">7</span>])    <span class="co">#←duplicate value will be removed</span></span>
<span id="cb50-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb50-3" aria-hidden="true" tabindex="-1"></a>s3 <span class="op">=</span> <span class="bu">set</span>([<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">5</span>, <span class="dv">8</span>])</span>
<span id="cb50-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb50-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(s1 <span class="op">|</span> s2)               <span class="co">#⇒{1, 2, 3, 4, 5, 6, 7}</span></span>
<span id="cb50-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb50-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(s1 <span class="op">&amp;</span> s2 <span class="op">&amp;</span> s3)          <span class="co">#⇒{1}</span></span>
<span id="cb50-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb50-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(s1 <span class="op">-</span> s2)               <span class="co">#⇒{2, 3, 4}</span></span>
<span id="cb50-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb50-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(s1<span class="op">^</span>s3)                 <span class="co">#⇒{3, 4, 5, 8}</span></span>
<span id="cb50-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb50-8" aria-hidden="true" tabindex="-1"></a>s3 <span class="op">|=</span> s1   </span>
<span id="cb50-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb50-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(s3)                    <span class="co">#⇒{1, 2, 3, 4, 5, 8}</span></span></code></pre></div>
<h2 id="comprehensions">Comprehensions</h2>
<p>A comprehension is a special syntax to produce a list, tuple, dictionary, set, or generator. It is essentially a shortened form of a <code>for .. in</code> loop as an expression.</p>
<p><strong>List comprehension:</strong><br>
<strong><code>[</code></strong> ‹<em>expr</em>› <strong><code>for</code></strong> ‹<em>item</em>› <strong><code>in</code></strong> ‹<em>iterable</em>› [<strong><code>if</code></strong> ‹<em>condition</em>›] <strong><code>]</code></strong></p>
<p><strong>Dictionary comprehension:</strong><br>
<strong><code>{</code></strong> ‹<em>key</em>›<strong><code>:</code></strong>‹<em>value</em>› <strong><code>for</code></strong> ‹<em>item</em>› <strong><code>in</code></strong> ‹<em>iterable</em>› [<strong><code>if</code></strong> ‹<em>condition</em>›] <strong><code>}</code></strong></p>
<p><strong>Set comprehension:</strong><br>
<strong><code>{</code></strong> ‹<em>key</em>› <strong><code>for</code></strong> ‹<em>item</em>› <strong><code>in</code></strong> ‹<em>iterable</em>› [<strong><code>if</code></strong> ‹<em>condition</em>›] <strong><code>}</code></strong></p>
<p><strong>Generator comprehension:</strong><br>
<strong><code>(</code></strong> ‹<em>key</em>› <strong><code>for</code></strong> ‹<em>item</em>› <strong><code>in</code></strong> ‹<em>iterable</em>› [<strong><code>if</code></strong> ‹<em>condition</em>›] <strong><code>)</code></strong></p>
<p>Comprehensions can be nested, and the ‹<em>expr</em>›ession, ‹<em>key</em>› or ‹<em>value</em>› parts, may be any expression, as long as it evaluates to a legal value in the context. In the case of ‹<em>expr</em>›ession, it can even be another comprehension. As a result of all this, you can create really complicated comprehensions that are difficult to understand. Try to avoid getting to convoluted with comprehensions.</p>
<h6 id="creating-various-comprehensions"><em>Creating various comprehensions</em></h6>
<div class="sourceCode" id="cb51"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb51-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb51-1" aria-hidden="true" tabindex="-1"></a><span class="co"># List created with a loop:</span></span>
<span id="cb51-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb51-2" aria-hidden="true" tabindex="-1"></a>mylist <span class="op">=</span> []</span>
<span id="cb51-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb51-3" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> (<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>):</span>
<span id="cb51-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb51-4" aria-hidden="true" tabindex="-1"></a>   mylist.append(i <span class="op">**</span> <span class="dv">2</span>)</span>
<span id="cb51-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb51-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb51-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb51-6" aria-hidden="true" tabindex="-1"></a><span class="co"># List created with a comprehension:</span></span>
<span id="cb51-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb51-7" aria-hidden="true" tabindex="-1"></a>mylist <span class="op">=</span> [i <span class="op">**</span> <span class="dv">2</span> <span class="cf">for</span> i <span class="kw">in</span> (<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>)]</span>
<span id="cb51-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb51-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb51-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb51-9" aria-hidden="true" tabindex="-1"></a><span class="co"># Dictionary created with a comprehension:</span></span>
<span id="cb51-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb51-10" aria-hidden="true" tabindex="-1"></a>mydict <span class="op">=</span>{k:v <span class="cf">for</span> k <span class="kw">in</span> (<span class="st">"a"</span>, <span class="st">"b"</span>, <span class="st">"c"</span>) <span class="cf">for</span> v <span class="kw">in</span> (<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>)}</span>
<span id="cb51-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb51-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb51-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb51-12" aria-hidden="true" tabindex="-1"></a><span class="co"># Generator created with a comprehension:</span></span>
<span id="cb51-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb51-13" aria-hidden="true" tabindex="-1"></a><span class="co"># Note that using a comprehension inside parentheses</span></span>
<span id="cb51-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb51-14" aria-hidden="true" tabindex="-1"></a><span class="co"># doesn't make a tuple, it creates a generator. </span></span>
<span id="cb51-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb51-15" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> (x <span class="op">*</span> <span class="dv">2</span> <span class="cf">for</span> x <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">10</span>)):</span>
<span id="cb51-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb51-16" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(i)<span class="op">;</span></span>
<span id="cb51-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb51-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb51-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb51-18" aria-hidden="true" tabindex="-1"></a><span class="co"># Set created with a comprehension:</span></span>
<span id="cb51-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb51-19" aria-hidden="true" tabindex="-1"></a>myset <span class="op">=</span> {num <span class="cf">for</span> num <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">0</span>,<span class="dv">12</span>)}</span></code></pre></div>
<p>Take note that the last example is kind of pointless, since all the values will be unique (<code>range</code> does not return duplicate values), so in practice it would have little value. But it is still a set comprehension.</p>
<h6 id="nested-comprehension-formatting-and-its-equivalent-iterative-version"><em>Nested comprehension formatting, and it's equivalent iterative version</em></h6>
<div class="sourceCode" id="cb52"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb52-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb52-1" aria-hidden="true" tabindex="-1"></a>L <span class="op">=</span> [ (x, y) <span class="cf">for</span> x <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">6</span>) <span class="cf">if</span> x <span class="op">%</span> <span class="dv">2</span> <span class="cf">for</span> y <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">6</span>) <span class="cf">if</span> y <span class="op">%</span> <span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span> ]</span>
<span id="cb52-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb52-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(L)</span>
<span id="cb52-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb52-3" aria-hidden="true" tabindex="-1"></a>L <span class="op">=</span> [ (x, y) <span class="cf">for</span> x <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">6</span>) <span class="cf">if</span> x <span class="op">%</span> <span class="dv">2</span> </span>
<span id="cb52-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb52-4" aria-hidden="true" tabindex="-1"></a>             <span class="cf">for</span> y <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">6</span>) <span class="cf">if</span> y <span class="op">%</span> <span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span> ]</span>
<span id="cb52-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb52-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(L)</span>
<span id="cb52-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb52-6" aria-hidden="true" tabindex="-1"></a>L <span class="op">=</span> [ (x, y)</span>
<span id="cb52-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb52-7" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> x <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">6</span>) <span class="cf">if</span> x <span class="op">%</span> <span class="dv">2</span> </span>
<span id="cb52-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb52-8" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> y <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">6</span>) <span class="cf">if</span> y <span class="op">%</span> <span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span></span>
<span id="cb52-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb52-9" aria-hidden="true" tabindex="-1"></a>    ]</span>
<span id="cb52-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb52-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(L)</span>
<span id="cb52-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb52-11" aria-hidden="true" tabindex="-1"></a>L <span class="op">=</span> []</span>
<span id="cb52-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb52-12" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> x <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">6</span>):</span>
<span id="cb52-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb52-13" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> x <span class="op">%</span> <span class="dv">2</span>:</span>
<span id="cb52-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb52-14" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> y <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">6</span>):</span>
<span id="cb52-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb52-15" aria-hidden="true" tabindex="-1"></a>         <span class="cf">if</span> y <span class="op">%</span> <span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb52-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb52-16" aria-hidden="true" tabindex="-1"></a>             L.append((x, y))</span>
<span id="cb52-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb52-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(L)</span></code></pre></div>
<h1 id="statements">Statements</h1>
<p>Statements are the ‘sentences’ of a language; a syntactically complete <em>instruction</em>. In Python, most statements are terminated by a <span class="key">NL</span> (newline) character, which your editor inserts when you press <span class="key">ENTER</span>. The exceptions are:</p>
<ul>
<li><p>When a source line ends with a backslash, the next line is considired a <em>continuation</em> of the current statement.</p></li>
<li><p>When a source line ends while still within paired parentheses, square brackets, or curly braces, it is still considered part of a single statement.</p></li>
<li><p>When a line ends between the delimiters of a <em>long string</em> (delimited by tripple single quotes, or tripple double quotes), Python only inserts a <span class="key">NL</span> character, and considers the next line part of the same string.</p></li>
</ul>
<p>Although not recommended (it is not ‘Pythonic’), you can have multiple statements on the same line, if you <em>separate</em> them with a semicolon (<code>;</code>).</p>
<h2 id="expression-statements">Expression Statements</h2>
<p>It is legal syntax in Python to only have an <span class="stx">expr</span>ession as a statement. In scripts, this is useless, but interactive <span class="sc">REPL</span> environments, will automatically automatically print the value of the expression. Statements <em>never</em> result in values… they are not expressions, not even <em>expression statements</em> (which is simply a statement consisting of a single expression).</p>
<h3 id="docstring-expression-statements">Docstring Expression Statements</h3>
<p>However, when a <strong><code>str</code></strong>ing literal appears as the <em>first</em> statement in a file (barring comments), it is treat­ed as <em>documentation</em> for the file. We commonly use <em>long strings</em> for this purpose. By the same token, if the first statement in a function consists of a <strong><code>str</code></strong>ing expression, it is treated as documentation for the function.</p>
<p>These ‘documentation strings’ are called <em>docstrings</em> for short, and are stored in the <code>__doc__</code> attribute of modules and functions. They are also extracted from your code by the standard <a href="https://docs.python.org/3/library/pydoc.html" title="PyDoc — pydoc Module"><strong>pydoc</strong></a> module (you may have a <em>launcher</em> for it called <code>pydoc</code>, or you can run the modules with: <code>pythom -m pydoc</code>).</p>
<h3 id="function-call-expressions">Function Call Expressions</h3>
<p>Sometimes, a statements consists of an expression, but it involves a function call operator. Unlike most other expressions, this is not considered ‘useless’. So much so, that may might refer to such a statement as ‘a function call statement’, which is not technically correct… it is just another expression statement, since all functions calls results in values.</p>
<p>Even if a function does not explicitly <strong><code>return</code></strong> a value, Python will make it return <code>None</code>.</p>
<h2 id="import-statements">Import Statements</h2>
<p>When your use an ‘<code>import</code> <span class="stx">module</span>’ statement, Python looks for, and <strong>runs</strong> <span class="stx">module</span><strong><code>.py</code></strong> file. Python looks for that <span class="stx">module</span><code>.py</code> file in the current directory first; if not found, it looks in each of the directories listed in <code>sys.path</code>.</p>
<h6 id="import-statementdirective-examples"><em>Import statement/directive examples</em></h6>
<div class="sourceCode" id="cb53"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb53-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb53-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> math</span>
<span id="cb53-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb53-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(math.sqrt(<span class="dv">99</span>))</span>
<span id="cb53-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb53-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> math <span class="im">as</span> m</span>
<span id="cb53-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb53-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(m.sqrt(<span class="dv">99</span>))</span>
<span id="cb53-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb53-5" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> math <span class="im">import</span> sqrt</span>
<span id="cb53-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb53-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(sqrt(<span class="dv">99</span>))</span>
<span id="cb53-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb53-7" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> math <span class="im">import</span> sqrt <span class="im">as</span> S</span>
<span id="cb53-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb53-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(S(<span class="dv">99</span>))</span>
<span id="cb53-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb53-9" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> math <span class="im">import</span> <span class="op">*</span>              <span class="co">#←very bad style.</span></span>
<span id="cb53-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb53-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(sqrt(<span class="dv">99</span>))</span></code></pre></div>
<p>Because Python <em>executes</em> a file when you import it, a module should only define variables and functions, which would them make them available in the script doing the importing, albeit with the <span class="stx">module</span> prefix by default.</p>
<h2 id="assignment-statements">Assignment Statements</h2>
<p>Assignment statements do not have results, only <em>effects</em>… even if we use the equal sign as part of its syntax.</p>
<ul>
<li><p><strong>Standard Assignment</strong> ⇒<br>
<span class="stx">var</span> <strong><code>=</code></strong> <span class="stx">expr</span></p></li>
<li><p><strong>Sequence Unpacking</strong> ⇒<br>
<span class="tab1"></span><span class="stx">var</span><sub>1</sub><strong><code>,</code></strong> <span class="stx">var</span><sub>2</sub><strong><code>,</code></strong>… <strong><code>=</code></strong> <span class="stx">expr</span><sub>1</sub><strong><code>,</code></strong> <span class="stx">expr</span><sub>2</sub>…<br>
<span class="tab1"></span><span class="stx">var</span><sub>1</sub><strong><code>,</code></strong> <span class="stx">var</span><sub>2</sub><strong><code>,</code></strong>… <strong><code>=</code></strong> <span class="stx">tuple-expr</span></p></li>
<li><p><strong>Multiple/Chained Assigment</strong> ⇒<br>
<span class="stx">var</span><sub>1</sub><strong><code>=</code></strong> <span class="stx">var</span><sub>2</sub> … <strong><code>=</code></strong> <span class="stx">expr</span></p></li>
</ul>
<h3 id="standard-assignment">Standard Assignment</h3>
<p>All assignment forms, include the ‘simple’ or standard one, will <em>create</em> a name, if it does not already exist. Otherwise, it will simply re-associate the variable name with a new value (change the value the variable refers to).</p>
<h6 id="standardsimple-assigment-examples"><em>Standard/Simple assigment examples</em></h6>
<div class="sourceCode" id="cb54"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb54-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb54-1" aria-hidden="true" tabindex="-1"></a>price <span class="op">=</span> <span class="fl">12.34</span>                   <span class="co">#←creates name `price` with value `12.34`.</span></span>
<span id="cb54-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb54-2" aria-hidden="true" tabindex="-1"></a>price <span class="op">=</span> <span class="fl">23.45</span>                   <span class="co">#←changes the *value* `price` refers to.</span></span></code></pre></div>
<h3 id="tuple-unpacking">Tuple Unpacking</h3>
<p>This form of assignment, expects a <em>tuple</em> of names on the left of the assignment character, and either a literal tuple on right, or any expression that results in a tuple with the same number of items as the number names on the left.</p>
<h6 id="tuple-unpacking-assignment-examples"><em>Tuple unpacking assignment examples</em></h6>
<div class="sourceCode" id="cb55"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb55-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb55-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> frt ():                     <span class="co">#←function returning a tuple.</span></span>
<span id="cb55-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb55-2" aria-hidden="true" tabindex="-1"></a>   <span class="cf">return</span> <span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span></span>
<span id="cb55-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb55-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb55-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb55-4" aria-hidden="true" tabindex="-1"></a>a, b, c <span class="op">=</span> <span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>               <span class="co">#←`a`=`1`, `b`=`2`, `c`=`3`.</span></span>
<span id="cb55-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb55-5" aria-hidden="true" tabindex="-1"></a>a, b, c <span class="op">=</span> (<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>)             <span class="co">#←`a`=`1`, `b`=`2`, `c`=`3`.</span></span>
<span id="cb55-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb55-6" aria-hidden="true" tabindex="-1"></a>a, b, c <span class="op">=</span> [<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>]             <span class="co">#←`a`=`1`, `b`=`2`, `c`=`3`.</span></span>
<span id="cb55-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb55-7" aria-hidden="true" tabindex="-1"></a>t <span class="op">=</span> <span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span></span>
<span id="cb55-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb55-8" aria-hidden="true" tabindex="-1"></a>a, b, c <span class="op">=</span> t                     <span class="co">#←`a`=`1`, `b`=`2`, `c`=`3`.</span></span>
<span id="cb55-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb55-9" aria-hidden="true" tabindex="-1"></a>a, b, c <span class="op">=</span> frt()                 <span class="co">#←`a`=`1`, `b`=`2`, `c`=`3`.</span></span>
<span id="cb55-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb55-10" aria-hidden="true" tabindex="-1"></a>a, b, c <span class="op">=</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">4</span>)            <span class="co">#←`a`=`1`, `b`=`2`, `c`=`3`.</span></span></code></pre></div>
<p>Although we all this syntax ‘tuple unpacking’, the <span class="stx">expr</span>ession on the right, can be any <em>iterable</em> <strong>sequence</strong>. The ‘tuple’ in ‘tuple unpacking’, really refers to the names on the left.</p>
<h3 id="multiplechained-assignment">Multiple/Chained Assignment</h3>
<p>This syntax simply assigns the <strong>same</strong> value, to several variables on the left of the assignment character:</p>
<h6 id="multiple-assignment-examples"><em>Multiple assignment examples</em></h6>
<div class="sourceCode" id="cb56"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb56-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb56-1" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> b <span class="op">=</span> c <span class="op">=</span> <span class="dv">123</span>                 <span class="co">#←all variables refer to `123`.</span></span>
<span id="cb56-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb56-2" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> b <span class="op">=</span> c <span class="op">=</span> [<span class="dv">11</span>, <span class="dv">22</span>, <span class="dv">33</span>]        <span class="co">#←all refer to `[11, 22, 33]`.</span></span>
<span id="cb56-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb56-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(a, b, c)                  <span class="co">#⇒[11, 22, 33] [11, 22, 33] [11, 22, 33]</span></span>
<span id="cb56-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb56-4" aria-hidden="true" tabindex="-1"></a>b[<span class="dv">1</span>] <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb56-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb56-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(a, b, c)                  <span class="co">#⇒[11, 0, 33] [11, 0, 33] [11, 0, 33]</span></span></code></pre></div>
<p>So, we must be careful with this syntax, if the variables all refer to one <em>mutable</em> type value.</p>
<h3 id="augmentedcompound-assignment">Augmented/Compound Assignment</h3>
<p>This is a shorthand syntax for a common pattern that occurs in many programs:</p>
<p><span class="tab1"></span><span class="stx">var</span> <strong><code>=</code></strong> <span class="stx">var</span> <span class="stx">op</span> <span class="stx">expr</span></p>
<p>which Python allows us to shorting to:</p>
<p><span class="tab1"></span><span class="stx">var</span> <span class="stx">op</span><strong><code>=</code></strong> <span class="stx">expr</span></p>
<p>where <span class="stx">op</span> represents any <em>binary operator</em> (an operator that takes exactly two operands).</p>
<h6 id="augmentedcompound-assignment-examples"><em>Augmented/compound assignment examples</em></h6>
<div class="sourceCode" id="cb57"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb57-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb57-1" aria-hidden="true" tabindex="-1"></a>price <span class="op">=</span> <span class="fl">12.34</span></span>
<span id="cb57-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb57-2" aria-hidden="true" tabindex="-1"></a>price <span class="op">=</span> price <span class="op">*</span> <span class="fl">1.10</span>            <span class="co">#←increase `price` by 10%</span></span>
<span id="cb57-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb57-3" aria-hidden="true" tabindex="-1"></a>price <span class="op">*=</span> <span class="fl">1.10</span>                   <span class="co">#←increase `price` by 10%</span></span>
<span id="cb57-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb57-4" aria-hidden="true" tabindex="-1"></a>a <span class="op">=</span> <span class="dv">1</span>                           <span class="co">#←`a` ⇒ `1`</span></span>
<span id="cb57-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb57-5" aria-hidden="true" tabindex="-1"></a>a <span class="op">+=</span> <span class="dv">1</span>                          <span class="co">#←`a` ⇒ `2`</span></span>
<span id="cb57-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb57-6" aria-hidden="true" tabindex="-1"></a>a <span class="op">+=</span> <span class="dv">1</span>                          <span class="co">#←`a` ⇒ `3`</span></span>
<span id="cb57-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb57-7" aria-hidden="true" tabindex="-1"></a>a <span class="op">-=</span> <span class="dv">1</span>                          <span class="co">#←`a` ⇒ `2`</span></span></code></pre></div>
<h3 id="truthiness">Truthiness</h3>
<p>Truth is not blindly either <code>True</code> or <code>False</code> in Python (as in some other languages), but still well-defined. Python uses certain rules to establish the ‘truthiness’ of an expression. Truth is not necessarily an absolute <a href="https://en.m.wikipedia.org/wiki/Boolean" title="Wikipedia — Boolean">boolean</a> value, but expressions can be tested for their ‘truthiness’, by using the built-in <a href="https://docs.python.org/3/library/functions.html#bool" title="Python Docs — Python Built-in Functions — bool()"><code>bool(</code><span class="stx">expr</span><code>)</code> function</a>.</p>
<p>Whenever the language <em>expects</em> a boolean value, this represents a <em>boolean context</em>. In a boolean context, any expression is <em>treated</em> as <code>True</code> or <code>False</code>, depending on some well-defined rules. The expression is treated as <code>True</code> <em>unless</em> it has one of the following values, thus <code>False</code>:</p>
<h4 id="syntax-falsey-expressions"><strong>Syntax</strong> — <strong><em>“Falsey” Expressions</em></strong></h4>
<div class="stx">
<ul>
<li><strong><code>None</code></strong> — <em>null reference</em>,</li>
<li><strong><code>False</code></strong> — <em>constant</em>,</li>
<li><strong><code>''</code> <span class="alt"></span> <code>""</code></strong> — <em>empty string</em>,</li>
<li><strong><code>()</code></strong> <span class="alt"></span> <strong><code>tuple()</code></strong> — <em>empty tuple</em>,</li>
<li><strong><code>[]</code></strong> <span class="alt"></span> <strong><code>list()</code></strong> — <em>empty list</em>,</li>
<li><strong><code>{}</code></strong> <span class="alt"></span> <strong><code>dict()</code></strong> — <em>empty dictionary</em>,</li>
<li><strong><code>0</code> <span class="alt"></span> <code>0.0</code> <span class="alt"></span> <code>0.0j</code></strong> — <em>zero number of any type</em>,</li>
<li><strong><code>Decimal(0)</code></strong>,</li>
<li><strong><code>Fraction(0)</code></strong>.</li>
</ul>
</div>
<p>Note that the <code>True</code> and <code>False</code> <a href="https://docs.python.org/3/library/constants.html" title="Python Docs — Built-in Constants">constants</a> are available in cases where you want to be explicit, and some functions may return one or the other. The following example code will prove the above assertions:</p>
<h6 id="verify-all-expressions-that-are-falsey-by-conversion-to-boolean"><em>Verify all expressions that are ‘falsey’ by conversion to boolean</em></h6>
<div class="sourceCode" id="cb58"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb58-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb58-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> decimal <span class="im">import</span> Decimal</span>
<span id="cb58-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb58-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> fractions <span class="im">import</span> Fraction</span>
<span id="cb58-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb58-3" aria-hidden="true" tabindex="-1"></a>falsey <span class="op">=</span> [<span class="st">''</span>, <span class="st">""</span>, (), [], {}, <span class="dv">0</span>, <span class="fl">0.0</span>, <span class="ot">0.0j</span>, Decimal(<span class="dv">0</span>), Fraction(<span class="dv">0</span>)]</span>
<span id="cb58-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb58-4" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> F <span class="kw">in</span> falsey:</span>
<span id="cb58-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb58-5" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="bu">bool</span>(F))</span></code></pre></div>
<p>The binary <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" title="Python Docs — Standard Library — Boolean Operators">boolean</a> operators (<strong><code>and</code></strong> and <strong><code>or</code></strong>) do not return boolean values. They return the <em>result</em> of one of their operands, which are expressions. Both the <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" title="Python Docs — Standard Library — Boolean Operators"><strong><code>and</code></strong> operator</a> and the <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" title="Python Docs — Standard Library — Boolean Operators"><strong><code>or</code></strong> operator</a> per­form <em>short-circuit evaluation</em>. This means that, although they will return the result of either the left-hand operand or the right-hand operand, they will not evaluate the right-hand operand <em>at all</em>, if they determine that the left-hand operand must be returned.</p>
<p>Because of a) short-circuit evaluation, and b) the fact that <strong><code>or</code></strong> and <strong><code>and</code></strong> returns the <em>last expression evaluated</em> as a result, it is often used in an idiom that ‘results in the first non-falsy value’:</p>
<h6 id="result-of-first-non-falsy-expression-idiom"><em>Result of first non-falsy expression idiom</em></h6>
<div class="sourceCode" id="cb59"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb59-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb59-1" aria-hidden="true" tabindex="-1"></a>a, b, c, d <span class="op">=</span> <span class="st">""</span>, <span class="st">"ABC"</span>, <span class="va">None</span>, <span class="st">"DEF"</span></span>
<span id="cb59-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb59-2" aria-hidden="true" tabindex="-1"></a>result <span class="op">=</span> a <span class="kw">or</span> b <span class="kw">or</span> c <span class="kw">or</span> d</span>
<span id="cb59-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb59-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(result)                            <span class="co">#⇒ABC</span></span></code></pre></div>
<h2 id="common-topics">Common Topics</h2>
<p>Some topics occur while discussing conditional, iteration, and other statements. Effectively, the following are preparatory requisite topics for the later topics.</p>
<h3 id="boolean-operators">Boolean Operators</h3>
<p>The Python <a href="https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not" title="Python Docs — Built-in Types # Boolean Operators">boolean operators</a> are not equivalent to C/C++/Java/C#, instead normal keywords <strong><code>and</code></strong>, <strong><code>or</code></strong> and <strong><code>not</code></strong> are used. They still act like operators, but again does not follow tradition in the actual values they result in — it is not necessarily of type <code>bool</code>.</p>
<div class="tabs">
<table>
<colgroup>
<col style="width: 29%">
<col style="width: 70%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Operator</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><span class="stx">lhs</span> <strong><code>and</code></strong> <span class="stx">rhs</span></td>
<td style="text-align: left;">Logical <span class="sc">AND</span>. Result is either <span class="stx">rhs</span> if “true”, else <span class="stx">lhs</span></td>
</tr>
<tr class="even">
<td style="text-align: left;"><span class="stx">lhs</span> <strong><code>or</code></strong> <span class="stx">rhs</span></td>
<td style="text-align: left;">Logical <span class="sc">OR</span>. Result is either <span class="stx">lhs</span> if “true”, else <span class="stx">rhs</span></td>
</tr>
<tr class="odd">
<td style="text-align: left;"><strong><code>not</code></strong> <span class="stx">expr</span></td>
<td style="text-align: left;">Logical <span class="sc">NOT</span>. Result is either <code>True</code> or <code>False</code>.</td>
</tr>
</tbody>
</table>
</div>
<h6 id="example-logical-operators"><em>Example logical operators</em></h6>
<div class="sourceCode" id="cb60"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb60-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb60-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"FALSE:"</span>, <span class="dv">123</span> <span class="kw">and</span> <span class="dv">0</span>)           <span class="co">#⇒FALSE: 0</span></span>
<span id="cb60-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb60-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"FALSE:"</span>, <span class="dv">0</span> <span class="kw">and</span> <span class="dv">123</span>)           <span class="co">#⇒FALSE: 0</span></span>
<span id="cb60-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb60-3" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"TRUE :"</span>, <span class="dv">123</span> <span class="kw">and</span> <span class="dv">456</span>)         <span class="co">#⇒TRUE : 456</span></span>
<span id="cb60-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb60-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"TRUE :"</span>, <span class="dv">456</span> <span class="kw">and</span> <span class="dv">123</span>)         <span class="co">#⇒TRUE : 123</span></span>
<span id="cb60-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb60-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"FALSE:"</span>, <span class="va">None</span> <span class="kw">or</span> <span class="dv">0</span>)           <span class="co">#⇒FALSE: 0</span></span>
<span id="cb60-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb60-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"FALSE:"</span>, <span class="dv">0</span> <span class="kw">or</span> <span class="va">None</span>)           <span class="co">#⇒FALSE: None</span></span>
<span id="cb60-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb60-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"TRUE :"</span>, <span class="dv">0</span> <span class="kw">or</span> <span class="dv">123</span>)            <span class="co">#⇒TRUE : 123</span></span>
<span id="cb60-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb60-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"TRUE :"</span>, <span class="dv">123</span> <span class="kw">or</span> <span class="dv">0</span>)            <span class="co">#⇒TRUE : 123</span></span></code></pre></div>
<p>The <strong><code>or</code></strong> especially leads to an <em>idiom</em> that provides a default value, if some input is either invalid or empty:</p>
<h6 id="idiom-to-provide-a-default-value"><em>Idiom to provide a default value</em></h6>
<div class="sourceCode" id="cb61"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb61-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb61-1" aria-hidden="true" tabindex="-1"></a>user <span class="op">=</span> <span class="bu">input</span>(<span class="st">'What is your name?: '</span>)</span>
<span id="cb61-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb61-2" aria-hidden="true" tabindex="-1"></a>user <span class="op">=</span> user <span class="kw">or</span> <span class="st">'anonymous'</span></span></code></pre></div>
<p>If the user just pressed <span class="key">ENTER</span>, the empty string returned will be treated as <code>False</code>, and the result of the <strong><code>or</code></strong> operator will be <strong><code>'anonymous'</code></strong>.</p>
<p>A somewhat more questionable idiom, is to use <strong><code>and</code></strong> to either call or not call a function to its right, depending on the return value of the function or expression used as the left hand operand.</p>
<h6 id="idiom-to-optionally-call-a-function"><em>Idiom to optionally call a function</em></h6>
<div class="sourceCode" id="cb62"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb62-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb62-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> SomeFunction ():</span>
<span id="cb62-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb62-2" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"SomeFunction called"</span>)</span>
<span id="cb62-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb62-3" aria-hidden="true" tabindex="-1"></a><span class="va">True</span>  <span class="kw">and</span> SomeFunction()             <span class="co">#←will call `SomeFunction`</span></span>
<span id="cb62-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb62-4" aria-hidden="true" tabindex="-1"></a><span class="va">False</span> <span class="kw">and</span> SomeFunction()             <span class="co">#←will not call `SomeFunction`</span></span></code></pre></div>
<p>Of course, in real code, instead of <code>True</code> or <code>False</code> as left hand operand, you would use some expression, or call another function that returns a ‘truthy’ value.</p>
<h3 id="comparison-operators">Comparison Operators</h3>
<p>These operators always return either <code>True</code> or <code>False</code></p>
<div class="tabs">
<table>
<thead>
<tr class="header">
<th>Operator</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>==</code></td>
<td style="text-align: left;">Equality</td>
</tr>
<tr class="even">
<td><code>!=</code></td>
<td style="text-align: left;">Inequality</td>
</tr>
<tr class="odd">
<td><code>&gt;</code></td>
<td style="text-align: left;">Greater than</td>
</tr>
<tr class="even">
<td><code>&lt;</code></td>
<td style="text-align: left;">Lesser than</td>
</tr>
<tr class="odd">
<td><code>&gt;=</code></td>
<td style="text-align: left;">Greater than or equal to</td>
</tr>
<tr class="even">
<td><code>&lt;=</code></td>
<td style="text-align: left;">Lesser than or equal to</td>
</tr>
</tbody>
</table>
</div>
<p>To test whether a value is equal to <code>None</code> (as opposed to <code>False</code>): use <code>is None</code>. Note that these operators not only work with simple types, but also with sequences (<code>list</code>, <code>tuple</code>, etc.)</p>
<h3 id="identity-and-membership">Identity and Membership</h3>
<p>To check whether two references refer to the same object (piece of memory), we can use the <strong><code>is</code></strong> operator. This is not the same as <em>equality</em>, where two different objects may have the same <strong>values</strong>, but do not share memory. You can also check types with <strong><code>is</code></strong>:</p>
<h6 id="checking-type-identity"><em>Checking type identity</em></h6>
<div class="sourceCode" id="cb63"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb63-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb63-1" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="bu">type</span>(<span class="dv">5</span>) <span class="kw">is</span> <span class="bu">int</span>:</span>
<span id="cb63-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb63-2" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"The literal `5` has type `int`"</span>)</span></code></pre></div>
<p>Membership tests are performed with the <strong><code>in</code></strong> operator. It can check whether an item exists in some list, or a substring exists within another string, or if a key exists in a dictionary.</p>
<p>In summary the <code>is</code> operator can be used to test for:</p>
<ol type="1">
<li>type equivalence: <code>type(x) is int</code>;</li>
<li>for object <em>identity</em> — whether two expressions or names refer to the same object in memory;</li>
<li>and to test for <code>None</code> (<code>x is None</code>, or <code>x is not None</code>).</li>
</ol>
<p>In some way, the <strong><code>in</code></strong> membership test operator, is also a ‘logical operator’. The opposite logic is obtained with <strong><code>not in</code></strong> (and not <strong><code>in not</code></strong>).</p>
<h4 id="syntax-if-statement"><strong>Syntax</strong> — If Statement</h4>
<div class="stx">
<ul>
<li><strong><code>if</code></strong> <span class="stx">bool-expr</span> <strong><code>:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span></li>
<li><strong><code>if</code></strong> <span class="stx">bool-expr</span> <strong><code>:</code></strong> <span class="stx">statement</span></li>
</ul>
</div>
<p>The second form is an <em>exception</em> to the normal <strong><code>if</code></strong> statement rules; it is generally frowned upon by experienced Python programmers, so try to avoid it in production code. It is fine to use this form interactively, or in educational code examples.</p>
<h6 id="examples-using-the-if-statement"><em>Examples using the if statement</em></h6>
<div class="sourceCode" id="cb64"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb64-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb64-1" aria-hidden="true" tabindex="-1"></a>n <span class="op">=</span> <span class="bu">int</span>(<span class="bu">input</span>(<span class="st">"Number?: "</span>))</span>
<span id="cb64-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb64-2" aria-hidden="true" tabindex="-1"></a><span class="co">#if 10 &lt;= n and n &lt;= 20:        #←is `n` in range [10..20]?</span></span>
<span id="cb64-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb64-3" aria-hidden="true" tabindex="-1"></a><span class="co">#if n &gt;= 10 and n &lt;= 20:        #←is `n` in range [10..20]?</span></span>
<span id="cb64-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb64-4" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="dv">10</span> <span class="op">&lt;=</span> n <span class="op">&lt;=</span> <span class="dv">20</span>:             <span class="co">#←is `n` in range [10..20]?</span></span>
<span id="cb64-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb64-5" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"n is in range!"</span>)</span>
<span id="cb64-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb64-6" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"Bye now!);</span></span></code></pre></div>
<h4 id="syntax-if-else-statement"><strong>Syntax</strong> — If-Else Statement</h4>
<div class="stx">
<ul>
<li><strong><code>if</code></strong> <span class="stx">bool-expr</span> <strong><code>:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span><br>
<strong><code>else:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span></li>
</ul>
</div>
<h6 id="examples-using-the-if-statement-1"><em>Examples using the if statement</em></h6>
<div class="sourceCode" id="cb65"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb65-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb65-1" aria-hidden="true" tabindex="-1"></a>n <span class="op">=</span> <span class="bu">int</span>(<span class="bu">input</span>(<span class="st">"Number?: "</span>))</span>
<span id="cb65-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb65-2" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="dv">10</span> <span class="op">&lt;=</span> n <span class="op">&lt;=</span> <span class="dv">20</span>:               <span class="co">#←is `n` in range [10..20]?</span></span>
<span id="cb65-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb65-3" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"n is in range!"</span>)</span>
<span id="cb65-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb65-4" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"Bye now!"</span>)<span class="op">;</span></span>
<span id="cb65-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb65-5" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb65-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb65-6" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"n is not in range."</span>)</span>
<span id="cb65-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb65-7" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"Sad."</span>)</span></code></pre></div>
<h2 id="blockscompound-statements">Blocks/Compound Statements</h2>
<p>Unlike other languages, Python do not use block delimiters. A <em>block</em> or <em>compound statement</em> is still a statement, but may ‘contain’ multiple other statements.</p>
<p>A block in Python, is always introduced with a <strong><code>:</code></strong> (colon) character. The content of the block <strong>must</strong> be indented from the line that caused you to write the colon. It must be consistently indented (same number of spaces before every statement). The recommended indentation size, is 4 spaces.</p>
<h6 id="examples-of-blocks-for-if-and-if-else-statements"><em>Examples of blocks for if and if-else statements</em></h6>
<div class="sourceCode" id="cb66"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb66-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb66-1" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">True</span>:</span>
<span id="cb66-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb66-2" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"TRUE: First statement in block"</span>)</span>
<span id="cb66-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb66-3" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"TRUE: Second statement in block"</span>)</span>
<span id="cb66-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb66-4" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"TRUE: Third statement in block"</span>)</span>
<span id="cb66-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb66-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb66-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb66-6" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">True</span>:</span>
<span id="cb66-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb66-7" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"TRUE: First statement in block"</span>)</span>
<span id="cb66-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb66-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"First statement after `if`"</span>)</span>
<span id="cb66-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb66-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"Second statement after `if`"</span>)</span>
<span id="cb66-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb66-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb66-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb66-11" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">False</span>:</span>
<span id="cb66-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb66-12" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"TRUE: First statement in block"</span>)</span>
<span id="cb66-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb66-13" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"TRUE: Second statement in block"</span>)</span>
<span id="cb66-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb66-14" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"TRUE: Third statement in block"</span>)</span>
<span id="cb66-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb66-15" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb66-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb66-16" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"FALSE: First statement in block"</span>)</span>
<span id="cb66-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb66-17" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"FALSE: Second statement in block"</span>)</span>
<span id="cb66-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb66-18" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"FALSE: Third statement in block"</span>)</span></code></pre></div>
<h2 id="do-nothingno-opnull-statement">Do-Nothing/No-Op/Null Statement</h2>
<p>Sometimes the syntax of a language require a statement, but you have nothing useful to do or say. In such cases, a <em>null statement</em> can be useful. In Python, this is represented with the <strong><code>pass</code></strong> keyword. It is sometimes used as a reminder to yourself, that you still need to write some code.</p>
<h6 id="example-of-a-null-statement"><em>Example of a null statement</em></h6>
<div class="sourceCode" id="cb67"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb67-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb67-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> func ():</span>
<span id="cb67-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb67-2" aria-hidden="true" tabindex="-1"></a>   <span class="cf">pass</span>                         <span class="co">#←must still write code here.</span></span>
<span id="cb67-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb67-3" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">False</span>:                       <span class="co">#←if condition is `False`...</span></span>
<span id="cb67-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb67-4" aria-hidden="true" tabindex="-1"></a>   <span class="cf">pass</span>                         <span class="co"># do ‘nothing’</span></span>
<span id="cb67-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb67-5" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:                           <span class="co"># else</span></span>
<span id="cb67-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb67-6" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"FALSE"</span>)               <span class="co"># do something.</span></span></code></pre></div>
<h2 id="conditionalselection-statements">Conditional/Selection Statements</h2>
<p>Before we can discuss these statements, we must understand how Python treats ‘truth’ (whether a value is <code>False</code> or <code>True</code>).</p>
<h3 id="conditional-expression">Conditional Expression</h3>
<p>We only mention this syntax here, because it follows the basic syntax of the <code>if</code>-<code>else</code> statement, but it is absolutely not a statement, but an <span class="stx">expr</span>ession that <strong>results</strong> in a value. We remind you that statements do not result in values.</p>
<h4 id="syntax-if-expression"><strong>Syntax</strong> — If-Expression</h4>
<div class="stx">
<ul>
<li><span class="stx">true-expr</span> <strong><code>if</code></strong> <span class="stx">bool-expr</span> <strong><code>else</code></strong> <span class="stx">false-expr</span></li>
</ul>
</div>
<p>This basically means that the if-expression will result in the <span class="stx">true-expr</span> value, if the <span class="stx">bool-expr</span> value is <code>True</code>, and in the <span class="stx">false-expr</span> value, if the <span class="stx">bool-expr</span> value is <code>False</code>.</p>
<h6 id="example-using-the-if-expression"><em>Example using the if-expression</em></h6>
<div class="sourceCode" id="cb68"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb68-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb68-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="dv">10</span> <span class="cf">if</span> <span class="va">True</span> <span class="cf">else</span> <span class="dv">20</span>)       <span class="co">#⇒10 </span></span>
<span id="cb68-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb68-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="dv">10</span> <span class="cf">if</span> <span class="va">False</span> <span class="cf">else</span> <span class="dv">20</span>)      <span class="co">#⇒20</span></span></code></pre></div>
<h3 id="the-if-else-if-or-if-elif-statement">The If-Else-If or If-Elif Statement</h3>
<p>Sometimes, we want to test <em>multiple</em> condition, and execute specific code for the first condition that is <code>True</code>. For that purpose, Python provide the <code>elif</code> keyword, which can be used as an option clause in the <code>if</code> statement. We sometimes call this a ‘multi-way select’ statement: only <em>one</em> of the <span class="stx">block</span>s are executed.</p>
<h4 id="syntax-if-else-statement-1"><strong>Syntax</strong> — If-Else Statement</h4>
<div class="stx">
<ul>
<li><strong><code>if</code></strong> <span class="stx">bool-expr</span><sub>1</sub> <strong><code>:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span><br>
<strong><code>elif</code></strong> <span class="stx">bool-expr</span><sub>2</sub> <strong><code>:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span><br>
···<br>
<strong><code>else:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span></li>
</ul>
</div>
<p>Like before, the <strong><code>else</code></strong> clause is optional, and you can have any number of <code>elif</code> clauses.</p>
<h6 id="example-using-an-if-elif-else-statement"><em>Example using an if-elif-else statement</em></h6>
<div class="sourceCode" id="cb69"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb69-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb69-1" aria-hidden="true" tabindex="-1"></a>score <span class="op">=</span> <span class="bu">float</span>(<span class="bu">input</span>(<span class="st">"Your score?: "</span>))</span>
<span id="cb69-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb69-2" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> score <span class="op">&gt;</span> <span class="dv">90</span>:</span>
<span id="cb69-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb69-3" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"Cum Laude"</span>)</span>
<span id="cb69-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb69-4" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> score <span class="op">&gt;</span> <span class="dv">80</span>:</span>
<span id="cb69-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb69-5" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"Distinction"</span>)</span>
<span id="cb69-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb69-6" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> score <span class="op">&gt;</span> <span class="dv">70</span>:</span>
<span id="cb69-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb69-7" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"Not too bad"</span>)</span>
<span id="cb69-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb69-8" aria-hidden="true" tabindex="-1"></a><span class="cf">elif</span> score <span class="op">&gt;</span> <span class="dv">60</span>:</span>
<span id="cb69-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb69-9" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"Try harder"</span>)</span>
<span id="cb69-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb69-10" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb69-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb69-11" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"Get out"</span>)</span></code></pre></div>
<h2 id="iterationloop-statements">Iteration/Loop Statements</h2>
<p>Any non-trivial Python program will require a way to <em>repeat</em> statements. We call this ‘looping’ or better: <em>iteration</em>. Python basically only provides two iterations statements: the <em>while loop</em>, and the <em>for loop</em>.</p>
<h3 id="while-loop">While Loop</h3>
<p>The <strong><code>while</code></strong> statement will repeatedly execute the <span class="stx">block</span> part, ‘while the <span class="stx">bool-expr</span> remains <code>True</code>’, or can be treated as logically <code>True</code> based on the <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#truthiness">Truthiness</a> rules.</p>
<h4 id="syntax-while-statement"><strong>Syntax</strong> — While Statement</h4>
<div class="stx">
<ul>
<li><strong><code>while</code></strong> <span class="stx">bool-expr</span> <strong><code>:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span></li>
<li><strong><code>while</code></strong> <span class="stx">bool-expr</span> <strong><code>:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span><br>
<strong><code>else:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span><br>
</li>
</ul>
</div>
<h6 id="while-loop-examples"><em>While loop examples</em></h6>
<div class="sourceCode" id="cb70"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb70-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb70-1" aria-hidden="true" tabindex="-1"></a>i <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb70-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb70-2" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> i <span class="op">&lt;</span> <span class="dv">10</span>:</span>
<span id="cb70-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb70-3" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(i)</span>
<span id="cb70-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb70-4" aria-hidden="true" tabindex="-1"></a>   i <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb70-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb70-5" aria-hidden="true" tabindex="-1"></a>scores <span class="op">=</span> [<span class="dv">11</span>, <span class="dv">22</span>, <span class="dv">33</span>, <span class="dv">44</span>]</span>
<span id="cb70-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb70-6" aria-hidden="true" tabindex="-1"></a>i <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb70-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb70-7" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> i <span class="op">&lt;</span> <span class="bu">len</span>(scores):</span>
<span id="cb70-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb70-8" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="ss">f"Score #</span><span class="sc">{i</span><span class="op">+</span><span class="dv">1</span><span class="sc">}</span><span class="ss">: </span><span class="sc">{</span>scores[i]<span class="sc">}</span><span class="ss">"</span>)</span>
<span id="cb70-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb70-9" aria-hidden="true" tabindex="-1"></a>   i <span class="op">+=</span> <span class="dv">1</span></span></code></pre></div>
<p>We generally use the <code>while</code> loop when the number of iterations required is unknown beforehand. If we <em>do</em> know the number of iterations required, we should rather use the <strong><code>for</code></strong> loop below.</p>
<h3 id="for-loop">For Loop</h3>
<h4 id="syntax-for-loop-statement"><strong>Syntax</strong> — For Loop Statement</h4>
<div class="stx">
<ul>
<li><strong><code>for</code></strong> <span class="stx">ident</span><sub>A</sub> <span class="opt"><strong><code>,</code></strong> <span class="stx">ident</span><sub>B</sub>…</span> <strong><code>in</code></strong> <span class="stx">iterable</span> <strong><code>:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span><br>
</li>
<li><strong><code>for</code></strong> <span class="stx">ident</span><sub>A</sub> <span class="opt"><strong><code>,</code></strong> <span class="stx">ident</span><sub>B</sub>…</span> <strong><code>in</code></strong> <span class="stx">iterable</span> <strong><code>:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span><br>
<strong><code>else:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span><br>
</li>
</ul>
</div>
<h6 id="for-loop-examples-with-iterables"><em>For loop examples with iterables</em></h6>
<div class="sourceCode" id="cb71"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb71-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb71-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">10</span>):</span>
<span id="cb71-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb71-2" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(i)</span>
<span id="cb71-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb71-3" aria-hidden="true" tabindex="-1"></a>scores <span class="op">=</span> [<span class="dv">11</span>, <span class="dv">22</span>, <span class="dv">33</span>, <span class="dv">44</span>]</span>
<span id="cb71-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb71-4" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> s <span class="kw">in</span> scores:</span>
<span id="cb71-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb71-5" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="ss">f"</span><span class="sc">{</span>scores[i]<span class="sc">}</span><span class="ss">"</span>)</span>
<span id="cb71-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb71-6" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="bu">len</span>(scores)): </span>
<span id="cb71-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb71-7" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="ss">f"Score #</span><span class="sc">{i</span><span class="op">+</span><span class="dv">1</span><span class="sc">}</span><span class="ss">: </span><span class="sc">{</span>scores[i]<span class="sc">}</span><span class="ss">"</span>)</span>
<span id="cb71-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb71-8" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i, s <span class="kw">in</span> <span class="bu">enumerate</span>(scores):</span>
<span id="cb71-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb71-9" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="ss">f"Score #</span><span class="sc">{i</span><span class="op">+</span><span class="dv">1</span><span class="sc">}</span><span class="ss">: </span><span class="sc">{s}</span><span class="ss">"</span>)</span></code></pre></div>
<h3 id="loop-execution-transfer">Loop Execution Transfer</h3>
<p>Python allows us to ‘interrupt’ the normal iteration sequence inside the <code>while</code> and <code>for</code> loops. An <em>execution transfer</em> statement changes the normal order in which statements are executed. This means no statement after an execution transfer will ever execute.</p>
<p>The first, is the <strong><code>break</code></strong> statement: it causes execution to ‘leave’ or ‘jump out of’ a loop statement. It only jumps out of the enclosing loop, and not out of multiple nested loops.</p>
<p>The second, is the <strong><code>continue</code></strong> statement: it immediately ‘performs the next iteration’ prematurely. Effectively, this ‘jumps’ to the beginning of the loop.</p>
<p>Neither of these are useful outside of a condition (<strong><code>if</code></strong>) block. It also leads to common idioms where programmers write an infinite loop with: <code>while True:</code>, and then inside the loop's <span class="stx">block</span> have a condition that may <strong><code>break</code></strong> out of the loop.</p>
<p>The <code>break</code> and <code>continue</code> statements are only legal inside the <span class="stx">block</span> part of iteration statements.</p>
<h3 id="loop-else-clauses">Loop Else Clauses</h3>
<p>In Python, iteration statements may have an optional <strong><code>else:</code></strong> clause. The <span class="stx">block</span> after the <strong><code>else:</code></strong>, will only execute if the loop was <strong>not</strong> terminated as the result of a <strong><code>break</code></strong> statement. This can simplify some code patterns.</p>
<h2 id="exceptions">Exceptions</h2>
<p>Many languages, <a href="https://docs.python.org/3/library/exceptions.html" title="Python Docs — Exceptions">including Python</a>, support <a href="https://en.m.wikipedia.org/wiki/Exception_handling" title="Wikipedia — Exception handling">exception handling</a> features. This represents an abstraction where runtime faults can be ‘raised’ or ‘thrown’ and then ‘caught’ or ‘handled’ at some point <em>higher up</em> the calling chain.</p>
<p>Effectively, raising an exeception, is a non-local <em>execution transfer</em> statement; no code after a <code>raise</code> statement will execute.</p>
<p>Uncaught exceptions terminate a Python script with some descriptive message. Pro­fes­sion­al code should never let this happen. Exceptions raised by library modules are documented. If your use such functions, you must ensure that you are prepared for that eventuality.</p>
<h4 id="syntax-basic-exception-handling-blocks"><strong>Syntax</strong> — <strong><em>Basic Exception Handling Blocks</em></strong></h4>
<div class="stx">
<ul>
<li><p><strong><code>try:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span> <span class="math inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>←</mo></mrow><annotation encoding="application/x-tex">\leftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.36687em; vertical-align: 0em;"></span><span class="mrel">←</span></span></span></span></span> <em>may raise an exception</em>.<br>
<strong><code>except:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span> <span class="math inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>←</mo></mrow><annotation encoding="application/x-tex">\leftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.36687em; vertical-align: 0em;"></span><span class="mrel">←</span></span></span></span></span> <em>‘handle’ the exception</em>.</p></li>
<li><p><strong><code>try:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span> <span class="math inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>←</mo></mrow><annotation encoding="application/x-tex">\leftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.36687em; vertical-align: 0em;"></span><span class="mrel">←</span></span></span></span></span> <em>may raise an exception</em>.<br>
<strong><code>finally:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span> <span class="math inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>←</mo></mrow><annotation encoding="application/x-tex">\leftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.36687em; vertical-align: 0em;"></span><span class="mrel">←</span></span></span></span></span> <em>code that always executes.</em></p></li>
<li><p><strong><code>try:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span> <span class="math inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>←</mo></mrow><annotation encoding="application/x-tex">\leftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.36687em; vertical-align: 0em;"></span><span class="mrel">←</span></span></span></span></span> <em>may raise an exception</em>.<br>
<strong><code>except</code></strong> <span class="stx">except</span> <span class="opt"><strong><code>as</code></strong> <span class="stx">ident</span></span><strong><code>:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span> <span class="math inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>←</mo></mrow><annotation encoding="application/x-tex">\leftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.36687em; vertical-align: 0em;"></span><span class="mrel">←</span></span></span></span></span> <em>‘handle’ the exception</em>.<br>
···</p></li>
<li><p><strong><code>try:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span> <span class="math inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>←</mo></mrow><annotation encoding="application/x-tex">\leftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.36687em; vertical-align: 0em;"></span><span class="mrel">←</span></span></span></span></span> <em>may raise an exception</em>.<br>
<strong><code>except</code></strong> <span class="stx">except</span> <span class="opt"><strong><code>as</code></strong> <span class="stx">ident</span></span><strong><code>:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span> <span class="math inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>←</mo></mrow><annotation encoding="application/x-tex">\leftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.36687em; vertical-align: 0em;"></span><span class="mrel">←</span></span></span></span></span> <em>‘handle’ the exception</em>.<br>
···<br>
<strong><code>finally:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span> <span class="math inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>←</mo></mrow><annotation encoding="application/x-tex">\leftarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.36687em; vertical-align: 0em;"></span><span class="mrel">←</span></span></span></span></span> <em>code that always executes.</em></p></li>
</ul>
<p><span class="stx">except</span> <span class="math inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.36687em; vertical-align: 0em;"></span><span class="mrel">⇒</span></span></span></span></span> any exception <span class="stx">type</span>.</p>
</div>
<p>If an <span class="stx">ident</span>ifier was specified, it can be converted to a string; this will yield some error message that the code that raised the exeption, intialised the exeception object with. Several <code>except</code> clauses may appear, but each must ‘handle’ a different exception type.</p>
<p>All standard library exceptions inherit from <strong><code>Exception</code></strong>, which means that if you ‘catch’ using this type, it will also match any other exception derived from it. If <code>Exception</code> is one of several <code>except</code> clauses, it must be the last clause.</p>
<p>One <code>except</code> clause may handle more than one exception:</p>
<p><span class="tab1"></span><strong><code>except (</code></strong><span class="stx">except</span><sub>1</sub><strong><code>,</code></strong> <span class="stx">except</span><sub>2</sub>…<strong><code>)</code></strong> <span class="opt"><strong><code>as</code></strong> <span class="stx">ident</span></span><strong><code>:</code></strong></p>
<p>Exceptions can be raised, with the <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-raise-stmt" title="Python Docs — Simple Statements # raise Statement"><strong><code>raise</code></strong> <span class="stx">except</span><strong><code>(</code></strong><span class="opt"><span class="stx">string</span></span><strong><code>)</code></strong> statement</a>. If a string argument is provided, this will become the <em>error message</em> when the exception object is converted to a string.</p>
<h6 id="raising-an-exception-with-an-error-message"><em>Raising an exception with an error message</em></h6>
<div class="sourceCode" id="cb72"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb72-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb72-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb72-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb72-2" aria-hidden="true" tabindex="-1"></a><span class="cf">try</span>:</span>
<span id="cb72-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb72-3" aria-hidden="true" tabindex="-1"></a>   width <span class="op">=</span> <span class="bu">int</span>(<span class="bu">input</span>(<span class="st">"Integer?: "</span>))</span>
<span id="cb72-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb72-4" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> width <span class="op">&lt;</span> <span class="dv">0</span>:</span>
<span id="cb72-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb72-5" aria-hidden="true" tabindex="-1"></a>      <span class="cf">raise</span> <span class="pp">ValueError</span>(<span class="st">"Width must be positive!"</span>)</span>
<span id="cb72-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb72-6" aria-hidden="true" tabindex="-1"></a>   <span class="co"># do calculations with `width`...</span></span>
<span id="cb72-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb72-7" aria-hidden="true" tabindex="-1"></a><span class="cf">except</span> <span class="pp">ValueError</span> <span class="im">as</span> ex:</span>
<span id="cb72-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb72-8" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"ERROR: </span><span class="sc">{ex}</span><span class="st">"</span>.<span class="bu">format</span>(ex<span class="op">=</span>ex), <span class="bu">file</span><span class="op">=</span>sys.stderr)</span></code></pre></div>
<p>If an integer value less than <code>0</code> is entered, the output will be:</p>
<pre class="output"><code>ERROR: Width must be positive!</code></pre>
<p>If an <em>invalid</em> integer value is entered, e.g. <code>abc</code>, the output will be a standard Python message:</p>
<pre class="output"><code>ERROR: invalid literal for int() with base 10: 'abc'</code></pre>
<p>If you want a custom message instead, you should create a user-defined exception class by inheriting from <code>Exception</code>:</p>
<h6 id="custom-exception-class"><em>Custom exception class</em></h6>
<div class="sourceCode" id="cb75"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb75-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb75-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb75-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb75-2" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> NegativeWidth(<span class="pp">Exception</span>): <span class="cf">pass</span></span>
<span id="cb75-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb75-3" aria-hidden="true" tabindex="-1"></a><span class="cf">try</span>:</span>
<span id="cb75-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb75-4" aria-hidden="true" tabindex="-1"></a>   width <span class="op">=</span> <span class="bu">int</span>(<span class="bu">input</span>(<span class="st">"Integer?: "</span>))</span>
<span id="cb75-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb75-5" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> width <span class="op">&lt;</span> <span class="dv">0</span>:</span>
<span id="cb75-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb75-6" aria-hidden="true" tabindex="-1"></a>      <span class="cf">raise</span> NegativeWidth(<span class="st">"Width must be positive!"</span>)</span>
<span id="cb75-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb75-7" aria-hidden="true" tabindex="-1"></a>   <span class="co"># do calculations with `width`...</span></span>
<span id="cb75-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb75-8" aria-hidden="true" tabindex="-1"></a><span class="cf">except</span> NegativeWidth <span class="im">as</span> ex:</span>
<span id="cb75-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb75-9" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"ERROR: </span><span class="sc">{ex}</span><span class="st">"</span>.<span class="bu">format</span>(ex<span class="op">=</span>ex), <span class="bu">file</span><span class="op">=</span>sys.stderr)</span>
<span id="cb75-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb75-10" aria-hidden="true" tabindex="-1"></a><span class="cf">except</span> <span class="pp">ValueError</span>:</span>
<span id="cb75-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb75-11" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"ERROR: Invalid non-integer value entered."</span>, <span class="bu">file</span><span class="op">=</span>sys.stderr)</span></code></pre></div>
<p>If you now enter <code>abc</code>, for example, the output will be:</p>
<pre class="output"><code>ERROR: Invalid non-integer value entered.</code></pre>
<h1 id="functions">Functions</h1>
<p>Functions are blocks of code created with the <code>def</code> keyword. Just like assignment, <code>def</code> creates a name, and associates the name with the code. Multiple names can reference the same function, just like multiple names can store references to the same list, tuple, dictionary, etc.</p>
<p>We create functions to aid readability, and to facilitate reuse of code, without having to physically repeat the code. Functions are callable, and can be passed arguments, as long as the function has made provision for this by defining parameters. Functions can be recursive.</p>
<p>A function must have at least one statement, even if it is just a null statement: <code>pass</code>.</p>
<h4 id="syntax-function-definition-syntax"><strong>Syntax</strong> — <strong><em>Function Definition Syntax</em></strong></h4>
<div class="stx">
<ul>
<li><p><strong><code>def</code></strong> <span class="stx">ident</span> <strong><code>(</code></strong><span class="opt"><span class="stx">param</span><sub>1</sub><span class="opt">&nbsp;<strong><code>,</code></strong> <span class="stx">param</span><sub>2</sub></span>…</span><strong><code>) :</code></strong><br>
<span class="tab1"></span><span class="opt"><strong><code>"""</code></strong><span class="stx">doc-string</span>…<strong><code>"""</code></strong></span><span class="asterisk"></span><br>
<span class="tab1"></span><span class="stx">block</span> <span class="alt"></span> <strong><code>pass</code></strong></p></li>
<li><p><strong><code>def</code></strong> <span class="stx">ident</span> <strong><code>(</code></strong><span class="opt"><span class="stx">param</span><sub>1</sub><span class="opt">&nbsp;<strong><code>,</code></strong> <span class="stx">param</span><sub>2</sub></span>…</span><strong><code>) :</code></strong><br>
<span class="tab1"></span><span class="opt"><strong><code>"""</code></strong><span class="stx">doc-string</span>…<strong><code>"""</code></strong></span><span class="asterisk"></span><br>
<span class="tab1"></span><span class="stx">statement</span><sub>*</sub><br>
<span class="tab1"></span><strong><code>return</code></strong><span class="opt">&nbsp;<span class="stx">expr</span></span></p></li>
</ul>
</div>
<p><span class="asterisk"></span> Unfortunately, Python does not <em>require</em> a <span class="stx">doc-string</span>, but it should be considered mandatory, and thus represents good programming practice when present.</p>
<p>Also be sure to notice that the <span class="stx">expr</span> part after <code>return</code> is optional, in which case the function will still immediately return to the caller, but the return value, if used, will be <strong><code>None</code></strong>.</p>
<h2 id="documentation">Documentation</h2>
<p>Let us get the pain out of the way first… As dictated by good coding convention, functions should be documented. As a professional, we know you appreciate the im­por­tance of this practice. Conventionally, in Python, this involves a <strong>docstring</strong>, which is a triple-quoted string literal immediately following the function header. The triple quotes is a convention.</p>
<p>See <a href="http://www.sphinx-doc.org/en/stable/index.html" title="Sphinx Home">Sphinx</a> for further conventions on documenting Python code.</p>
<h6 id="simple-function-features"><em>Simple function features</em></h6>
<div class="sourceCode" id="cb77"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb77-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb77-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> foo ():                    <span class="co">#←function header. no parameters.</span></span>
<span id="cb77-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb77-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""A documented function. It should be brief. Maybe not this brief."""</span></span>
<span id="cb77-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb77-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">pass</span>                       <span class="co">#←function "body" or "block"</span></span>
<span id="cb77-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb77-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb77-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb77-5" aria-hidden="true" tabindex="-1"></a>goo <span class="op">=</span> foo                      <span class="co">#←associate `goo` with same code as `foo`.</span></span>
<span id="cb77-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb77-6" aria-hidden="true" tabindex="-1"></a>goo()<span class="op">;</span> foo()                   <span class="co">#←call the same code, with different names.</span></span>
<span id="cb77-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb77-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb77-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb77-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(foo.__doc__)             <span class="co">#←print the `foo` documentation.</span></span>
<span id="cb77-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb77-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">'-'</span> <span class="op">*</span> <span class="bu">len</span>(foo.__doc__))</span>
<span id="cb77-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb77-10" aria-hidden="true" tabindex="-1"></a><span class="bu">help</span>(foo)                      <span class="co">#←use a shell to print the docs.</span></span>
<span id="cb77-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb77-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb77-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb77-12" aria-hidden="true" tabindex="-1"></a>foo <span class="op">=</span> <span class="dv">123</span>                      <span class="co">#←`foo` is just a name; it now points to a `int`.</span></span></code></pre></div>
<p>This will produce the following output:</p>
<pre class="output"><code>A documented function. It should be brief. Maybe not this brief.
----------------------------------------------------------------
Help on function foo in module __main__:

foo()
    A documented function. It should be brief. Maybe not this brief.</code></pre>
<h2 id="function-returns">Function Returns</h2>
<p>Functions without explicit <code>return</code> statements, return <code>None</code> automatically. Multiple <code>return</code> state­ments may appear in a function, as long as you remember that no further code in the function will execute — it is an execution transfer statement, just like <code>break</code> and <code>continue</code>.</p>
<p>A function can return anything it likes. It can even return different types, at different times, as long as the caller can "handle" it. A <strong><code>return</code></strong> statement without an <span class="stx">expr</span> is also legal.</p>
<h6 id="function-returning-a-result"><em>Function returning a result</em></h6>
<div class="sourceCode" id="cb79"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb79-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb79-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> goo ():</span>
<span id="cb79-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb79-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb79-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb79-3" aria-hidden="true" tabindex="-1"></a><span class="co">    Function which takes no arguments, but does return a value. Not a</span></span>
<span id="cb79-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb79-4" aria-hidden="true" tabindex="-1"></a><span class="co">    very exciting result, just “the answer”</span></span>
<span id="cb79-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb79-5" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb79-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb79-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">42</span></span>
<span id="cb79-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb79-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb79-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb79-8" aria-hidden="true" tabindex="-1"></a>result <span class="op">=</span> goo()</span>
<span id="cb79-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb79-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(result, end<span class="op">=</span><span class="st">', '</span>)<span class="op">;</span> <span class="bu">print</span>(goo())</span></code></pre></div>
<p>This will produce the following output:</p>
<pre class="output"><code>42, 42</code></pre>
<p>Wherever the function ‘<code>goo</code>’ is called, the call expression will <em>result</em> in whatever the function <code>return</code>ed. You do not necessarily have to assign its return value to a variable, unless you want to save it for some rea­son. Assigning the return value is actually very common — if the return value was not per­ti­nent, there would be no need for the function to return it, and probably little need for you to call the function.</p>
<p>A function that has multiple <code>return</code> statements is shown below. For fun, it takes an argument, but that is not the focus of the example. Notice the use of the <a href="https://docs.python.org/3/reference/expressions.html#is" title="Python Docs — Expressions # Identity comparisons"><code>is</code> operator</a>; you may not have been aware of it.</p>
<h6 id="function-containing-multiple-return-statements"><em>Function containing multiple return statements</em></h6>
<div class="sourceCode" id="cb81"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb81-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb81-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> hoo (arg):</span>
<span id="cb81-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb81-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb81-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb81-3" aria-hidden="true" tabindex="-1"></a><span class="co">    Function having multiple `return` statements. It has little purpose other</span></span>
<span id="cb81-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb81-4" aria-hidden="true" tabindex="-1"></a><span class="co">    than to illustrate a function which has multiple `return` statements.</span></span>
<span id="cb81-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb81-5" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb81-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb81-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">type</span>(arg) <span class="kw">is</span> <span class="bu">int</span>: <span class="cf">return</span> <span class="st">"It's an integer!"</span></span>
<span id="cb81-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb81-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">type</span>(arg) <span class="kw">is</span> <span class="bu">float</span>: <span class="cf">return</span> <span class="st">"It's a float!"</span></span>
<span id="cb81-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb81-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="st">"Disappointment. Wanted a number."</span></span>
<span id="cb81-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb81-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb81-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb81-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(hoo(<span class="dv">123</span>))      <span class="op">;</span>   <span class="bu">print</span>(hoo(arg<span class="op">=</span><span class="dv">123</span>))  </span>
<span id="cb81-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb81-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(hoo(<span class="fl">1.23</span>))     <span class="op">;</span>   <span class="bu">print</span>(hoo(arg<span class="op">=</span><span class="fl">1.23</span>)) </span>
<span id="cb81-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb81-12" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(hoo(<span class="st">"ABC"</span>))    <span class="op">;</span>   <span class="bu">print</span>(hoo(arg<span class="op">=</span><span class="st">"ABC"</span>))</span></code></pre></div>
<p>This will produce the following output:</p>
<pre class="output"><code>It's an integer!
It's a float!
Disappointment. Wanted a number.</code></pre>
<h2 id="parameters">Parameters</h2>
<p>Functions can be defined with named parameters. They are, for all in­tents and pur­pos­es, va­ri­ab­les, and their scope is local to the function body. Any number of parameters can be defined, but for practical purposes, you should probably restrain yourself.</p>
<h3 id="positional-required-parameters">Positional / Required Parameters</h3>
<p>By default and unless additional syntax is used, any parameters that have been defined <em>must</em> be passed. If a function defines 3 parameters, for example, 3 arguments must be passed — they are <em>required parameters</em>. The ar­gu­ments are assigned to the parameter names in the order they were defined, i.e., positionally.</p>
<h6 id="parameters-with-arguments-passed-positionally"><em>Parameters, with arguments passed positionally</em></h6>
<div class="sourceCode" id="cb83"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb83-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb83-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> joo(a, b):</span>
<span id="cb83-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb83-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb83-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb83-3" aria-hidden="true" tabindex="-1"></a><span class="co">    Function taking 2 mandatory parameters. Must be called with two arguments,</span></span>
<span id="cb83-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb83-4" aria-hidden="true" tabindex="-1"></a><span class="co">    assigned consecutively (positionally) to `a`, then `b`. The argument values</span></span>
<span id="cb83-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb83-5" aria-hidden="true" tabindex="-1"></a><span class="co">    passed, are simply printed out by this function, so the types of values</span></span>
<span id="cb83-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb83-6" aria-hidden="true" tabindex="-1"></a><span class="co">    passed are irrelevant.</span></span>
<span id="cb83-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb83-7" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb83-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb83-8" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"a = '</span><span class="sc">{}</span><span class="st">'"</span>.<span class="bu">format</span>(a))</span>
<span id="cb83-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb83-9" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"b = '</span><span class="sc">{}</span><span class="st">'"</span>.<span class="bu">format</span>(b))</span>
<span id="cb83-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb83-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb83-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb83-11" aria-hidden="true" tabindex="-1"></a>joo(<span class="dv">123</span>, <span class="st">"ABC"</span>)</span>
<span id="cb83-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb83-12" aria-hidden="true" tabindex="-1"></a>joo([<span class="dv">11</span>, <span class="dv">22</span>, <span class="dv">33</span>], (<span class="st">'AA'</span>, <span class="dv">44</span>, <span class="fl">55.66</span>))</span></code></pre></div>
<p>This will produce the following output:</p>
<pre class="output"><code>a = '123'
b = 'ABC'
a = '[11, 22, 33]'
b = '('AA', 44, 55.66)'</code></pre>
<p>When a function is called, the arguments can be <em>named</em>. This is referred to as <strong><a href="https://docs.python.org/3/glossary.html#term-argument" title="Python Docs — Glossary — arguments">keyword arguments</a></strong>. For positional parameters like the <code>joo</code> function above, when <em>all</em> arguments are nam­ed, it does not matter in which order they appear in the function call.</p>
<h6 id="passing-arguments-as-keyword-arguments"><em>Passing arguments as “keyword arguments”</em></h6>
<div class="sourceCode" id="cb85"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb85-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb85-1" aria-hidden="true" tabindex="-1"></a>joo(b <span class="op">=</span> <span class="st">"ABC"</span>, a <span class="op">=</span> <span class="dv">123</span>)<span class="op">;</span>            <span class="co">#←spaces around `=` are optional.</span></span></code></pre></div>
<p>This will produce the following output:</p>
<pre class="output"><code>a = '123'
b = 'ABC'</code></pre>
<p>Note that while you can pass the first <em>n</em> arguments positionally and the rest by name, the reverse is not true: you cannot pass some arguments by name and then try and pass the remainder po­si­tion­al­ly.</p>
<h3 id="optional-default-parameters">Optional / Default Parameters</h3>
<p>Python provides syntax for defining parameters with default values. From the caller's per­spec­tive, this means that passing arguments for those parameters is optional. However, you can only provide default values for parameters starting from the right of the parameter list, and you can­not skip any. Un­less named, arguments can also only be omitted from the right. The following is illegal, because <code>parm3</code> must also be given a default value, if we insist on <code>parm2</code> having a default (or we must change the order):</p>
<h6 id="mixing-positional-and-keyword-arguments"><em>Mixing positional and keyword arguments</em></h6>
<div class="sourceCode" id="cb87"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb87-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb87-1" aria-hidden="true" tabindex="-1"></a><span class="co"># This would be illegal:</span></span>
<span id="cb87-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb87-2" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> f (parm1, parm2<span class="op">=</span><span class="dv">11</span>, parm3):...</span>
<span id="cb87-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb87-3" aria-hidden="true" tabindex="-1"></a><span class="co"># This would be legal:</span></span>
<span id="cb87-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb87-4" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> f (pos1, pos2<span class="op">=</span><span class="dv">11</span>, pos3<span class="op">=</span><span class="dv">22</span>):...</span></code></pre></div>
<p>An example is our function <code>joo</code>, that can take <em>up to</em> 3 arguments. The last two arguments have default values and are thus optional. We have more than 7 options when passing arguments. All the calls at the end of the example have the same effect.</p>
<h6 id="various-examples-of-passing-arguments"><em>Various examples of passing arguments</em></h6>
<div class="sourceCode" id="cb88"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb88-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb88-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> joo (a, b<span class="op">=</span><span class="dv">34</span>, c<span class="op">=</span><span class="dv">56</span>):</span>
<span id="cb88-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb88-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb88-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb88-3" aria-hidden="true" tabindex="-1"></a><span class="co">    This function requires one mandatory argument for `a`. Either an</span></span>
<span id="cb88-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb88-4" aria-hidden="true" tabindex="-1"></a><span class="co">    argument for `c` can be omitted, or both `b` and `c` arguments may</span></span>
<span id="cb88-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb88-5" aria-hidden="true" tabindex="-1"></a><span class="co">    be omitted. Just omitting `b` is only possible when using named</span></span>
<span id="cb88-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb88-6" aria-hidden="true" tabindex="-1"></a><span class="co">    arguments (keyword arguments). There will always be 3 values.</span></span>
<span id="cb88-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb88-7" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb88-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb88-8" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"a=</span><span class="sc">{}</span><span class="st">, b=</span><span class="sc">{}</span><span class="st">, c=</span><span class="sc">{}</span><span class="st">"</span>.<span class="bu">format</span>(a, b, c))</span>
<span id="cb88-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb88-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb88-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb88-10" aria-hidden="true" tabindex="-1"></a>joo(<span class="dv">12</span>)<span class="op">;</span> joo(<span class="dv">12</span>, <span class="dv">34</span>)<span class="op">;</span> joo(<span class="dv">12</span>, <span class="dv">34</span>, <span class="dv">56</span>) <span class="co">#- all calls have the same result.</span></span>
<span id="cb88-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb88-11" aria-hidden="true" tabindex="-1"></a>joo(<span class="dv">12</span>, c<span class="op">=</span><span class="dv">56</span>)<span class="op">;</span> joo(c<span class="op">=</span><span class="dv">56</span>, a<span class="op">=</span><span class="dv">12</span>)        <span class="co">#</span></span>
<span id="cb88-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb88-12" aria-hidden="true" tabindex="-1"></a>joo(b<span class="op">=</span><span class="dv">34</span>, a<span class="op">=</span><span class="dv">12</span>, c<span class="op">=</span><span class="dv">56</span>)                 <span class="co">#</span></span></code></pre></div>
<p>The output for all calls will be: ‘<code>a=12, b=34, c=56</code>’.</p>
<h3 id="variable-number-of-arguments">Variable Number of Arguments</h3>
<p>A special syntax allows a parameter of a function to be a list of values. It does not matter what you pass, it will always be a list. This allows callers to call the function with a variable number of arguments. If no arguments are passed, it is effectively an empty list.</p>
<h6 id="function-with-variable-number-of-arguments"><em>Function with variable number of arguments</em></h6>
<div class="sourceCode" id="cb89"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb89-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb89-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> koo (<span class="op">*</span>args):</span>
<span id="cb89-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb89-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb89-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb89-3" aria-hidden="true" tabindex="-1"></a><span class="co">    Function can be called with no arguments, or any number of arguments.</span></span>
<span id="cb89-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb89-4" aria-hidden="true" tabindex="-1"></a><span class="co">    All the arguments will be collected into the list called `args` here.</span></span>
<span id="cb89-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb89-5" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb89-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb89-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> args:</span>
<span id="cb89-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb89-7" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">"No. of args:"</span>, <span class="bu">len</span>(args))</span>
<span id="cb89-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb89-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> i, v <span class="kw">in</span> <span class="bu">enumerate</span>(args):</span>
<span id="cb89-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb89-9" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(<span class="st">"arg #</span><span class="sc">{}</span><span class="st"> = '</span><span class="sc">{}</span><span class="st">'"</span>.<span class="bu">format</span>(i<span class="op">+</span><span class="dv">1</span>, v))</span>
<span id="cb89-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb89-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span>
<span id="cb89-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb89-11" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">"No arguments passed."</span>)</span>
<span id="cb89-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb89-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb89-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb89-13" aria-hidden="true" tabindex="-1"></a>koo()<span class="op">;</span> koo(<span class="dv">11</span>)<span class="op">;</span> koo(<span class="dv">11</span>, <span class="dv">22</span>)<span class="op">;</span> koo([<span class="dv">11</span>, <span class="dv">22</span>])</span>
<span id="cb89-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb89-14" aria-hidden="true" tabindex="-1"></a>koo([<span class="dv">11</span>, <span class="dv">22</span>], (<span class="dv">33</span>, <span class="dv">44</span>), <span class="st">"ABC"</span>, <span class="st">"DEF"</span>)</span></code></pre></div>
<p>This produces the following output:</p>
<pre class="output"><code>No arguments passed.
No. of args: 1
arg #1 = '11'
No. of args: 2
arg #1 = '11'
arg #2 = '22'
No. of args: 1
arg #1 = '[11, 22]'
No. of args: 4
arg #1 = '[11, 22]'
arg #2 = '(33, 44)'
arg #3 = 'ABC'
arg #4 = 'DEF'</code></pre>
<p>The <code>*arg</code> parameter will <em>consume</em> all arguments. Each argument becomes an element in the list. A function can only have one such parameter. If you have additional arguments, they must either (a) be compulsory and precede the list, or (b) if optional, be defined after the list, and can only be passed as keyword arguments <em>after</em> the list.</p>
<h6 id="function-with-a-variable-parameter-and-namedoptional-parameters"><em>Function with a variable parameter and named/optional parameters</em></h6>
<div class="sourceCode" id="cb91"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb91-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb91-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> loo (<span class="op">*</span>args, opta<span class="op">=</span><span class="dv">12</span>, optb<span class="op">=</span><span class="va">None</span>):</span>
<span id="cb91-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb91-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb91-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb91-3" aria-hidden="true" tabindex="-1"></a><span class="co">    Function can be called with no arguments, or any number of arguments.</span></span>
<span id="cb91-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb91-4" aria-hidden="true" tabindex="-1"></a><span class="co">    All the arguments will be collected into the list called `args` here.</span></span>
<span id="cb91-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb91-5" aria-hidden="true" tabindex="-1"></a><span class="co">    Additionally, `opta` and/or `optb` can be passed, but only as keyword</span></span>
<span id="cb91-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb91-6" aria-hidden="true" tabindex="-1"></a><span class="co">    arguments, and only after all positional arguments.</span></span>
<span id="cb91-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb91-7" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb91-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb91-8" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"No. of `args`: </span><span class="sc">{}</span><span class="st">"</span>.<span class="bu">format</span>(<span class="bu">len</span>(args)) <span class="cf">if</span> <span class="bu">len</span>(args) <span class="cf">else</span> <span class="st">"No `args`."</span>)</span>
<span id="cb91-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb91-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i, v <span class="kw">in</span> <span class="bu">enumerate</span>(args):</span>
<span id="cb91-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb91-10" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">"arg #</span><span class="sc">{}</span><span class="st"> = '</span><span class="sc">{}</span><span class="st">'"</span>.<span class="bu">format</span>(i<span class="op">+</span><span class="dv">1</span>, v))</span>
<span id="cb91-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb91-11" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"opta ="</span>, opta)</span>
<span id="cb91-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb91-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> optb <span class="kw">is</span> <span class="kw">not</span> <span class="va">None</span>:</span>
<span id="cb91-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb91-13" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">"optb ="</span>, optb)</span>
<span id="cb91-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb91-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb91-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb91-15" aria-hidden="true" tabindex="-1"></a>loo()<span class="op">;</span> loo(<span class="dv">12</span>, <span class="dv">34</span>)<span class="op">;</span> loo(optb<span class="op">=</span><span class="va">False</span>)</span>
<span id="cb91-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb91-16" aria-hidden="true" tabindex="-1"></a>loo(<span class="dv">12</span>, <span class="dv">34</span>, opta<span class="op">=</span><span class="dv">45</span>, optb<span class="op">=</span><span class="dv">56</span>)</span></code></pre></div>
<p>This produces the following output:</p>
<pre class="output"><code>No `args`.
opta = 12
No. of `args`: 2
arg #1 = '12'
arg #2 = '34'
opta = 12
No `args`.
opta = 12
optb = False
No. of `args`: 2
arg #1 = '12'
arg #2 = '34'
opta = 45
optb = 56</code></pre>
<p>For interest's sake, this is how the <a href="https://docs.python.org/3/library/functions.html#print" title="Python Docs — Built-in Functions # print"><code>print</code> function</a> has been defined (with different parameter names, of course).</p>
<h3 id="keyword-dictionary-parameters">Keyword Dictionary Parameters</h3>
<p>Just like <code>*args</code> provides for a <a href="https://docs.python.org/3/library/stdtypes.html#list" title="Python Docs — Standard Types — list"><code>list</code> type</a> parameter, it is possible to define a parameter with a leading <code>**</code>, in which case, it will always be a <a href="https://docs.python.org/3/library/functions.html#func-dict" title="Python Docs — Standard Types — dict"><code>dict</code>ionary</a>. This means that the arguments to be collected in such a parameter, must be passed as keyword arguments. It can be combined with a <code>*args</code> list argument, but then it must appear after it.</p>
<h6 id="function-with-keyword-dictionary-parameter"><em>Function with keyword dictionary parameter</em></h6>
<div class="sourceCode" id="cb93"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb93-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb93-1" aria-hidden="true" tabindex="-1"></a>moo_call_count <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb93-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb93-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb93-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb93-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> moo (<span class="op">**</span>kwd):</span>
<span id="cb93-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb93-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb93-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb93-5" aria-hidden="true" tabindex="-1"></a><span class="co">    Function that takes only keyword arguments. The `kwd` parameter is</span></span>
<span id="cb93-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb93-6" aria-hidden="true" tabindex="-1"></a><span class="co">    *always* a `dict`ionary. Always. It may be empty, which means this</span></span>
<span id="cb93-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb93-7" aria-hidden="true" tabindex="-1"></a><span class="co">    function may also be called without passing any arguments.</span></span>
<span id="cb93-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb93-8" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb93-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb93-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">global</span> moo_call_count</span>
<span id="cb93-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb93-10" aria-hidden="true" tabindex="-1"></a>    moo_call_count <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb93-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb93-11" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"moo call #"</span>, moo_call_count, <span class="st">'-'</span> <span class="op">*</span> <span class="dv">10</span>, sep<span class="op">=</span><span class="st">''</span>, end<span class="op">=</span><span class="st">''</span>)</span>
<span id="cb93-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb93-12" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">" </span><span class="sc">{}</span><span class="st"> keyword arg(s):"</span>.<span class="bu">format</span>(<span class="bu">len</span>(kwd)))</span>
<span id="cb93-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb93-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> k, v <span class="kw">in</span> kwd.items():</span>
<span id="cb93-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb93-14" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">'</span><span class="sc">{}</span><span class="st"> = </span><span class="sc">{}</span><span class="st">'</span>.<span class="bu">format</span>(k, v))</span>
<span id="cb93-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb93-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb93-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb93-16" aria-hidden="true" tabindex="-1"></a>moo()</span>
<span id="cb93-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb93-17" aria-hidden="true" tabindex="-1"></a>moo(key<span class="op">=</span><span class="st">'value'</span>)</span>
<span id="cb93-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb93-18" aria-hidden="true" tabindex="-1"></a>moo(k1<span class="op">=</span><span class="st">'val1'</span>, k2<span class="op">=</span><span class="dv">222</span>, k3<span class="op">=</span>[<span class="st">'ABC'</span>, <span class="dv">123</span>], k4<span class="op">=</span>{<span class="st">'n'</span>:<span class="dv">11</span>, <span class="st">'m'</span>:<span class="dv">44</span>})</span></code></pre></div>
<p>This produces the following output:</p>
<pre class="output"><code>moo call #1---------- 0 keyword arg(s):
moo call #2---------- 1 keyword arg(s):
key = value
moo call #3---------- 4 keyword arg(s):
k1 = val1
k2 = 222
k3 = ['ABC', 123]
k4 = {'n': 11, 'm': 44}</code></pre>
<p>As we mentioned, you can combine a variable number of arguments parameter, with keyword arguments parameter:</p>
<h6 id="function-with-variable-parameter-and-keyword-parameter"><em>Function with variable parameter, and keyword parameter</em></h6>
<div class="sourceCode" id="cb95"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb95-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb95-1" aria-hidden="true" tabindex="-1"></a>noo_call_count <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb95-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb95-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb95-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb95-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> noo (<span class="op">*</span>args, <span class="op">**</span>kwd):</span>
<span id="cb95-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb95-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb95-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb95-5" aria-hidden="true" tabindex="-1"></a><span class="co">    This function can be called with no arguments, any number of</span></span>
<span id="cb95-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb95-6" aria-hidden="true" tabindex="-1"></a><span class="co">    arguments, or just keyword arguments, or with any number of</span></span>
<span id="cb95-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb95-7" aria-hidden="true" tabindex="-1"></a><span class="co">    positional arguments, and any number of keyword arguments.</span></span>
<span id="cb95-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb95-8" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb95-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb95-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">global</span> noo_call_count</span>
<span id="cb95-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb95-10" aria-hidden="true" tabindex="-1"></a>    noo_call_count <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb95-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb95-11" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"noo call #"</span>, noo_call_count, <span class="st">'-'</span> <span class="op">*</span> <span class="dv">10</span>, sep<span class="op">=</span><span class="st">''</span>, end<span class="op">=</span><span class="st">''</span>)</span>
<span id="cb95-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb95-12" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">" </span><span class="sc">{}</span><span class="st"> keyword arg(s):"</span>.<span class="bu">format</span>(<span class="bu">len</span>(kwd)))</span>
<span id="cb95-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb95-13" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"No. of `args`: </span><span class="sc">{}</span><span class="st">"</span>.<span class="bu">format</span>(<span class="bu">len</span>(args)) <span class="cf">if</span> <span class="bu">len</span>(args) <span class="cf">else</span> <span class="st">"No `args`."</span>)</span>
<span id="cb95-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb95-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i, v <span class="kw">in</span> <span class="bu">enumerate</span>(args):</span>
<span id="cb95-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb95-15" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">"arg #</span><span class="sc">{}</span><span class="st"> = '</span><span class="sc">{}</span><span class="st">'"</span>.<span class="bu">format</span>(i<span class="op">+</span><span class="dv">1</span>, v))</span>
<span id="cb95-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb95-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> k, v <span class="kw">in</span> kwd.items():</span>
<span id="cb95-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb95-17" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">'</span><span class="sc">{}</span><span class="st"> = </span><span class="sc">{}</span><span class="st">'</span>.<span class="bu">format</span>(k, v))</span>
<span id="cb95-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb95-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb95-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb95-19" aria-hidden="true" tabindex="-1"></a>noo()<span class="op">;</span> noo(<span class="dv">11</span>, <span class="dv">22</span>, <span class="dv">33</span>)<span class="op">;</span> noo(<span class="dv">44</span>, <span class="dv">55</span>, keya<span class="op">=</span><span class="dv">66</span>, keyb<span class="op">=</span><span class="dv">77</span>)</span></code></pre></div>
<p>This produces the following output:</p>
<pre class="output"><code>noo call #1---------- 0 keyword arg(s):
No `args`.
noo call #2---------- 0 keyword arg(s):
No. of `args`: 33
arg #1 = '11'
arg #2 = '22'
arg #3 = '33'
noo call #3---------- 2 keyword arg(s):
No. of `args`: 2
arg #1 = '44'
arg #2 = '55'
keya = 66
keyb = 77</code></pre>
<h2 id="functions-as-objects">Functions as Objects</h2>
<p>It is often said, that in Python, functions are ‘<a href="https://en.wikipedia.org/wiki/First-class_function" title="Wikipedia — First-class function">first-class citizens</a>’. This simply means that functions can be manipulated as value objects, i.e., they can be associated with a name, passed as arguments, returned from functions, stored in lists / tuples / dictionaries, etc. All of which is true for <em>any</em> type of value in Python.</p>
<h3 id="function-dictionaries">Function Dictionaries</h3>
<p>A function is ‘special kind of a class’ object; each function has its own attribute dictionary, which is how Python implements scope. Only functions and classes have scope, unlike language like the C-family where a compound statement block also forms a scope.</p>
<p>Furthermore, you can add attributes to any function object, which will act much like <code>static</code> variables in the C-type languages. They are not scoped to the function, and are globally accessible. An unlike local variables, they will remain allocated, even after the function has returned.</p>
<h6 id="adding-an-attribute-to-a-function"><em>Adding an attribute to a function</em></h6>
<div class="sourceCode" id="cb97"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb97-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> func (param):</span>
<span id="cb97-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-2" aria-hidden="true" tabindex="-1"></a>   <span class="co">"""</span></span>
<span id="cb97-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-3" aria-hidden="true" tabindex="-1"></a><span class="co">   Trivial function with an attribute that remains with the function. It</span></span>
<span id="cb97-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-4" aria-hidden="true" tabindex="-1"></a><span class="co">   will add the attribute itself, if not set by its users.</span></span>
<span id="cb97-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-5" aria-hidden="true" tabindex="-1"></a><span class="co">   """</span></span>
<span id="cb97-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-6" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> <span class="kw">not</span> <span class="bu">hasattr</span>(func, <span class="st">'counter'</span>):</span>
<span id="cb97-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-7" aria-hidden="true" tabindex="-1"></a>      func.counter <span class="op">=</span> <span class="dv">0</span></span>
<span id="cb97-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-8" aria-hidden="true" tabindex="-1"></a>   <span class="cf">else</span>:</span>
<span id="cb97-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-9" aria-hidden="true" tabindex="-1"></a>      func.counter <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb97-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-10" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"func(</span><span class="sc">{p}</span><span class="st">)... </span><span class="sc">{c}</span><span class="st">"</span>.<span class="bu">format</span>(p <span class="op">=</span> param, c <span class="op">=</span> func.counter))</span>
<span id="cb97-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-11" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> <span class="bu">hasattr</span>(func, <span class="st">'other'</span>):</span>
<span id="cb97-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-12" aria-hidden="true" tabindex="-1"></a>      <span class="bu">print</span>(<span class="st">"other attribute ="</span>, func.other)</span>
<span id="cb97-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-13" aria-hidden="true" tabindex="-1"></a>      <span class="kw">del</span> func.other</span>
<span id="cb97-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb97-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-15" aria-hidden="true" tabindex="-1"></a>func(<span class="st">"ABC"</span>)<span class="op">;</span> func(<span class="st">"DEF"</span>)<span class="op">;</span> func(<span class="st">"GHI"</span>)</span>
<span id="cb97-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-16" aria-hidden="true" tabindex="-1"></a>func.other <span class="op">=</span> <span class="st">"Randomly added by code"</span></span>
<span id="cb97-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-17" aria-hidden="true" tabindex="-1"></a>func.counter <span class="op">=</span> <span class="dv">100</span></span>
<span id="cb97-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-18" aria-hidden="true" tabindex="-1"></a>func(<span class="st">"JKL"</span>)<span class="op">;</span> func(<span class="st">"MNO"</span>)<span class="op">;</span> func(<span class="st">"PQR"</span>)</span>
<span id="cb97-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-19" aria-hidden="true" tabindex="-1"></a>func.other <span class="op">=</span> <span class="st">"Recreated"</span><span class="op">;</span> func(<span class="st">"STU"</span>)</span>
<span id="cb97-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb97-20" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"func.counter ="</span>, func.counter)</span></code></pre></div>
<pre class="output"><code>func(ABC)... 0
func(DEF)... 1
func(GHI)... 2
func(JKL)... 101
other attribute = Randomly added by code
func(MNO)... 102
func(PQR)... 103
func(STU)... 104
other attribute = Recreated
func.counter = 104</code></pre>
<p>This can clearly be abused, so use this feature sparingly. The</p>
<h3 id="function-factories">Function Factories</h3>
<p>Functions that return functions, are often called function <em>factories</em> — this is not a syntax, just a common phrases meaning “functions that returns other functions”. Whether the function such a function factory returns, is a global function, or a local function, is immaterial.</p>
<h6 id="function-returning-function-objects"><em>Function returning function objects</em></h6>
<div class="sourceCode" id="cb99"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb99-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> random</span>
<span id="cb99-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-2" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> FuncFactory ():</span>
<span id="cb99-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-3" aria-hidden="true" tabindex="-1"></a>   <span class="co">"""</span></span>
<span id="cb99-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-4" aria-hidden="true" tabindex="-1"></a><span class="co">   Randomly return one of three possible functions, all defined locally.</span></span>
<span id="cb99-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-5" aria-hidden="true" tabindex="-1"></a><span class="co">   """</span></span>
<span id="cb99-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-6" aria-hidden="true" tabindex="-1"></a>   <span class="kw">def</span> F1 ():</span>
<span id="cb99-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-7" aria-hidden="true" tabindex="-1"></a>      <span class="bu">print</span>(<span class="st">"F1() called."</span>)<span class="op">;</span> <span class="cf">return</span> <span class="dv">111</span></span>
<span id="cb99-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-8" aria-hidden="true" tabindex="-1"></a>   <span class="kw">def</span> F2 ():</span>
<span id="cb99-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-9" aria-hidden="true" tabindex="-1"></a>      <span class="bu">print</span>(<span class="st">"F2() called."</span>)<span class="op">;</span> <span class="cf">return</span> <span class="dv">222</span></span>
<span id="cb99-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-10" aria-hidden="true" tabindex="-1"></a>   <span class="kw">def</span> F3 ():</span>
<span id="cb99-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-11" aria-hidden="true" tabindex="-1"></a>      <span class="bu">print</span>(<span class="st">"F3() called."</span>)<span class="op">;</span> <span class="cf">return</span> <span class="dv">333</span></span>
<span id="cb99-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb99-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-13" aria-hidden="true" tabindex="-1"></a>   n <span class="op">=</span> random.randint(<span class="dv">0</span>, <span class="dv">3</span>)</span>
<span id="cb99-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-14" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> n <span class="op">==</span> <span class="dv">0</span>: <span class="cf">return</span> F1</span>
<span id="cb99-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-15" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> n <span class="op">==</span> <span class="dv">1</span>: <span class="cf">return</span> F2</span>
<span id="cb99-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-16" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> n <span class="op">==</span> <span class="dv">2</span>: <span class="cf">return</span> F3</span>
<span id="cb99-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb99-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-18" aria-hidden="true" tabindex="-1"></a><span class="co">## call `FuncFactory` 10 times, and call the function it returns</span></span>
<span id="cb99-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-19" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">10</span>):</span>
<span id="cb99-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-20" aria-hidden="true" tabindex="-1"></a>   f <span class="op">=</span> FuncFactory()</span>
<span id="cb99-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb99-21" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"f() returned: </span><span class="sc">{}</span><span class="st">"</span>.<span class="bu">format</span>(f()))</span></code></pre></div>
<p>It might not seem useful, and the example above does not prove that it can be a useful technique, because we are focussed firstly on the fact that we <em>can</em> return functions.</p>
<h3 id="passing-functions">Passing Functions</h3>
<p>Similarly, we could pass functions as arguments to functions. When a function is passed as argument, it is often abstractly called a <em>callback</em> function, or a <em>plugin</em> function. The following example may not be useful in a practical sense, but does show that you <em>can</em> pass functions.</p>
<h6 id="function-with-callable-parameter"><em>Function with callable parameter</em></h6>
<div class="sourceCode" id="cb100"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb100-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb100-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> TakeFunc (parm):</span>
<span id="cb100-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb100-2" aria-hidden="true" tabindex="-1"></a>   <span class="co">"""</span></span>
<span id="cb100-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb100-3" aria-hidden="true" tabindex="-1"></a><span class="co">   Function expecting to be passed a function as `parm`. It will simply</span></span>
<span id="cb100-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb100-4" aria-hidden="true" tabindex="-1"></a><span class="co">   call the function passed.</span></span>
<span id="cb100-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb100-5" aria-hidden="true" tabindex="-1"></a><span class="co">   """</span></span>
<span id="cb100-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb100-6" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">'TakeFunc() calling `parm`... '</span>, end<span class="op">=</span><span class="st">''</span>)</span>
<span id="cb100-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb100-7" aria-hidden="true" tabindex="-1"></a>   parm()</span>
<span id="cb100-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb100-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb100-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb100-9" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> F ():</span>
<span id="cb100-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb100-10" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">'F() called.'</span>)<span class="op">;</span>  <span class="cf">return</span> <span class="dv">11</span></span>
<span id="cb100-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb100-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb100-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb100-12" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> G ():</span>
<span id="cb100-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb100-13" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">'G() called.'</span>)<span class="op">;</span>  <span class="cf">return</span> <span class="dv">22</span></span>
<span id="cb100-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb100-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb100-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb100-15" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> H ():</span>
<span id="cb100-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb100-16" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">'H() called.'</span>)<span class="op">;</span>  <span class="cf">return</span> <span class="dv">33</span></span>
<span id="cb100-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb100-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb100-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb100-18" aria-hidden="true" tabindex="-1"></a>TakeFunc(G)<span class="op">;</span>  TakeFunc(F)<span class="op">;</span>  TakeFunc(H)</span></code></pre></div>
<p>The following example simply defines three functions, and then creates a ‘list of functions’, by arbitrarily adding them as items in a list. Then it iterates through the list, calling each function in turn.</p>
<h6 id="playing-with-functions-as-values"><em>Playing with functions as values</em></h6>
<div class="sourceCode" id="cb101"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb101-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb101-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> f (): <span class="bu">print</span>(<span class="st">"f() called"</span>)</span>
<span id="cb101-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb101-2" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> g (): <span class="bu">print</span>(<span class="st">"g() called"</span>)</span>
<span id="cb101-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb101-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> h (): <span class="bu">print</span>(<span class="st">"h() called"</span>)</span>
<span id="cb101-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb101-4" aria-hidden="true" tabindex="-1"></a>lof <span class="op">=</span> [f, g, h, g, f, f]</span>
<span id="cb101-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb101-5" aria-hidden="true" tabindex="-1"></a>lof[<span class="dv">0</span>]()</span>
<span id="cb101-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb101-6" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> x <span class="kw">in</span> lof: x()</span></code></pre></div>
<p>Passing functions is so useful, that several functions in the Python standard library accepts functions as arguments (sometimes they are optional). Common and very useful examples are, the <a href="https://docs.python.org/3/library/functions.html#map" title="Python Docs — Built-in Functions - map()"><code>map</code> function</a>, and the <a href="https://docs.python.org/3/library/functions.html#filter" title="Python Docs — Built-in Functions - filter()"><code>filter</code> function</a>.</p>
<h6 id="passing-functions-to-map-and-filter-example"><em>Passing functions to map() and filter() example</em></h6>
<div class="sourceCode" id="cb102"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb102-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb102-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> twice (x): <span class="cf">return</span> x <span class="op">*</span> <span class="dv">2</span></span>
<span id="cb102-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb102-2" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> odd (x):   <span class="cf">return</span> x <span class="op">%</span> <span class="dv">2</span> <span class="op">!=</span> <span class="dv">0</span></span>
<span id="cb102-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb102-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb102-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb102-4" aria-hidden="true" tabindex="-1"></a>data <span class="op">=</span> [<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>]</span>
<span id="cb102-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb102-5" aria-hidden="true" tabindex="-1"></a>result <span class="op">=</span> <span class="bu">list</span>(<span class="bu">map</span>(twice, data))        <span class="co">#←“map `twice` onto `data`” &amp;</span></span>
<span id="cb102-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb102-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(result)                          <span class="co"># convert to a `list`.</span></span>
<span id="cb102-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb102-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb102-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb102-8" aria-hidden="true" tabindex="-1"></a>result <span class="op">=</span> <span class="bu">list</span>(<span class="bu">filter</span>(odd, data))       <span class="co">#←“filter on odd values” &amp;</span></span>
<span id="cb102-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb102-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(result)                          <span class="co"># convert to a `list`.</span></span></code></pre></div>
<p>Note that both <code>filter</code> and <code>map</code> return <em>iterators</em>, and not a complete list or tuple. They must be used in an <em>iterable</em> context to actually perform the iterations.</p>
<p>Here is an trivial example of a user-defined function similar in operation to built-in functions like <strong><code>map</code></strong> and <strong><code>filter</code></strong>, in that it also takes a function as argument:</p>
<h6 id="function-taking-plugin-function-as-argument"><em>Function taking ‘plugin function’ as argument</em></h6>
<div class="sourceCode" id="cb103"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb103-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb103-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> dostuff (extra_stuff <span class="op">=</span> <span class="va">None</span>):</span>
<span id="cb103-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb103-2" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"dostuff() doing stuff..."</span>, end<span class="op">=</span><span class="st">''</span>)</span>
<span id="cb103-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb103-3" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> extra_stuff:</span>
<span id="cb103-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb103-4" aria-hidden="true" tabindex="-1"></a>      extra_stuff()</span>
<span id="cb103-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb103-5" aria-hidden="true" tabindex="-1"></a>   <span class="cf">else</span>:</span>
<span id="cb103-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb103-6" aria-hidden="true" tabindex="-1"></a>      <span class="bu">print</span>()</span>
<span id="cb103-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb103-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb103-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb103-8" aria-hidden="true" tabindex="-1"></a>dostuff()                             <span class="co">#←just do ‘normal’ stuff.</span></span>
<span id="cb103-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb103-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb103-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb103-10" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> more_work():</span>
<span id="cb103-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb103-11" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"more_work() doing more work"</span>)</span>
<span id="cb103-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb103-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb103-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb103-13" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> other_work():</span>
<span id="cb103-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb103-14" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"orther_work() doing more work"</span>)</span>
<span id="cb103-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb103-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb103-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb103-16" aria-hidden="true" tabindex="-1"></a>dostuff(extra_stuff <span class="op">=</span> more_work)</span>
<span id="cb103-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb103-17" aria-hidden="true" tabindex="-1"></a>dostuff(extra_stuff <span class="op">=</span> other_work)</span></code></pre></div>
<div class="admonition warn">
<p><strong>WARNING</strong> — <strong><em>Global reduce()/apply() Functions in Python3</em></strong></p>
<p>In Python3, the original built-in <strong><code>reduce</code></strong> and <strong><code>apply</code></strong> functions have been removed. If you require similar behaviour, use <a href="https://docs.python.org/3.0/library/functools.html#functools.reduce" title="Python Docs — functools.reduce()"><strong><code>functools.reduce</code></strong></a>. The closes equivalent for <strong><code>apply</code></strong>, can be found in the <strong><code>multiprocessing</code></strong> module.</p>
<p>Unfortunately, you will still see many references to, and examples of, the old <strong><code>reduce</code></strong> and <strong><code>apply</code></strong> functions. You should translate that to Python3 manually.</p>
</div>
<p>Here is a simple example using <a href="https://docs.python.org/3.0/library/functools.html#functools.reduce" title="Python Docs — functools.reduce()"><strong><code>functools.reduce</code></strong></a> to sum a sequence of values. For interest, we also passed a <strong><code>lambda</code></strong> expression to the function.</p>
<h6 id="example-use-of-functools.reduce"><em>Example use of <code>functools.reduce</code></em></h6>
<div class="sourceCode" id="cb104"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb104-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb104-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> functools <span class="im">import</span> <span class="bu">reduce</span></span>
<span id="cb104-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb104-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb104-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb104-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> add (a, b): <span class="cf">return</span> a <span class="op">+</span> b</span>
<span id="cb104-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb104-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb104-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb104-5" aria-hidden="true" tabindex="-1"></a>values <span class="op">=</span> [<span class="dv">11</span>, <span class="dv">22</span>, <span class="dv">33</span>]</span>
<span id="cb104-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb104-6" aria-hidden="true" tabindex="-1"></a>answer <span class="op">=</span> <span class="bu">reduce</span>(add, values)<span class="op">;</span>                 <span class="co">#←pass custom function.</span></span>
<span id="cb104-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb104-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"Sum = </span><span class="sc">{}</span><span class="st">"</span>.<span class="bu">format</span>(answer))</span>
<span id="cb104-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb104-8" aria-hidden="true" tabindex="-1"></a>answer <span class="op">=</span> <span class="bu">reduce</span>(<span class="kw">lambda</span> a, b: a <span class="op">+</span> b, values)<span class="op">;</span>  <span class="co">#←pass a lambda</span></span>
<span id="cb104-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb104-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"Sum = </span><span class="sc">{}</span><span class="st">"</span>.<span class="bu">format</span>(answer))</span></code></pre></div>
<h2 id="list-argument-unpacking">List Argument Unpacking</h2>
<p>Assume you have a function like <code>koo</code> above, which can take a list of any number of arguments. And further assume you have a list of values like this:</p>
<h6 id="typical-list-creation"><em>Typical list creation</em></h6>
<div class="sourceCode" id="cb105"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb105-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb105-1" aria-hidden="true" tabindex="-1"></a>lst <span class="op">=</span> [<span class="dv">11</span>, <span class="dv">22</span>, <span class="dv">33</span>]</span></code></pre></div>
<p>Now you want to pass those values as positional arguments. One way to do this is as follows:</p>
<h6 id="passing-list-items-individually-to-a-function"><em>Passing list items individually to a function</em></h6>
<div class="sourceCode" id="cb106"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb106-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb106-1" aria-hidden="true" tabindex="-1"></a>koo(lst[<span class="dv">0</span>], lst[<span class="dv">1</span>], lst[<span class="dv">2</span>])</span></code></pre></div>
<p>This produces the following output:</p>
<pre class="output"><code>No. of args: 3
arg #1 = '11'
arg #2 = '22'
arg #3 = '33'</code></pre>
<p>This is not a very robust approach; consider the consequences if <code>lst</code> has fewer or more elements. Fortunately, Python offers a solution: <em>list argument unpacking</em> in the form: <code>*lst</code> (where <code>lst</code> must be a list or tuple). This syntax can only be used when passing arguments to a function that can take a variable number of arguments, or one that takes exactly that number of positional arguments (meaning the number of elements in the list must match the number of positional arguments).</p>
<h6 id="unpacking-a-list-as-individual-arguments-1"><em>Unpacking a list as individual arguments #1</em></h6>
<div class="sourceCode" id="cb108"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb108-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb108-1" aria-hidden="true" tabindex="-1"></a>koo(<span class="op">*</span>lst)</span></code></pre></div>
<p>This produces the following output:</p>
<pre class="output"><code>No. of args: 3
arg #1 = '11'
arg #2 = '22'
arg #3 = '33'</code></pre>
<p>The <code>joo</code> function above can take 3 arguments. Let us see how this works out:</p>
<h6 id="unpacking-a-list-as-individual-arguments-2"><em>Unpacking a list as individual arguments #2</em></h6>
<div class="sourceCode" id="cb110"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb110-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb110-1" aria-hidden="true" tabindex="-1"></a>joo(<span class="op">*</span>lst)</span></code></pre></div>
<p>This produces the following output:</p>
<pre class="output"><code>a=11, b=22, c=33</code></pre>
<p>So, list argument unpacking is just list argument unpacking. It has no relationship with regard to how the parameters of a function were defined.</p>
<h2 id="dictionary-argument-unpacking">Dictionary Argument Unpacking</h2>
<p>By the same token, assume you have a function like <code>moo</code> above, which is defined to take a dictionary parameter. And assume you have a dictionary like <code>dic</code> below:</p>
<h6 id="typical-dictionary-for-following-examples"><em>Typical dictionary for following examples</em></h6>
<div class="sourceCode" id="cb112"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb112-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb112-1" aria-hidden="true" tabindex="-1"></a>dic <span class="op">=</span> {<span class="st">'keya'</span>:<span class="st">'value A'</span>, <span class="st">'keyb'</span>:<span class="dv">123</span>}</span></code></pre></div>
<p>We can call <code>moo</code> by manually “unpacking” the keyword arguments, which is again not a very robust approach. The Python alternative is <em>dictionary argument unpacking</em>, using the <code>**dic</code> syntax, where <code>dic</code> must be a <code>dict</code>ionary:</p>
<h6 id="unpacking-dictionary-as-individual-keyword-arguments"><em>Unpacking dictionary as individual keyword arguments</em></h6>
<div class="sourceCode" id="cb113"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb113-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb113-1" aria-hidden="true" tabindex="-1"></a>moo(keya<span class="op">=</span>dic[<span class="st">'keya'</span>], keyb<span class="op">=</span>dic[<span class="st">'keyb'</span>])   <span class="co">#←manual “unpacking”</span></span>
<span id="cb113-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb113-2" aria-hidden="true" tabindex="-1"></a>moo(<span class="op">**</span>dic)                                <span class="co">#←dictionary argument unpacking - so easy!</span></span></code></pre></div>
<p>The output is as follows:</p>
<pre class="output"><code>moo call #4---------- 2 keyword arg(s):
keya = value A
keyb = 123
moo call #5---------- 2 keyword arg(s):
keya = value A
keyb = 123</code></pre>
<p>We should thus be able to call <code>noo</code>, which accepts both a variable number of arguments, and some keyword arguments. Yes we can, and just for fun, we also show you what it would look like if you had to manually <em>unpack</em> the <code>lst</code> and <code>dic</code> values:</p>
<h6 id="unpacking-a-list-and-a-dictionary-as-arguments"><em>Unpacking a list and a dictionary as arguments</em></h6>
<div class="sourceCode" id="cb115"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb115-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb115-1" aria-hidden="true" tabindex="-1"></a>noo(<span class="op">*</span>lst, <span class="op">**</span>dic)                           <span class="co">#←The Python way</span></span>
<span id="cb115-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb115-2" aria-hidden="true" tabindex="-1"></a>noo(lst[<span class="dv">0</span>], lst[<span class="dv">1</span>], lst[<span class="dv">2</span>], keya<span class="op">=</span>dic[<span class="st">'keya'</span>], keyb<span class="op">=</span>dic[<span class="st">'keyb'</span>])  <span class="co">#←manual unpacking</span></span></code></pre></div>
<p>These two function calls will produce the same output:</p>
<pre class="output"><code>noo call #4---------- 2 keyword arg(s):
No. of `args`: 3
arg #1 = '11'
arg #2 = '22'
arg #3 = '33'
keya = value A
keyb = 123
noo call #5---------- 2 keyword arg(s):
No. of `args`: 3
arg #1 = '11'
arg #2 = '22'
arg #3 = '33'
keya = value A
keyb = 123</code></pre>
<p>If you have wondered before about the point of learning all the extra tedious syntax, you may now be convinced that you would not <em>want</em> to live without this unpacking functionality. But wait, there's more...</p>
<h2 id="more-on-functions-are-values">More on Functions are Values</h2>
<p>The popular phrase for this concept is "functions are first class citizens". Honestly? Say <em>that</em> to a Python first-timer who has not heard the term before, and she might wonder if she has entered the twilight zone. It simply means that functions are values, just like any other type you have encountered before. And just like any type, you can assign it to a name (normally with <code>def</code>), or pass it as an argument, or return it from a function. No discrimination for this citizen!</p>
<h6 id="function-object-can-be-associated-with-multiple-names"><em>Function object can be associated with multiple names</em></h6>
<div class="sourceCode" id="cb117"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb117-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb117-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> qoo ():</span>
<span id="cb117-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb117-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb117-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb117-3" aria-hidden="true" tabindex="-1"></a><span class="co">    Phew. No fancy arguments for this function. We just needed a function</span></span>
<span id="cb117-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb117-4" aria-hidden="true" tabindex="-1"></a><span class="co">    "value", associated with the name `qoo`. It will at least print some</span></span>
<span id="cb117-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb117-5" aria-hidden="true" tabindex="-1"></a><span class="co">    message, just to show its co-operation as a good citizen.</span></span>
<span id="cb117-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb117-6" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb117-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb117-7" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"qoo() called!"</span>, end<span class="op">=</span><span class="st">'; '</span>)</span>
<span id="cb117-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb117-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb117-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb117-9" aria-hidden="true" tabindex="-1"></a>roo, soo <span class="op">=</span> qoo, qoo</span>
<span id="cb117-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb117-10" aria-hidden="true" tabindex="-1"></a>roo()<span class="op">;</span> soo()<span class="op">;</span> qoo()</span>
<span id="cb117-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb117-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>()</span></code></pre></div>
<pre class="output"><code>qoo() called!; qoo() called!; qoo() called!; </code></pre>
<p>So far, so good. We can assign the same "function" to any name, or to many names. And applying the function call operator to any name that references a function, will call the function. Now, let us pass the function as a parameter to another function. We must, of course, first define a function that will <em>call</em> the argument passed to it:</p>
<h6 id="functions-can-be-passed-to-other-functions"><em>Functions can be passed to other functions</em></h6>
<div class="sourceCode" id="cb119"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb119-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb119-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> callback (func):</span>
<span id="cb119-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb119-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb119-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb119-3" aria-hidden="true" tabindex="-1"></a><span class="co">    This function will call `func`tions passed to it. Apart from whatever</span></span>
<span id="cb119-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb119-4" aria-hidden="true" tabindex="-1"></a><span class="co">    else it may want to do. This means a call can "plug in" some extra</span></span>
<span id="cb119-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb119-5" aria-hidden="true" tabindex="-1"></a><span class="co">    code, in addition to whatever algorithm this function is performing.</span></span>
<span id="cb119-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb119-6" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb119-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb119-7" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"callback() calling `func`&gt;&gt;&gt;["</span>, end<span class="op">=</span><span class="st">''</span>)</span>
<span id="cb119-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb119-8" aria-hidden="true" tabindex="-1"></a>    func()</span>
<span id="cb119-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb119-9" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"]&lt;&lt;&lt; callback() returning now."</span>)</span>
<span id="cb119-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb119-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb119-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb119-11" aria-hidden="true" tabindex="-1"></a>callback(qoo)</span></code></pre></div>
<p>The result will look like this:</p>
<pre class="output"><code>callback() calling `func`&gt;&gt;&gt;[qoo() called!; ]&lt;&lt;&lt; callback() returning now.</code></pre>
<p>First class, indeed. Now, we will return a function. Considering the proliferation of functions in this section, we will write a function that <code>return</code>s one of the previously-defined functions, hmmmm, let's see..., ok <code>joo</code> will do.</p>
<h6 id="function-returning-a-function"><em>Function returning a function</em></h6>
<div class="sourceCode" id="cb121"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb121-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb121-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> retfunc ():</span>
<span id="cb121-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb121-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb121-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb121-3" aria-hidden="true" tabindex="-1"></a><span class="co">    Function taking no arguments, but its saving grace, is that it does return a</span></span>
<span id="cb121-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb121-4" aria-hidden="true" tabindex="-1"></a><span class="co">    function, which is not a common thing, so it can hold its head high.</span></span>
<span id="cb121-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb121-5" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb121-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb121-6" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"retfunc() called. just saying."</span>)</span>
<span id="cb121-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb121-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> joo</span>
<span id="cb121-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb121-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb121-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb121-9" aria-hidden="true" tabindex="-1"></a>result <span class="op">=</span> retfunc()</span>
<span id="cb121-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb121-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"calling whatever `retfunc` returned: "</span>, end<span class="op">=</span><span class="st">''</span>)</span>
<span id="cb121-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb121-11" aria-hidden="true" tabindex="-1"></a>result(<span class="dv">12</span>, <span class="dv">34</span>, <span class="dv">56</span>)</span>
<span id="cb121-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb121-12" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"directly calling return value:</span><span class="ch">\n</span><span class="st">    "</span>, end<span class="op">=</span><span class="st">''</span>)</span>
<span id="cb121-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb121-13" aria-hidden="true" tabindex="-1"></a>retfunc()(<span class="dv">12</span>, <span class="dv">34</span>)</span></code></pre></div>
<p>And here is the output:</p>
<pre class="output"><code>retfunc() called. just saying.
calling whatever `retfunc` returned: a=12, b=34, c=56
directly calling return value:
    retfunc() called. just saying.
a=12, b=34, c=56</code></pre>
<p>If that does not prove that a function is just another type of object (value), we have one more possibility: what about a list of "functions"? Since you may have lost track by now of all the <code>moo</code>'s and <code>foo</code>'s above, we will start afresh with brand new functions, so you can focus on the code in just this context:</p>
<h6 id="storing-functions-in-a-list"><em>Storing functions in a list</em></h6>
<div class="sourceCode" id="cb123"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb123-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb123-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> f(): <span class="bu">print</span>(<span class="st">"f() called"</span>)</span>
<span id="cb123-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb123-2" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> g(): <span class="bu">print</span>(<span class="st">"g() called"</span>)</span>
<span id="cb123-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb123-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> h(): <span class="bu">print</span>(<span class="st">"h() called"</span>)</span>
<span id="cb123-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb123-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb123-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb123-5" aria-hidden="true" tabindex="-1"></a>lof <span class="op">=</span> [f, h, g, h, f, g]</span>
<span id="cb123-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb123-6" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i, x <span class="kw">in</span> <span class="bu">enumerate</span>(lof):</span>
<span id="cb123-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb123-7" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"Calling #</span><span class="sc">{}</span><span class="st">: "</span>.<span class="bu">format</span>(i<span class="op">+</span><span class="dv">1</span>), end<span class="op">=</span><span class="st">''</span>)</span>
<span id="cb123-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb123-8" aria-hidden="true" tabindex="-1"></a>    x()</span></code></pre></div>
<p>Here is the result:</p>
<pre class="output"><code>Calling #1: f() called
Calling #2: h() called
Calling #3: g() called
Calling #4: h() called
Calling #5: f() called
Calling #6: g() called</code></pre>
<p>That concludes our attempts to convince you that "functions are just values". As further proof, you can check for yourself that functions can be values in a dictionary. Right now, there is some more functional excitement we want to share.</p>
<h2 id="lambdas-anonymous-functions">Lambdas / Anonymous Functions</h2>
<p>Clearly, you do not want to write ‘anonymous functions’ all the time (and it should really be more correctly: ‘anonymous function <em>expressions</em>’), which is why somebody came up with an abbreviation: ‘lambda’. It certainly saves wear-and-tear on the keyboard and the fingers, but not sure what sheep have to do with it ...</p>
<p>The <code>lambda</code> keyword can be used to represent a function without a name (anonymous). Since a function is a value, the whole <code>lambda</code> expression is a value. It can therefore be <code>return</code>ed from a function, or passed to a function, or stored elsewhere. The basic syntax is as follows:</p>
<h4 id="syntax-lambda-expressions"><strong>Syntax</strong> — <strong><em>Lambda Expressions</em></strong></h4>
<div class="stx">
<div class="line-block"><strong><code>lambda</code></strong> <span class="opt"><span class="stx">parm-list</span></span> <strong><code>:</code></strong> <span class="stx">expression</span></div>
</div>
<p>The <span class="stx">parm-list</span> does not have to be enclosed in parentheses. The <span class="stx">expression</span> automatically results in: <code>return</code> <span class="stx">expression</span>. There can only be one expression, so lambdas are convenient only for simple functionality. Anywhere you can use a function name (i.e. a name referencing a function), you can use a <code>lambda</code> and vice-versa.</p>
<h6 id="functions-and-lambdas-in-various-combinations"><em>Functions and lambdas in various combinations</em></h6>
<div class="sourceCode" id="cb125"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb125-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> taker (f):</span>
<span id="cb125-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb125-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-3" aria-hidden="true" tabindex="-1"></a><span class="co">    Function taking a function as parameter. By now, you know it can also</span></span>
<span id="cb125-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-4" aria-hidden="true" tabindex="-1"></a><span class="co">    be a lambda, which is after all just a function value without a name.</span></span>
<span id="cb125-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-5" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb125-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> f(<span class="dv">4</span>)                         <span class="co">#- just call whatever was passed,</span></span>
<span id="cb125-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-7" aria-hidden="true" tabindex="-1"></a>                                        <span class="co">#  and return its result.</span></span>
<span id="cb125-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb125-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-9" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> giver ():</span>
<span id="cb125-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb125-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-11" aria-hidden="true" tabindex="-1"></a><span class="co">    Function returning a function... a `lambda` to be exact. It just as well</span></span>
<span id="cb125-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-12" aria-hidden="true" tabindex="-1"></a><span class="co">    could have `return`ed `func` above, i.e.: `return func`, but `lambda`</span></span>
<span id="cb125-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-13" aria-hidden="true" tabindex="-1"></a><span class="co">    wants its day...</span></span>
<span id="cb125-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-14" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb125-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="kw">lambda</span> : <span class="st">"Yippeee!"</span>          <span class="co">#- lambda taking no arguments</span></span>
<span id="cb125-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb125-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-17" aria-hidden="true" tabindex="-1"></a>sheep <span class="op">=</span> <span class="kw">lambda</span> x : x <span class="op">*</span> x <span class="op">*</span> x            <span class="co">#- `sheep` references code now.</span></span>
<span id="cb125-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-18" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(sheep(<span class="dv">2</span>))                         <span class="co">#- can call what it references.</span></span>
<span id="cb125-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-19" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(taker(sheep))                     <span class="co">#- pass value in `sheep`.</span></span>
<span id="cb125-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-20" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(taker(<span class="kw">lambda</span> x : x <span class="op">*</span> x <span class="op">*</span> x))      <span class="co">#- pass lambda value directly.</span></span>
<span id="cb125-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-21" aria-hidden="true" tabindex="-1"></a>sheep <span class="op">=</span> giver()                         <span class="co">#- store whatever `giver` returned.</span></span>
<span id="cb125-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-22" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(sheep())                          <span class="co">#- call value in `sheep` &amp; print.</span></span>
<span id="cb125-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb125-23" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(giver()())                        <span class="co">#- directly call return value.</span></span></code></pre></div>
<p>And the output is ...</p>
<pre class="output"><code>8
64
64
Yippeee!
Yippeee!</code></pre>
<p>Note that we could have passed <code>taker</code> any name, as long as the name referenced a value, with type <code>function</code>, or more generically: anything which is callable by the function call operator, in­clu­ding an an­o­ny­mous function expression (lambda).</p>
<h2 id="achieving-closure">Achieving Closure</h2>
<p>Weak heading, we know. Anyhow, this involves the fact that <code>def</code> is like assignment: it creates a name, and assigns a value. Since you presumably know that names can be created inside functions (local names), it stands to reason that you can create function names within a function. Practically, this means you get a "nested function", or a "function within a function". Neat. Like a private function, whose name is local, and can thus only be called from within the "outer" function -- unless it <code>return</code>s it, of course.</p>
<p>The problem starts when the "inner" function references names of variables or parameters (which are variables) of the "outer" function. This is all good and well, until the "outer" function returns the "inner" function. What happens now to the "outer" variables (which died when the "outer" function returned), but which are referenced in the returned inner function? This is a conundrum, which Python (and other languages) solve by calling it a <em>closure</em>, which means it must <em>capture</em> the referenced variables of the ‘outer’ function somehow.</p>
<p>Th term <em>closure</em> is the name for what Python does, but it does not explain what actually happens: Python copies (or <em>captures</em>) the values referenced by the inner function, so that when the returned inner function is eventually called, it has something to play with. Thus a closure remembers the context in which it was created.</p>
<h6 id="capturing-outer-variables-closure"><em>Capturing “outer” variables = closure</em></h6>
<div class="sourceCode" id="cb127"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb127-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb127-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> outer(outer_param):</span>
<span id="cb127-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb127-2" aria-hidden="true" tabindex="-1"></a>    outer_var <span class="op">=</span> <span class="dv">2</span></span>
<span id="cb127-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb127-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> inner (x):</span>
<span id="cb127-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb127-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> x <span class="op">*</span> outer_var <span class="op">*</span> outer_param</span>
<span id="cb127-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb127-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> inner</span>
<span id="cb127-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb127-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb127-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb127-7" aria-hidden="true" tabindex="-1"></a>f <span class="op">=</span> outer(<span class="dv">3</span>)</span>
<span id="cb127-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb127-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"f(4) ="</span>, f(<span class="dv">4</span>))</span>
<span id="cb127-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb127-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"outer(3)(4) ="</span>, outer(<span class="dv">3</span>)(<span class="dv">4</span>))</span></code></pre></div>
<p>This is what results:</p>
<pre class="output"><code>f(4) = 24
outer(3)(4) = 24</code></pre>
<p>If <code>inner</code> did not reference any <code>outer</code> names, it would not be a closure. This one referenced two names from the <code>outer</code> function, but that does not make it any more, or any less of a closure. There is no <em>degree</em> of closure.</p>
<h3 id="function-factories-revisited">Function Factories Revisited</h3>
<p>Closures are very common in creating <em>specialised</em> functions, where the ‘outer’ function (the function factory), is passed one or more arguments, which are referenced in the ‘inner’ function's body, forming a closure.</p>
<p>By passing different arguments to such a factory function, it can logically generate different functions.</p>
<h6 id="multiplication-factory-function"><em>Multiplication factory function</em></h6>
<div class="sourceCode" id="cb129"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb129-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb129-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> multiply_factory (multiplier):</span>
<span id="cb129-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb129-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> multiply_worker (multiplicant):</span>
<span id="cb129-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb129-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> multiplicant <span class="op">*</span> multiplier</span>
<span id="cb129-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb129-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> multiply_worker</span>
<span id="cb129-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb129-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb129-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb129-6" aria-hidden="true" tabindex="-1"></a>times_two <span class="op">=</span> multiply_factory(<span class="dv">2</span>)</span>
<span id="cb129-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb129-7" aria-hidden="true" tabindex="-1"></a>answer <span class="op">=</span> times_two(<span class="dv">3</span>)<span class="op">;</span>     <span class="bu">print</span>(answer)    <span class="co">#⇒6</span></span>
<span id="cb129-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb129-8" aria-hidden="true" tabindex="-1"></a>answer <span class="op">=</span> times_two(<span class="dv">9</span>)<span class="op">;</span>     <span class="bu">print</span>(answer)    <span class="co">#⇒18</span></span>
<span id="cb129-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb129-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb129-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb129-10" aria-hidden="true" tabindex="-1"></a>times_2p5 <span class="op">=</span> multiply_factory(<span class="fl">2.5</span>)</span>
<span id="cb129-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb129-11" aria-hidden="true" tabindex="-1"></a>answer <span class="op">=</span> times_2p5(<span class="dv">3</span>)<span class="op">;</span>     <span class="bu">print</span>(answer)    <span class="co">#⇒7.5</span></span>
<span id="cb129-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb129-12" aria-hidden="true" tabindex="-1"></a>answer <span class="op">=</span> times_2p5(<span class="dv">33</span>)<span class="op">;</span>    <span class="bu">print</span>(answer)    <span class="co">#⇒82.5</span></span></code></pre></div>
<p>The <code>multiply_factory</code> function thus returns ‘worker’ functions that can multiply any argument by the <code>multiplier</code> passed during the factory call. They are effectively custom functions that, once defined, will always to the same job, but not necessarily the same job as the ‘co-workers’.</p>
<p>For this to work, we need closures. Done.</p>
<h2 id="scope-and-functions">Scope and Functions</h2>
<p>A function body is a block. A block is a nested scope. It is nested inside another scope, normally the global scope, which is the area outside of other blocks (no indentation at all). Names created in a nested scope, are only visible in that scope, and in scopes nested within it. When a name is referenced, Python looks for the name starting in the current scope, then looking upwards to the next higher scope, and so on, until it reaches the global scope. If it cannot find it there, it will look in its list of built-in names.</p>
<p>Functions can thus reference names at a higher scope. There is a conceptual problem though. When code inside a function uses assigment, which creates names, a new name is created <em>every time</em>, even if that name exists in a higher scope. This new name now hides, or "shadows" the higher-scoped name... until the new name goes out of scope (execution steps out of the block).</p>
<p>What if, for some reason, a function wants to <em>modify</em> a global variable? Enter the <code>global</code> keyword. You can use it to inform Python of any global names you want to <em>modify</em> with assignment, and to not create a new name locally.</p>
<h6 id="global-statement-prevents-local-name-generation"><em>Global statement prevents local name generation</em></h6>
<div class="sourceCode" id="cb130"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb130-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb130-1" aria-hidden="true" tabindex="-1"></a>gvar <span class="op">=</span> <span class="dv">123</span>                                <span class="co">#←global scope variable</span></span>
<span id="cb130-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb130-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb130-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb130-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> f ():                                 <span class="co">#←wants to modify `gvar`</span></span>
<span id="cb130-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb130-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">global</span> gvar                           <span class="co">#←informs Python of intentions.</span></span>
<span id="cb130-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb130-5" aria-hidden="true" tabindex="-1"></a>    gvar <span class="op">=</span> <span class="dv">456</span>                            <span class="co">#←does *not* create a name.</span></span>
<span id="cb130-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb130-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb130-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb130-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">'gvar ='</span>, gvar)                     <span class="co">#⇒`gvar = 123`.</span></span>
<span id="cb130-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb130-8" aria-hidden="true" tabindex="-1"></a>f()</span>
<span id="cb130-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb130-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">'gvar ='</span>, gvar)                     <span class="co">#⇒`gvar = 456`.</span></span></code></pre></div>
<p>This will produce the following output:</p>
<pre class="output"><code>gvar = 123
gvar = 456</code></pre>
<p>Quite tidy really, but probably not what you expected. This is normally because by this stage you might not yet have been convinced that a name is just a name, is just a name. You can call it a "variable", or a "function", as you like, but it is still: just. a. name. (Which <em>references</em> a value, like a string value, or a numeric value, or a function value).</p>
<p>If <code>gvar</code> did not exist at the time when <code>f</code> was called, the <code>gvar = 456</code> would have <strong><em>created</em></strong> the <code>gvar</code> globally! The first <code>print</code> above would have failed, but the second <code>print</code> would still have output <code>456</code>.</p>
<p>There is one more keyword to deal with: <code>nonlocal</code>. You might be thinking that if a name is not local, it must be global. But that is not necessarily true. Consider an <code>inner</code> function, nested in an <code>outer</code> function. The <code>outer</code> function defines some <code>name</code> for itself. The <code>inner</code> function wants to <em>modify</em> that <code>name</code>. But assignment <em>creates</em> names in the current scope. We need a way to specify that the <code>inner</code> function wants to <em>modify</em> the <code>name</code> in the <code>outer</code> function. And thus the need for the <code>nonlocal</code> keyword.</p>
<h6 id="non-local-referring-to-outer-names"><em>Non-local referring to “outer" names</em></h6>
<div class="sourceCode" id="cb132"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb132-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb132-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> outer ():</span>
<span id="cb132-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb132-2" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">"value"</span></span>
<span id="cb132-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb132-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"outer's `name` ="</span>, name)</span>
<span id="cb132-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb132-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> inner():</span>
<span id="cb132-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb132-5" aria-hidden="true" tabindex="-1"></a>        <span class="kw">nonlocal</span> name</span>
<span id="cb132-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb132-6" aria-hidden="true" tabindex="-1"></a>        name <span class="op">=</span> name[::<span class="op">-</span><span class="dv">1</span>]</span>
<span id="cb132-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb132-7" aria-hidden="true" tabindex="-1"></a>    inner()</span>
<span id="cb132-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb132-8" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"outer's `name` ="</span>, name)</span>
<span id="cb132-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb132-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb132-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb132-10" aria-hidden="true" tabindex="-1"></a>outer()</span></code></pre></div>
<p>Can you predict the output?</p>
<pre class="output"><code>outer's `name` = value
outer's `name` = eulav</code></pre>
<p>Exercise: What do you think will happen if you remove <em>one</em> line above: the <code>nonlocal name</code> line? Predict, test, evaluate.</p>
<p>For now, we have covered the topic of scope. Only for now, because scope is also about names. And names are stored somewhere, and modules have names, and importing modules creates namespaces, which are named scopes. But more on that later.</p>
<h2 id="recursion">Recursion</h2>
<p>Python supports recursion, which means a function can call itself. Any recursive algorithm can be written iteratively (with loops) instead, making recursion optional. Nevertheless, some algorithms lends itself more ‘elegantly’ to a recursive solution.</p>
<p>Fundamentally though, recursion is just another way to <em>iterate</em> (loop).</p>
<h6 id="recursion-as-iteration"><em>Recursion as iteration</em></h6>
<div class="sourceCode" id="cb134"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb134-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb134-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> looper1 (n):</span>
<span id="cb134-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb134-2" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"looper1: Recurse #</span><span class="sc">{}</span><span class="st">"</span>.<span class="bu">format</span>(n))</span>
<span id="cb134-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb134-3" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> n <span class="op">&gt;</span> <span class="dv">0</span>:</span>
<span id="cb134-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb134-4" aria-hidden="true" tabindex="-1"></a>      looper1 (n <span class="op">-</span> <span class="dv">1</span>)</span>
<span id="cb134-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb134-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb134-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb134-6" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> looper2 (n):</span>
<span id="cb134-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb134-7" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> n <span class="op">&gt;</span> <span class="dv">0</span>:</span>
<span id="cb134-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb134-8" aria-hidden="true" tabindex="-1"></a>      looper2 (n <span class="op">-</span> <span class="dv">1</span>)</span>
<span id="cb134-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb134-9" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"looper2: Recurse #</span><span class="sc">{}</span><span class="st">"</span>.<span class="bu">format</span>(n))</span>
<span id="cb134-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb134-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb134-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb134-11" aria-hidden="true" tabindex="-1"></a>looper1(<span class="dv">5</span>)</span>
<span id="cb134-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb134-12" aria-hidden="true" tabindex="-1"></a>looper2(<span class="dv">5</span>)</span></code></pre></div>
<p>The interesting effect of the <strong><code>print</code></strong> function call in <strong><code>looper2</code></strong>, is that the ‘work’ of the function, takes place in <em>reverse</em>, which makes recursion a technique to change the order in which actions take place.</p>
<h2 id="generator-functions">Generator Functions</h2>
<p>The <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-yield_stmt" title="Python Docs — Simple Statements - yield Statement"><code>yield</code> statement</a> turns a function into a <a href="https://docs.python.org/3/glossary.html#term-generator" title="Python Docs — Glossary - generator">generator</a> i.e. it returns a generator iterator. Thus, <em>generator function</em> is a term to describe a function which contains one or more <code>yield</code> statements. The syntax is basically similar to <code>return</code>, and in fact, <code>yield</code> does return an expression to the caller. The difference is that <code>yield</code> saves the state of the function, so that when it is called again, the complete state is restored, and it continues with the next statement after the <code>yield</code> statement.</p>
<h5 id="genfuncs.py-simple-generator-functions"><strong><code>genfuncs.py</code></strong> — <strong><em>Simple Generator Functions</em></strong></h5>
<div class="sourceCode" id="cb135"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb135-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb135-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb135-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb135-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-4" aria-hidden="true" tabindex="-1"></a><span class="co">Two simple generator functions as example and tutorial.</span></span>
<span id="cb135-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-5" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb135-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb135-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-7" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> simpgen():</span>
<span id="cb135-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""Simplest, semi-useful generator function."""</span></span>
<span id="cb135-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">yield</span> <span class="dv">1</span><span class="op">;</span> <span class="cf">yield</span> <span class="dv">4</span><span class="op">;</span> <span class="cf">yield</span> <span class="dv">9</span><span class="op">;</span> <span class="cf">yield</span> <span class="dv">16</span></span>
<span id="cb135-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb135-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-11" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> loopgen():</span>
<span id="cb135-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-12" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""Generator function using a loop to `yield`."""</span></span>
<span id="cb135-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">5</span>):</span>
<span id="cb135-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">yield</span> i<span class="op">**</span><span class="dv">2</span></span>
<span id="cb135-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb135-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-16" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> simpgen(): <span class="bu">print</span>(<span class="st">"i ="</span>, i, end<span class="op">=</span><span class="st">" "</span>)<span class="op">;</span> <span class="bu">print</span>()</span>
<span id="cb135-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-17" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> loopgen(): <span class="bu">print</span>(<span class="st">"i ="</span>, i, end<span class="op">=</span><span class="st">" "</span>)<span class="op">;</span> <span class="bu">print</span>()</span>
<span id="cb135-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb135-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-19" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">list</span>(loopgen()))</span>
<span id="cb135-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb135-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-21" aria-hidden="true" tabindex="-1"></a>L <span class="op">=</span> <span class="bu">list</span>(simpgen())<span class="op">;</span>   T <span class="op">=</span> <span class="bu">tuple</span>(loopgen())<span class="op">;</span>   D <span class="op">=</span> <span class="bu">dict</span>(<span class="bu">zip</span>(<span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">5</span>), loopgen()))</span>
<span id="cb135-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb135-22" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(L, T, D)</span></code></pre></div>
<p>Both functions above are generator functions. They both run 4 <code>yield</code> statements. They both return the same values. They can both be used as iterators. They can be more efficient than comprehensions, since they generate their sequences one-by-one as needed, whereas a comprehension, or a slice, will create the whole list at once. The <code>range</code> function is a generator (in Python3).</p>
<h2 id="function-decorators">Function Decorators</h2>
<p>A common coding pattern results as a solution when we are reluctant or unable to modify ex­ist­ing functions, but we somehow want to <em>add</em> extra code. We write <em>another</em> function, which per­forms the extra code, but <em>also</em> calls the function we are so reluctant or unable to modify. Now, the way life works, you will want that same extra code to also be performed before or after a com­ple­te­ly dif­fe­rent func­tion. So you repeat the process. The problem is that you now have a repetition of the <em>extra code</em> in more than one function.</p>
<p>But wait: we can write the function that adds the extra code with a parameter, which should be a function that the caller can pass. Then we can run the extra code, <em>and</em> call whatever function the caller passed. Problem solved. Let us see that in action:</p>
<h6 id="wrapping-an-old-function-with-a-new-one-calling-the-old"><em>‘Wrapping’ an old function with a new one calling the old</em></h6>
<div class="sourceCode" id="cb136"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb136-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb136-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> oldfunc ():</span>
<span id="cb136-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb136-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""Just some aged function. We do not want to modify it. Brittle."""</span></span>
<span id="cb136-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb136-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"Old, old function"</span>)</span>
<span id="cb136-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb136-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb136-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb136-5" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> xtracode (func):</span>
<span id="cb136-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb136-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""Function adding extra code to old functions. Chivalrous."""</span></span>
<span id="cb136-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb136-7" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"xtracode()"</span>)</span>
<span id="cb136-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb136-8" aria-hidden="true" tabindex="-1"></a>    func()</span>
<span id="cb136-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb136-9" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"more xtracode()"</span>)</span>
<span id="cb136-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb136-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb136-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb136-11" aria-hidden="true" tabindex="-1"></a>xtracode(oldfunc)</span></code></pre></div>
<pre class="output"><code>xtracode()
Old, old function
more xtracode()</code></pre>
<p>However, more fun is to be had, if we can pass <code>xtracode</code> extra arguments, which it in turn passes on to whatever <code>func</code>tion was passed! We need new functions for this. But we will just re-use the names above:</p>
<h6 id="manual-decoration-by-passing-functions"><em>Manual decoration by passing functions</em></h6>
<div class="sourceCode" id="cb138"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb138-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb138-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> olderfunc(dos):</span>
<span id="cb138-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb138-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""Just an older function taking a dos as argument"""</span></span>
<span id="cb138-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb138-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f"Creak. Taking a </span><span class="sc">{</span>dos<span class="sc">}</span><span class="ss">."</span>)</span>
<span id="cb138-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb138-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb138-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb138-5" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> oldfunc(nap):</span>
<span id="cb138-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb138-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""Just an old function taking a nap as argument"""</span></span>
<span id="cb138-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb138-7" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f"Yaaawn. Taking a </span><span class="sc">{</span>nap<span class="sc">}</span><span class="ss">."</span>)</span>
<span id="cb138-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb138-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb138-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb138-9" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> xtracode (func, arg):</span>
<span id="cb138-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb138-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""Function adding extra code to old functions, passing along arguments"""</span></span>
<span id="cb138-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb138-11" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"xtracode()"</span>)</span>
<span id="cb138-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb138-12" aria-hidden="true" tabindex="-1"></a>    func(arg)</span>
<span id="cb138-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb138-13" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"more xtracode()"</span>)</span>
<span id="cb138-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb138-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb138-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb138-15" aria-hidden="true" tabindex="-1"></a>xtracode(oldfunc, <span class="st">"snooze"</span>)</span>
<span id="cb138-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb138-16" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"-"</span> <span class="op">*</span> <span class="dv">32</span>)</span>
<span id="cb138-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb138-17" aria-hidden="true" tabindex="-1"></a>xtracode(olderfunc, <span class="st">"deep sleep"</span>)</span></code></pre></div>
<pre class="output"><code>xtracode()
Yaaawn. Taking a snooze.
more xtracode()
--------------------------------
xtracode()
Creak. Taking a deep sleep.
more xtracode()</code></pre>
<p>Why stop now? Let us write <code>xtracode</code> in such a way, that it can take any arguments you can throw at it, <em>and</em> in turn pass whatever they are, along to the function it will call. We've seen that before with variable argument lists. At this point, the code assumes that <code>olderfunc</code> and <code>oldfunc</code> are in scope. For good measure, let us <em>return</em> a function that will call the older function and the extra code!</p>
<h6 id="more-flexible-decoration-with-function-factory"><em>More flexible decoration with function factory</em></h6>
<div class="sourceCode" id="cb140"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb140-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb140-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> xtracode (func):</span>
<span id="cb140-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb140-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""No time for comments. It is way to tedious to write docs."""</span></span>
<span id="cb140-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb140-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> inner (<span class="op">*</span>args, <span class="op">**</span>kwargs):</span>
<span id="cb140-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb140-4" aria-hidden="true" tabindex="-1"></a>       <span class="bu">print</span>(<span class="st">"xtracode()"</span>)</span>
<span id="cb140-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb140-5" aria-hidden="true" tabindex="-1"></a>       func(<span class="op">*</span>args, <span class="op">**</span>kwargs)</span>
<span id="cb140-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb140-6" aria-hidden="true" tabindex="-1"></a>       <span class="bu">print</span>(<span class="st">"more xtracode()"</span>)</span>
<span id="cb140-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb140-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> inner</span>
<span id="cb140-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb140-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb140-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb140-9" aria-hidden="true" tabindex="-1"></a>wth <span class="op">=</span> xtracode(oldfunc)</span>
<span id="cb140-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb140-10" aria-hidden="true" tabindex="-1"></a>wth(<span class="st">"yawn"</span>)</span>
<span id="cb140-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb140-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"-"</span> <span class="op">*</span> <span class="dv">32</span>)</span>
<span id="cb140-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb140-12" aria-hidden="true" tabindex="-1"></a>wth(<span class="st">"zzzzzz"</span>)</span>
<span id="cb140-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb140-13" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"-"</span> <span class="op">*</span> <span class="dv">32</span>)</span>
<span id="cb140-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb140-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb140-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb140-15" aria-hidden="true" tabindex="-1"></a><span class="co"># watch this:</span></span>
<span id="cb140-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb140-16" aria-hidden="true" tabindex="-1"></a>olderfunc(<span class="st">"shot"</span>)                          <span class="co">#- run the old code.</span></span>
<span id="cb140-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb140-17" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"-"</span> <span class="op">*</span> <span class="dv">32</span>)</span>
<span id="cb140-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb140-18" aria-hidden="true" tabindex="-1"></a>olderfunc <span class="op">=</span> xtracode(olderfunc)            <span class="co">#- "decorate" the old code.</span></span>
<span id="cb140-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb140-19" aria-hidden="true" tabindex="-1"></a>olderfunc(<span class="st">"ZZZZZZZZ"</span>)                      <span class="co">#- run the "decorated" code.</span></span></code></pre></div>
<pre class="output"><code>xtracode()
Yaaawn. Taking a yawn.
more xtracode()
--------------------------------
xtracode()
Yaaawn. Taking a zzzzzz.
more xtracode()
--------------------------------
Creak. Taking a shot.
--------------------------------
xtracode()
Creak. Taking a ZZZZZZZZ.
more xtracode()</code></pre>
<h6 id="renaming-decorated-function-giving-it-new-decorated-behavior"><em>‘Renaming’ decorated function, giving it new, ‘decorated’ behavior</em></h6>
<div class="sourceCode" id="cb142"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb142-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb142-1" aria-hidden="true" tabindex="-1"></a>olderfunc <span class="op">=</span> xtracode(olderfunc)</span>
<span id="cb142-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb142-2" aria-hidden="true" tabindex="-1"></a>olderfunc(<span class="st">"GASP"</span>)</span></code></pre></div>
<pre class="output"><code>xtracode()
xtracode()
Creak. Taking a GASP.
more xtracode()
more xtracode()</code></pre>
<p>But even that is too much work. We need less code to do the same thing — the Pythonic way. Before we show you the Python decorator <strong><em>syntax</em></strong>, let's be clear: ‘decorating’ <code>olderfunc</code> in the way shown above, is not <em>that</em> verbose, and it is the only way you can "decorate" functions that are not part of the current module. The syntax that follows is appropriate when you think in reverse, or design from the other side: you have code that you want to decorate functions with; so that when you <em>define</em> new functions, you can optionally decorate them with extra code. You cannot use the syntax below to decorate existing functions (you cannot decorate <em>just a name</em>, it must be a function <em>definition</em>).</p>
<h6 id="employing-the-function-decoration-syntax"><em>Employing the function decoration syntax</em></h6>
<div class="sourceCode" id="cb144"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb144-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb144-1" aria-hidden="true" tabindex="-1"></a><span class="co"># this will not work, we need to decorate a *definition*:</span></span>
<span id="cb144-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb144-2" aria-hidden="true" tabindex="-1"></a><span class="co"># @xtracode</span></span>
<span id="cb144-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb144-3" aria-hidden="true" tabindex="-1"></a><span class="co"># oldfunc</span></span>
<span id="cb144-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb144-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb144-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb144-5" aria-hidden="true" tabindex="-1"></a><span class="at">@xtracode</span></span>
<span id="cb144-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb144-6" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> somefunc (arg):</span>
<span id="cb144-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb144-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""Just some function, taking an argument. Expecting decorations"""</span></span>
<span id="cb144-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb144-8" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"somefunc('</span><span class="sc">{}</span><span class="st">')"</span>.<span class="bu">format</span>(arg))</span>
<span id="cb144-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb144-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb144-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb144-10" aria-hidden="true" tabindex="-1"></a>somefunc(<span class="st">"argument"</span>)</span></code></pre></div>
<pre class="output"><code>xtracode()
somefunc('argument')
more xtracode()</code></pre>
<p>So, <code>somefunc</code> has been "decorated" with the same code, and its syntax had the same effect as the code above where we wrote: <code>olderfunc = xtracode(olderfunc)</code>... for all practical purposes func­tion <code>somefunc</code> <em>is</em> now a new, decorated, function. In our opinion, it would have been more use­ful if we could also apply the syntax to existing functions, and not just to <em>new</em> func­tion de­fi­ni­tions. But it still has its uses. And do note, the important pattern is actually in the <em>de­co­ra­tor</em> func­tion (the function: <code>xtracode</code> in our example). If that pattern was not followed, the whole con­cept will fall apart. This means, in other words, all <em>decorator</em> functions must follow that pattern. So, when you see that pattern, you call it the <em>decorator pattern</em>.</p>
<p>And yes, you can "doubly-decorate" a function using this syntax as well. You can even decorate it with many different functions, if you want. Let us go for broke: grand slam triple decoration (with the same decorator):</p>
<h6 id="overdecorating-is-possible"><em>Overdecorating is possible</em></h6>
<div class="sourceCode" id="cb146"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb146-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb146-1" aria-hidden="true" tabindex="-1"></a><span class="at">@xtracode</span></span>
<span id="cb146-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb146-2" aria-hidden="true" tabindex="-1"></a><span class="at">@xtracode</span></span>
<span id="cb146-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb146-3" aria-hidden="true" tabindex="-1"></a><span class="at">@xtracode</span></span>
<span id="cb146-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb146-4" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> overdecorated (arg):</span>
<span id="cb146-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb146-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f"overdecorated('</span><span class="sc">{</span>arg<span class="sc">}</span><span class="ss">')"</span>)</span>
<span id="cb146-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb146-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb146-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb146-7" aria-hidden="true" tabindex="-1"></a>overdecorated(<span class="st">"tacky style"</span>)</span></code></pre></div>
<pre class="output"><code>xtracode()
xtracode()
xtracode()
overdecorated('tacky style')
more xtracode()
more xtracode()
more xtracode()</code></pre>
<p>Enough for now. Fortunately for you, there are even more functional Pythonic trea­sur­es to be had. You will be able to collect more brownie points for your Pythonista badge.</p>
<h2 id="function-attributes">Function Attributes</h2>
<p>The objects of many types, can have <em>attributes</em>. Depending on the type, these attributes (names) can be created and removed arbitrarily. This is true for functions. Consider the following code:</p>
<h6 id="simple-function-definition-with-code-that-attaches-an-attribute"><em>Simple function definition with code that attaches an attribute</em></h6>
<div class="sourceCode" id="cb148"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb148-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb148-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> func(arg):</span>
<span id="cb148-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb148-2" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"arg = </span><span class="sc">{}</span><span class="st">"</span>.<span class="bu">format</span>(arg))</span>
<span id="cb148-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb148-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb148-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb148-4" aria-hidden="true" tabindex="-1"></a>func(<span class="dv">123</span>)                     <span class="co">#⇒arg = 123</span></span>
<span id="cb148-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb148-5" aria-hidden="true" tabindex="-1"></a>func.X <span class="op">=</span> <span class="dv">234</span>                  <span class="co">#←create `X` as attribute of `func`.</span></span>
<span id="cb148-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb148-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">getattr</span>(func, <span class="st">'X'</span>))     <span class="co">#←retrieve value of `X` attribute.</span></span>
<span id="cb148-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb148-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"func.X ="</span>, func.X)</span>
<span id="cb148-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb148-8" aria-hidden="true" tabindex="-1"></a><span class="bu">setattr</span>(func, <span class="st">'X'</span>, <span class="dv">345</span>)       <span class="co">#←set new value for `X` attribute.</span></span>
<span id="cb148-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb148-9" aria-hidden="true" tabindex="-1"></a>func.X <span class="op">=</span> <span class="dv">345</span>                  <span class="co">#←shorthand for above.</span></span>
<span id="cb148-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb148-10" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"func.X ="</span>, func.X)</span>
<span id="cb148-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb148-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"func.X ="</span>, <span class="bu">getattr</span>(func, <span class="st">'X'</span>))</span>
<span id="cb148-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb148-12" aria-hidden="true" tabindex="-1"></a><span class="kw">del</span> func.X                    <span class="co">#←remove (delete) `X` attribute.</span></span></code></pre></div>
<p>There are three builtin functions that can deal with attributes: <a href="https://docs.python.org/3/library/functions.html#getattr" title="Python Docs — Built-in Functions — getattr()"><strong><code>getattr</code></strong></a> (get value of attribute, which is what ‘<strong><code>.</code></strong>’ does), <a href="https://docs.python.org/3/library/functions.html#setattr" title="Python Docs — Built-in Functions — setattr()"><strong><code>setattr</code></strong></a> (which is what the equal sign does) and <a href="https://docs.python.org/3/library/functions.html#hasattr" title="Python Docs — Built-in Functions — setattr()"><strong><code>hasattr</code></strong></a> (which can check if an attribute exists on an object).</p>
<p>Clearly this should be used with care; we introduce it here simply as a concept that is prevalent in Python, <em>especially</em> when we get to classes. But we can start by playing with attributes on functions.</p>
<p>A function's code can use its own attributes. Below we wrote an ‘enhanced’ <code>func</code> that checks if it has an <code>X</code> attribute, and then also prints that out:</p>
<h6 id="function-that-uses-its-own-attribute"><em>Function that uses its own attribute</em></h6>
<div class="sourceCode" id="cb149"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb149-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb149-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> func(arg):</span>
<span id="cb149-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb149-2" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"arg = </span><span class="sc">{}</span><span class="st">"</span>.<span class="bu">format</span>(arg))</span>
<span id="cb149-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb149-3" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> <span class="bu">hasattr</span>(func, <span class="st">'X'</span>):</span>
<span id="cb149-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb149-4" aria-hidden="true" tabindex="-1"></a>      <span class="bu">print</span>(<span class="st">"func.X ="</span>, func.X)</span>
<span id="cb149-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb149-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb149-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb149-6" aria-hidden="true" tabindex="-1"></a>func(<span class="dv">123</span>)                     <span class="co">#⇒arg = 123</span></span>
<span id="cb149-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb149-7" aria-hidden="true" tabindex="-1"></a>func.X <span class="op">=</span> <span class="dv">234</span>                  <span class="co">#←create `X` as attribute of `func`.</span></span>
<span id="cb149-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb149-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="bu">getattr</span>(func, <span class="st">'X'</span>))     <span class="co">#←retrieve value of `X` attribute.</span></span>
<span id="cb149-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb149-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"func.X ="</span>, func.X)</span>
<span id="cb149-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb149-10" aria-hidden="true" tabindex="-1"></a><span class="bu">setattr</span>(func, <span class="st">'X'</span>, <span class="dv">345</span>)       <span class="co">#←set new value for `X` attribute.</span></span>
<span id="cb149-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb149-11" aria-hidden="true" tabindex="-1"></a>func.X <span class="op">=</span> <span class="dv">345</span>                  <span class="co">#←shorthand for above.</span></span>
<span id="cb149-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb149-12" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"func.X ="</span>, func.X)</span>
<span id="cb149-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb149-13" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"func.X ="</span>, <span class="bu">getattr</span>(func, <span class="st">'X'</span>))</span>
<span id="cb149-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb149-14" aria-hidden="true" tabindex="-1"></a><span class="kw">del</span> func.X                    <span class="co">#←remove (delete) `X` attribute.</span></span></code></pre></div>
<p>We could have the function delete the <code>X</code> attribute if found (after printing or using the value it references).</p>
<h2 id="static-local-variables">Static Local Variables</h2>
<p>Not possible. You <em>could</em> use <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#function-attributes">attributes</a>, but thot would not be very pythonic, nor very maintainable and controllable. A pythonic solution involves <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#classes">classes</a> unfortunately, so the following solution would may not (yet) make sense, but it involves making a class <em>callable</em>, by implementing the ‘magic’ <strong><code>__call__</code></strong> method.</p>
<h6 id="callable-class-that-has-persistent-state-static-state"><em>Callable class that has persistent state (static state)</em></h6>
<div class="sourceCode" id="cb150"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb150-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb150-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> FunctionWithState:</span>
<span id="cb150-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb150-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb150-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb150-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, init<span class="op">=</span><span class="dv">0</span>):</span>
<span id="cb150-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb150-4" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.state <span class="op">=</span> <span class="bu">int</span>(init)</span>
<span id="cb150-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb150-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb150-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb150-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__call__</span>(<span class="va">self</span>):</span>
<span id="cb150-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb150-7" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">"Current state ="</span>, <span class="va">self</span>.state)</span>
<span id="cb150-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb150-8" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.state <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb150-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb150-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb150-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb150-10" aria-hidden="true" tabindex="-1"></a>func1 <span class="op">=</span> FunctionWithState()</span>
<span id="cb150-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb150-11" aria-hidden="true" tabindex="-1"></a>func1()<span class="op">;</span> func1()<span class="op">;</span> func1()</span>
<span id="cb150-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb150-12" aria-hidden="true" tabindex="-1"></a>func2 <span class="op">=</span> FunctionWithState(<span class="dv">100</span>)</span>
<span id="cb150-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb150-13" aria-hidden="true" tabindex="-1"></a>func2()<span class="op">;</span> func2()<span class="op">;</span> func2()</span></code></pre></div>
<p>It might seem more cumbersome, than a simple <code>static</code> solution as in C/C++/C#/Java, but this is really much more flexible and maintainable. You cauld also have made the <code>state</code> ‘private’ by naming it <code>__state</code>.</p>
<p>Depending on requirements, a <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#generator-functions">function generator</a> might be appropriate. Since <strong><code>yield</code></strong> returns an <em>iterator</em>, you can ‘trigger’ the next step with <a href="https://docs.python.org/3/library/functions.html#next" title="Python Docs — Built-in Functions / next()"><strong><code>next()</code></strong></a>, or directly call <span class="stx">obj</span><strong><code>.__next__()</code></strong>.</p>
<h6 id="function-factory-returning-a-generator-function"><em>Function factory returning a generator function</em></h6>
<div class="sourceCode" id="cb151"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb151-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb151-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> func_generator(state<span class="op">=</span><span class="dv">1</span>):</span>
<span id="cb151-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb151-2" aria-hidden="true" tabindex="-1"></a>   this_state <span class="op">=</span> state</span>
<span id="cb151-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb151-3" aria-hidden="true" tabindex="-1"></a>   <span class="cf">while</span> <span class="va">True</span>:</span>
<span id="cb151-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb151-4" aria-hidden="true" tabindex="-1"></a>      <span class="bu">print</span>(<span class="st">"Current state ="</span>, this_state)</span>
<span id="cb151-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb151-5" aria-hidden="true" tabindex="-1"></a>      <span class="cf">yield</span> this_state</span>
<span id="cb151-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb151-6" aria-hidden="true" tabindex="-1"></a>      this_state <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb151-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb151-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb151-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb151-8" aria-hidden="true" tabindex="-1"></a>func1 <span class="op">=</span> func_generator()</span>
<span id="cb151-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb151-9" aria-hidden="true" tabindex="-1"></a>func1.<span class="fu">__next__</span>()<span class="op">;</span> func1.<span class="fu">__next__</span>()<span class="op">;</span> func1.<span class="fu">__next__</span>()</span>
<span id="cb151-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb151-10" aria-hidden="true" tabindex="-1"></a>func2 <span class="op">=</span> func_generator(<span class="dv">100</span>)</span>
<span id="cb151-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb151-11" aria-hidden="true" tabindex="-1"></a><span class="bu">next</span>(func2)<span class="op">;</span> <span class="bu">next</span>(func2)<span class="op">;</span> <span class="bu">next</span>(func2)</span></code></pre></div>
<p>You cauld also use a <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#achieving-closure">closure</a>, which might in some cases may be a simpler solution:</p>
<h6 id="using-a-closure-to-maintain-local-function-state"><em>Using a closure to maintain local function state</em></h6>
<div class="sourceCode" id="cb152"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb152-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb152-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> MakeFunctionWithState(init<span class="op">=</span><span class="dv">0</span>):</span>
<span id="cb152-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb152-2" aria-hidden="true" tabindex="-1"></a>   state <span class="op">=</span> init</span>
<span id="cb152-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb152-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb152-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb152-4" aria-hidden="true" tabindex="-1"></a>   <span class="kw">def</span> local_func():</span>
<span id="cb152-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb152-5" aria-hidden="true" tabindex="-1"></a>      <span class="kw">nonlocal</span> state</span>
<span id="cb152-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb152-6" aria-hidden="true" tabindex="-1"></a>      <span class="bu">print</span>(<span class="st">"Current state ="</span>, state)</span>
<span id="cb152-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb152-7" aria-hidden="true" tabindex="-1"></a>      state <span class="op">+=</span> <span class="dv">1</span></span>
<span id="cb152-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb152-8" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> state</span>
<span id="cb152-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb152-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb152-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb152-10" aria-hidden="true" tabindex="-1"></a>   <span class="cf">return</span> local_func</span>
<span id="cb152-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb152-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb152-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb152-12" aria-hidden="true" tabindex="-1"></a>func1 <span class="op">=</span> MakeFunctionWithState()</span>
<span id="cb152-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb152-13" aria-hidden="true" tabindex="-1"></a>func1()<span class="op">;</span> func1()<span class="op">;</span> func1()</span>
<span id="cb152-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb152-14" aria-hidden="true" tabindex="-1"></a>func2 <span class="op">=</span> MakeFunctionWithState(<span class="dv">100</span>)</span>
<span id="cb152-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb152-15" aria-hidden="true" tabindex="-1"></a>func2()<span class="op">;</span> func2()<span class="op">;</span> func2()</span></code></pre></div>
<p>As you can see, every programmatic pattern is possible in Python, you should just think more like a Pythonista.</p>
<h1 id="classes">Classes</h1>
<p>Python supports object-oriented programming (<span class="sc">OOP</span>), and this means you can implement your <span class="sc">OOAD</span> (object-oriented analysis and design) patterns in Python. Some aspects you may find strange, depending on which <span class="sc">OOP</span> languages you have been using before.</p>
<p>When names are associated with a class, they are called <em>attributes</em>. For classes, attributes are stored in a dictionary called <code>__dict__</code>, and can be arbitrarily added or removed per <em>instance</em> (one object). The only way to ensure all instances of a class have the same attributes, is to assign (create) them in an initialiser (you may think of it as a constructor, if that sounds familiar). The initialiser must be called <code>__init__(self)</code>, and is called automatically when you “call” the class name.</p>
<h2 id="class-fundamentals">Class Fundamentals</h2>
<p>In summary, Python supports encapsulation, class-level (non-instance) methods, static methods, instance methods, attributes and properties. It is possible to overload operators, and override inherited members. All classes inherit from a featureless <a href="https://docs.python.org/3/library/functions.html#object" title="Python Docs — Built-in Functions - object()"><code>object</code> class</a>. The syntax is simple:</p>
<h4 id="syntax-class-specification-syntax"><strong>Syntax</strong> — <strong><em>Class Specification Syntax</em></strong></h4>
<div class="stx">
<ul>
<li><p><strong><code>class</code></strong> <span class="stx">ClassName</span><strong><code>(</code></strong><span class="opt"><span class="stx">base-class</span><sub>1</sub><span class="opt"><strong><code>,</code></strong> <span class="stx">base-class</span><sub>2</sub></span>…</span><strong><code>):</code></strong><br>
<span class="tab1"></span><span class="stx">members</span> <span class="alt"></span> <strong><code>pass</code></strong></p></li>
<li><p><span class="stx">members</span> ⇒ variables, functions, special functions.</p></li>
<li><p><span class="stx">base-class</span>… ⇒ zero or more classes to inherit from.</p></li>
</ul>
</div>
<div class="admonition note">
<p><strong>NOTE</strong> — <strong><em>Class Names Convention</em></strong></p>
<p>The pythonic convention regarding class names, suggests that it should start with a capital letter and use <em>camel case</em> convention should the name be compound.</p>
</div>
<p>This means the simplest class possible, looks as shown next. It is semi-useful as is, in the sense that you can create new objects of type <code>Boo</code> now. If you want, you can add attributes to any new <code>Boo</code> object (any one instance, not all instances at once). Or you can remove an attribute with the <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-del_stmt" title="Python Docs — Simple Statements - del Statement"><code>del</code> statement</a>.</p>
<h6 id="classes-objects-and-dynamic-attributes"><em>Classes, objects and dynamic attributes</em></h6>
<div class="sourceCode" id="cb153"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb153-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb153-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Boo():                     <span class="co">#←inherits from `object`.</span></span>
<span id="cb153-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb153-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">pass</span>                         <span class="co">#←has no own attributes.</span></span>
<span id="cb153-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb153-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb153-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb153-4" aria-hidden="true" tabindex="-1"></a>bob <span class="op">=</span> Boo()                      <span class="co">#←create object of type `Boo`.</span></span>
<span id="cb153-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb153-5" aria-hidden="true" tabindex="-1"></a>dob <span class="op">=</span> Boo()                      <span class="co">#←ditto.</span></span>
<span id="cb153-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb153-6" aria-hidden="true" tabindex="-1"></a>bob.name <span class="op">=</span> <span class="st">'Bobby'</span>               <span class="co">#←add attribute on `bob` (only).</span></span>
<span id="cb153-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb153-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="ss">f'bob.name = </span><span class="sc">{</span>bob<span class="sc">.</span>name<span class="sc">}</span><span class="ss">'</span>)</span>
<span id="cb153-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb153-8" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(bob.__dict__[<span class="st">'name'</span>])      <span class="co">#←just a `__dict__`ionary entry.</span></span>
<span id="cb153-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb153-9" aria-hidden="true" tabindex="-1"></a><span class="kw">del</span> bob.name                     <span class="co">#←del attribute on `bob` (only).</span></span>
<span id="cb153-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb153-10" aria-hidden="true" tabindex="-1"></a><span class="kw">del</span> bob.__dict__[<span class="st">'name'</span>]         <span class="co">#←ditto.</span></span>
<span id="cb153-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb153-11" aria-hidden="true" tabindex="-1"></a><span class="cf">try</span>:</span>
<span id="cb153-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb153-12" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f'bob.name = </span><span class="sc">{</span>bob<span class="sc">.</span>name<span class="sc">}</span><span class="ss">'</span>)</span>
<span id="cb153-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb153-13" aria-hidden="true" tabindex="-1"></a><span class="cf">except</span>:</span>
<span id="cb153-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb153-14" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f'bob.name &lt;- gone'</span>)</span></code></pre></div>
<p>It is clearly very dynamic and flexible. Python stores attributes in a <code>__dict__</code> member in the class (itself an attribute, of course).</p>
<p>There is a simple and common pattern for creating your own error class, which you may <a href="https://docs.python.org/3/reference/simple_stmts.html#grammar-token-raise-stmt" title="Python Docs — Simple Statements # raise Statement"><code>raise</code></a>. Since you also inherit the inialiser, you only need <code>pass</code> as the body of the class.</p>
<h6 id="custom-exception-class-1"><em>Custom exception class</em></h6>
<div class="sourceCode" id="cb154"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb154-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb154-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Hell(<span class="pp">Exception</span>):</span>
<span id="cb154-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb154-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">pass</span></span>
<span id="cb154-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb154-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb154-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb154-4" aria-hidden="true" tabindex="-1"></a><span class="cf">try</span>:</span>
<span id="cb154-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb154-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'About to raise hell.'</span>) </span>
<span id="cb154-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb154-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">raise</span> Hell(<span class="st">'End of days.'</span>)</span>
<span id="cb154-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb154-7" aria-hidden="true" tabindex="-1"></a><span class="cf">except</span> Hell <span class="im">as</span> ex:</span>
<span id="cb154-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb154-8" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'Taking exception:'</span>, ex)</span></code></pre></div>
<p>Very Pythonic.</p>
<h2 id="initialisers">Initialisers</h2>
<p>A class may have an initialiser or constructor. This can be implemented as a special method in the class. It must have the name <code>__init__</code>, and since it is ultimately still a function, you can create parameters as you see fit; except, the first parameter, as a matter of convention, must be present, and called <code>self</code>. Since Python will automatically pass the first argument when you <em>call</em> the class, you can attach attributes to <code>self</code>. This means that all instances of the class, will have those attributes.</p>
<h6 id="class-with-initialiser"><em>Class with initialiser</em></h6>
<div class="sourceCode" id="cb155"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb155-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb155-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Boo():</span>
<span id="cb155-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb155-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, name):</span>
<span id="cb155-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb155-3" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.name <span class="op">=</span> name.capitalize()</span>
<span id="cb155-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb155-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb155-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb155-5" aria-hidden="true" tabindex="-1"></a>bob <span class="op">=</span> Boo(<span class="st">'bobby'</span>)<span class="op">;</span>  dob <span class="op">=</span> Boo(<span class="st">'dobby'</span>)</span>
<span id="cb155-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb155-6" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">' bob='</span>, bob.name,</span>
<span id="cb155-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb155-7" aria-hidden="true" tabindex="-1"></a>      <span class="st">' dob='</span>, dob.name, sep<span class="op">=</span><span class="st">''</span>)</span></code></pre></div>
<p>You can make the initialiser as complex as you want in terms of parameters. You can use de­fault parameters, keyword parameters, arbitrary number of parameters, etc.</p>
<h2 id="instance-methods">Instance Methods</h2>
<p>You can create functions in a class. Unless they are otherwise decorated, we call them <em>methods</em>, and they too, must have an explicit first parameter called <code>self</code>. They are effectively <em>instance</em> methods, in that logically, each object gets a copy. For practical reasons, they do not really get a copy, but it will <em>appear</em> as if copied.</p>
<h6 id="class-with-initialiser-and-instance-method"><em>Class with initialiser and instance method</em></h6>
<div class="sourceCode" id="cb156"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb156-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb156-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Boo():</span>
<span id="cb156-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb156-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, name):</span>
<span id="cb156-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb156-3" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.name <span class="op">=</span> name.capitalize()</span>
<span id="cb156-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb156-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> say (<span class="va">self</span>, msg<span class="op">=</span><span class="va">None</span>):</span>
<span id="cb156-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb156-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> msg: <span class="bu">print</span>(msg, end<span class="op">=</span><span class="st">'. '</span>)</span>
<span id="cb156-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb156-6" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">'I am'</span>, <span class="va">self</span>.name)</span>
<span id="cb156-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb156-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb156-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb156-8" aria-hidden="true" tabindex="-1"></a>bob <span class="op">=</span> Boo(<span class="st">'bobby'</span>)<span class="op">;</span> dob <span class="op">=</span> Boo(<span class="st">'dobby'</span>)</span>
<span id="cb156-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb156-9" aria-hidden="true" tabindex="-1"></a>bob.say()<span class="op">;</span>          dob.say(<span class="st">'Hello'</span>)</span></code></pre></div>
<pre class="output"><code>I am Bobby
Hello. I am Dobby</code></pre>
<p>Note that <code>bob.say()</code> for example, is actually convenient shorthand for <code>Boo.say(bob)</code>.</p>
<h2 id="shared-attributes">Shared Attributes</h2>
<p>Attributes associated with the class, and not with each <em>instance</em> (object) of the class, are created at class level. If the attribute happens to be a function, that function must not have a <code>self</code> parameter and should be decorated with the <a href="https://docs.python.org/3/library/functions.html#classmethod" title="Python Docs — Built-in Functions - @classmethod"><code>@classmethod</code> function</a>, which is a <a href="https://docs.python.org/3/glossary.html#term-decorator" title="Python Docs — Glossary - decorator">decorator</a>. These attributes are effectively <em>shared</em> by all objects, even though they may be accessed via the object.</p>
<h6 id="class-with-a-class-method"><em>Class with a “class method”</em></h6>
<div class="sourceCode" id="cb158"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb158-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb158-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb158-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb158-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-4" aria-hidden="true" tabindex="-1"></a><span class="co">Illustration of simple classes for pedagogical purposes, i.e., not</span></span>
<span id="cb158-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-5" aria-hidden="true" tabindex="-1"></a><span class="co">necessarily *useful* classes, with the focus on syntax &amp; patterns.</span></span>
<span id="cb158-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-6" aria-hidden="true" tabindex="-1"></a><span class="co">This version has an initialiser and an instance method. This class</span></span>
<span id="cb158-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-7" aria-hidden="true" tabindex="-1"></a><span class="co">adds some class-level attributes, and a `@classmethod`.</span></span>
<span id="cb158-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-8" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb158-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb158-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-10" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> CHello():                      <span class="co">#←inherits from `object`.</span></span>
<span id="cb158-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb158-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-12" aria-hidden="true" tabindex="-1"></a><span class="co">    Class with initialiser, an attribute, and an instance method.</span></span>
<span id="cb158-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-13" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb158-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-14" aria-hidden="true" tabindex="-1"></a>    family <span class="op">=</span> <span class="st">'Addams'</span></span>
<span id="cb158-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb158-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, name):</span>
<span id="cb158-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-17" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.name <span class="op">=</span> name.capitalize()</span>
<span id="cb158-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb158-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-19" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> say (<span class="va">self</span>, msg<span class="op">=</span><span class="st">'Hello'</span>):</span>
<span id="cb158-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-20" aria-hidden="true" tabindex="-1"></a>        <span class="co">"""</span></span>
<span id="cb158-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-21" aria-hidden="true" tabindex="-1"></a><span class="co">        Print `name` attribute of the current instance (object)</span></span>
<span id="cb158-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-22" aria-hidden="true" tabindex="-1"></a><span class="co">        """</span></span>
<span id="cb158-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-23" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">'</span><span class="sc">{}</span><span class="st">My name is </span><span class="sc">{}</span><span class="st"> </span><span class="sc">{}</span><span class="st">'</span></span>
<span id="cb158-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-24" aria-hidden="true" tabindex="-1"></a>            .<span class="bu">format</span>(<span class="st">'Hello. '</span> <span class="cf">if</span> msg <span class="cf">else</span> <span class="st">''</span>, <span class="va">self</span>.name, <span class="va">self</span>.family))</span>
<span id="cb158-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb158-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-26" aria-hidden="true" tabindex="-1"></a>    <span class="at">@classmethod</span></span>
<span id="cb158-27"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-27" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> info (cls):</span>
<span id="cb158-28"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-28" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">'CHello family:'</span>, cls.family)</span>
<span id="cb158-29"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb158-30"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb158-31"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-31" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main(script, <span class="op">*</span>argv):</span>
<span id="cb158-32"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-32" aria-hidden="true" tabindex="-1"></a>    ch <span class="op">=</span> CHello(<span class="st">'gomez'</span>)<span class="op">;</span>   cl <span class="op">=</span> CHello(<span class="st">'morticia'</span>)</span>
<span id="cb158-33"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-33" aria-hidden="true" tabindex="-1"></a>    ch.say()<span class="op">;</span>               cl.say()</span>
<span id="cb158-34"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb158-35"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-35" aria-hidden="true" tabindex="-1"></a>    CHello.family <span class="op">=</span> <span class="st">'Heck'</span>  <span class="co">#←change class attribute.</span></span>
<span id="cb158-36"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-36" aria-hidden="true" tabindex="-1"></a>    ch.say()<span class="op">;</span>               cl.say()</span>
<span id="cb158-37"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb158-38"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-38" aria-hidden="true" tabindex="-1"></a>    ch.family <span class="op">=</span> <span class="st">'Bluth'</span>     <span class="co">#←add attribute to `ch` (only).</span></span>
<span id="cb158-39"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-39" aria-hidden="true" tabindex="-1"></a>    ch.say()<span class="op">;</span>               cl.say()</span>
<span id="cb158-40"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb158-41"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-41" aria-hidden="true" tabindex="-1"></a>    CHello.info()<span class="op">;</span>          <span class="co">#←call class method.</span></span>
<span id="cb158-42"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-42" aria-hidden="true" tabindex="-1"></a>    ch.info()<span class="op">;</span>              cl.info()</span>
<span id="cb158-43"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb158-44"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-44" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span></span>
<span id="cb158-45"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb158-46"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-46" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span>
<span id="cb158-47"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-47" aria-hidden="true" tabindex="-1"></a>    <span class="im">import</span> os, sys</span>
<span id="cb158-48"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-48" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(os.name, sys.platform, sys.argv[<span class="dv">0</span>], sep<span class="op">=</span><span class="st">' | '</span>)</span>
<span id="cb158-49"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb158-49" aria-hidden="true" tabindex="-1"></a>    sys.exit(main(sys.argv[<span class="dv">0</span>], <span class="op">*</span>sys.argv[<span class="dv">1</span>:]))</span></code></pre></div>
<pre class="output"><code>posix | darwin | classes104.py
Hello. My name is Gomez Addams
Hello. My name is Morticia Addams
Hello. My name is Gomez Heck
Hello. My name is Morticia Heck
Hello. My name is Gomez Bluth
Hello. My name is Morticia Heck
CHello family: Heck
CHello family: Heck
CHello family: Heck</code></pre>
<p>Note that confusingly, <code>ch.family</code> is <code>'Bluth'</code>, but when you run <code>ch.info()</code>, it reports: <code>'Heck'</code>. This is because of the way the names are looked up. With the class method, Python looks it up in the class. With the instance method, it starts with the current object and only if not found, looks upwards in the class (and then the parent class, and so forth).</p>
<p>You can also decorate a method with the <a href="https://docs.python.org/3/library/functions.html#staticmethod" title="Python Docs — Built-in Functions - @staticmethod"><code>@staticmethod</code> decorator</a>, in which case, the function does not have <code>self</code> or <code>cls</code> parameters, and nothing will be passed automatically as in the other cases. You can define any other parameters you may require.</p>
<h6 id="class-with-a-staticmethod"><em>Class with a “<span class="citation" data-cites="staticmethod">@staticmethod</span>”</em></h6>
<div class="sourceCode" id="cb160"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb160-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb160-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Foo ():</span>
<span id="cb160-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb160-2" aria-hidden="true" tabindex="-1"></a>    <span class="at">@staticmethod</span></span>
<span id="cb160-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb160-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> sm ():</span>
<span id="cb160-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb160-4" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">'Static method called'</span>)</span>
<span id="cb160-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb160-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb160-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb160-6" aria-hidden="true" tabindex="-1"></a>Foo.sm()</span></code></pre></div>
<p>Since a <code>@staticmethod</code> does not automatically get a reference to an object (as with instance methods), nor a reference to the class (as with <code>@classmethods</code>), it cannot access attributes in either an instance or a class. It is effectively just a utility function within the namespace of the class, and that is actually what it is commonly used for.</p>
<h2 id="private-members-properties">Private Members &amp; Properties</h2>
<p>There is no specific syntax to hide members. Instead, simply prefix the members with double underscores. This will <em>mangle</em> the name, so that it is not so easily accessible (but yes, the mangling method is clear and you can subvert the <em>privacy</em>).</p>
<h6 id="simulating-privacy"><em>Simulating privacy</em></h6>
<div class="sourceCode" id="cb161"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb161-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb161-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Foo ():</span>
<span id="cb161-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb161-2" aria-hidden="true" tabindex="-1"></a>    __class_stuff <span class="op">=</span> <span class="st">'CLASS DATA'</span></span>
<span id="cb161-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb161-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, stuff):</span>
<span id="cb161-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb161-4" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.__inst_stuff <span class="op">=</span> stuff</span>
<span id="cb161-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb161-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> stuff(<span class="va">self</span>):</span>
<span id="cb161-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb161-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">self</span>.__class_stuff <span class="op">+</span> <span class="st">', '</span> <span class="op">+</span> <span class="va">self</span>.__inst_stuff</span>
<span id="cb161-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb161-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb161-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb161-8" aria-hidden="true" tabindex="-1"></a>f <span class="op">=</span> Foo(<span class="st">'instance data'</span>)</span>
<span id="cb161-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb161-9" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(f.stuff())</span></code></pre></div>
<p>Outside the class, you can only use <code>f.stuff()</code>. The <code>__class_stuff</code> and <code>__inst_stuff</code> attributes are not available. If we want to be able to retrieve “private” attributes, one option is to provide a <a href="https://docs.python.org/3/library/functions.html#property" title="Python Docs — Built-in Functions / property()"><code>@property</code> decorator</a> in front of a function representing a ‹<em>property</em>›. This would be the “getter”. Optionally, you can also provide a <code>@</code>‹<em>property</em>›<code>.setter</code> decorated ‹<em>property</em>› function, to make the ‹<em>property</em>› read-write.</p>
<h6 id="properties-with-decorators"><em>Properties with decorators</em></h6>
<div class="sourceCode" id="cb162"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb162-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb162-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Foo ():</span>
<span id="cb162-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb162-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, init): <span class="va">self</span>.__mine <span class="op">=</span> init</span>
<span id="cb162-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb162-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb162-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb162-4" aria-hidden="true" tabindex="-1"></a>    <span class="at">@property</span></span>
<span id="cb162-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb162-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> mine(<span class="va">self</span>): <span class="cf">return</span> <span class="va">self</span>.__mine</span>
<span id="cb162-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb162-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb162-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb162-7" aria-hidden="true" tabindex="-1"></a>    <span class="at">@mine.setter</span></span>
<span id="cb162-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb162-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> mine(<span class="va">self</span>, value): <span class="va">self</span>.__mine <span class="op">=</span> value</span>
<span id="cb162-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb162-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb162-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb162-10" aria-hidden="true" tabindex="-1"></a>obj <span class="op">=</span> Foo(<span class="dv">123</span>)<span class="op">;</span>    <span class="bu">print</span>(<span class="st">'obj.mine ='</span>, obj.mine)</span>
<span id="cb162-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb162-11" aria-hidden="true" tabindex="-1"></a>obj.mine <span class="op">=</span> <span class="st">'ABC'</span><span class="op">;</span>  <span class="bu">print</span>(<span class="st">'obj.mine ='</span>, obj.mine)</span></code></pre></div>
<p>If the <code>@mine.setter</code> was not written, the <code>mine</code> property would have been read-only. Properties are often use to provide validated access to private attributes, but there is no re­qui­re­ment for prop­er­ty methods to access <em>any</em> data; they could just as well return results of calculations. The point is, a property <em>looks</em> to the user of the class, as if it is an attribute, but Python automatically calls the “getter” and “setter” functions as needed.</p>
<p>Since a decorator <em>is</em> a function that ‘decorates’ another, <a href="https://docs.python.org/3/library/functions.html#property" title="Python Docs — Built-in Functions / property()"><strong><code>property</code></strong></a> is indeed a built-in function, and you could call use it directly to create properties, but the decorator pattern is preferred.</p>
<h2 id="inheritance">Inheritance</h2>
<p>Inheritance allows reuse of existing classes. Everything is inherited. Everything can be overridden. This is really just a name lookup; overriding names in a derived class, is in a logically nested scope with respect to the base class. This is effectively also automatically polymorphic, since the lookup occurs at runtime.</p>
<p>The <code>super()</code> function can be used to narrow the scope to that of a base class, making it possible to override an inherited function, yet still call the base class version for some reason or another.</p>
<p>We have previously seen the use of the <a href="https://docs.python.org/3/reference/expressions.html#is" title="Python Docs — Expressions # Identity comparisons"><code>is</code> operator</a>. The <a href="https://docs.python.org/3/library/functions.html#isinstance" title="Python Docs — Built-in Functions - isinstance()"><code>isinstance</code> function</a> is more appropriate for checking inheritance re­la­tion­ships (“is this shape object actually a circle?”).</p>
<p>A common inherited method to overload, even if only inheriting from <code>object</code>, is <code>__str__</code>, which is called by the <code>str()</code> function. This allows a class to decide on the most convenient string representation of the class.</p>
<h2 id="operator-overloading">Operator Overloading</h2>
<p>Special methods are used to represent the supported operators. These include <code>__eq__</code> for the equality operator, <code>__gt__</code> (greater than) , <code>__lt__</code> (lesser than), <code>__ge__</code> (greater than or equal to), <code>__le__</code> (lesser than or equal to), and <code>__ne__</code> (not equal). Python looks for such a <em>method</em> when you use, for example, <code>a == b</code> (specifically: <code>a.__eq__(b)</code>). This is how you can <em>overload</em> any of the supported operators, by <em>overriding</em> these special methods.</p>
<p>It should be clear, that when you use an operator, it is simply a compact and convenient <em>notation</em> for calling a <em>method</em>:</p>
<div class="ws">
<div class="line-block">&nbsp;<code>A + B</code> <code>≡</code> <code>A.__add__(B)</code></div>
</div>
<p>Since it is a <em>method</em> inherited by all types, any interested type can <em>overload</em> an operator by simply writing such a method in the class of the type. It can be called like any method, but because it is ‘magical’ to Python, it can be called using operator notation. Since this is <em>overiding</em> an existing method, it may sound confusing, but that is still correct terminology.</p>
<p>As you may have seen under <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#static-local-variables">Static Local Variables</a>, we can implement the special <strong><code>__call__</code></strong> method in a class to make objects of this class <em>callable</em>. In some other examples, we also implement <strong><code>__str__</code></strong>, which logically overloads <strong><code>str()</code></strong> for objects of such a class.</p>
<h1 id="miscellaneous-topics">Miscellaneous Topics</h1>
<p>Some arbitrary topics that has not been covered elsewhere.</p>
<h2 id="package-management">Package Management</h2>
<p>Package installation can be done manually, but you probably do not want to manage de­pen­den­cies yourself. In conjunction with packages, you do not want a proliferation of packages in your global or system Python. For package management, there is <a href="https://pip.pypa.io/en/stable/" title="PyPa — pip Documentation"><strong>pip</strong></a>. <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#virtual-environments">Virtual environments</a> iso­late pack­age in­stal­la­tions, and solve the second problem.</p>
<p>Good <a href="https://en.wikipedia.org/wiki/Package_manager" title="Wikipedia — Package Manager">package managers</a> resolve dependencies, and will automatically install any other packages required by a particular installation. It is possible to manually install packages, but then the user must first install all requirements, and <em>those</em> dependencies, which can become quite tedious, since one must also ensure that the correct <em>versions</em> are installed.</p>
<p>The <a href="https://pip.pypa.io/en/stable/" title="PyPa — pip Documentation"><strong>pip</strong></a> package manager is part of the official Python distribution, and helps users install third party libraries from <a href="https://pypi.python.org/" title="PyPi Package Index">PyPI.org</a>. Another popular alternative is the <a href="https://en.wikipedia.org/wiki/Conda_(package_manager)" title="Wikipedia — Conda (package manager)"><strong>conda</strong></a> package manager, which is part of the <a href="https://store.continuum.io/cshop/anaconda" title="Anaconda Python Home">Anaconda</a> Python distribution.</p>
<h3 id="pip-package-manager">Pip Package Manager</h3>
<p>The only package manager really supported by Python.org, is <a href="https://pip.pypa.io/en/stable/" title="PyPa — pip Documentation"><strong>pip</strong></a>. It installs packages with au­to­ma­tic de­pen­den­cy resolution from <a href="https://pypi.python.org/" title="PyPi Package Index">PyPI</a> (Python Package Index). No <code>update</code> or <code>upgrade</code> command exists, but it does have an <code>--upgrade</code> switch; you have to run ‘<code>pip install</code> <code>--upgrade</code> ‹<em>pkg-name</em>›’. To upgrade <a href="https://pip.pypa.io/en/stable/" title="PyPa — pip Documentation"><strong>pip</strong></a> itself, it is best to run (especially on Windows):</p>
<pre class="cmdline"><code>python -m pip install pip --upgrade</code></pre>
<p>The <code>-U</code> switch is the shorter version of <code>--upgrade</code>, in case you are allergic to typing.</p>
<p>A <a href="https://pip.pypa.io/en/stable/user_guide/#config-file" title="PyPa — pip - Configuration File">configuration file</a> for <strong><a href="https://pip.pypa.io/en/stable/" title="PyPa — pip Documentation">pip</a></strong> can be placed in your <em>home</em> directory on POSIX systems, under a sub­di­rec­to­ry called <code>.pip</code> (<code>$HOME/.pip</code>). On Windows, you can create the <code>%APPDATA%\pip</code> directory (no leading period). In PowerShell, this would be: <code>$Env:APPDATA\pip</code>.</p>
<p>The configuration file must be named <code>pip.conf</code> on Linux and <code>pip.ini</code> on Win­dows un­der the appropriate directory. If you use <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#virtual-environments">virtual environments</a>, you may have a <code>pip.conf</code> in the virtual environment as well, which will override settings from your personal <code>pip.conf</code>.</p>
<h5 id="pip.conf-pip-configuration-file"><strong><code>pip.conf</code></strong> — <em>Pip Configuration File</em></h5>
<div class="sourceCode" id="cb164"><pre class="sourceCode ini"><code class="sourceCode ini"><span id="cb164-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb164-1" aria-hidden="true" tabindex="-1"></a><span class="kw">[list]</span></span>
<span id="cb164-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb164-2" aria-hidden="true" tabindex="-1"></a><span class="dt">format</span><span class="ot">=</span><span class="st">legacy</span></span></code></pre></div>
<p>If you set the <strong><a href="https://pip.pypa.io/en/stable/" title="PyPa — pip Documentation">pip</a></strong> <code>format</code> option to <code>legacy</code> (or <code>columns</code>) in your <code>pip.conf</code> file, it will avoid the warn­ing you get when running ‘<code>pip list</code>’ (or you can set the <code>PIP_FORMAT=legacy</code> environment variable value).</p>
<p>Some important <strong><a href="https://pip.pypa.io/en/stable/" title="PyPa — pip Documentation">pip</a></strong> commands and options, shown in terms of example command lines are:</p>
<ul>
<li><code>pip search</code> ‹<em>text</em>› <span class="icon-left"></span> <em>search for a package on PyPI</em>.</li>
<li><code>pip list</code> <span class="icon-left"></span> <em>list installed packages</em>.</li>
<li><code>pip freeze &gt; requirements.txt</code> <span class="icon-left"></span> <em>save installed package list to <code>requirements.txt</code></em>.</li>
<li><code>pip install</code> ‹<em>package</em>› <span class="icon-left"></span> <em>install ‹package›</em>.</li>
<li><code>pip install</code> ‹<em>package</em>› <code>--upgrade</code> <span class="icon-left"></span> <em>upgrade installed ‹package›</em>.</li>
<li><code>pip install -r requirements.txt --upgrade</code> <span class="icon-left"></span> <em>upgrade all packages in <code>requirements.txt</code></em>.</li>
<li><code>pip uninstall</code> ‹<em>package</em>› <span class="icon-left"></span> <em>uninstall the ‹package›</em>.</li>
</ul>
<h3 id="conda-package-manager">Conda Package Manager</h3>
<p>Since <strong>conda</strong> is not standard, we do not cover it on the course, but you can read the <a href="https://docs.conda.io/en/latest/" title="Conda — Conda Documenation"><strong>conda</strong> documenation</a>, if you are using Anaconda or <a href="https://docs.conda.io/en/latest/miniconda.html" title="Conda — Miniconda">Miniconda</a>. One advantage of <strong>conda</strong>, is that it can also manage virtual environments.</p>
<h2 id="custom-modules">Custom Modules</h2>
<p>Before long programs will become bigger, and it would be time to consider modules, especially because in real life, we would organise programs in multiple files, and then <strong><code>import</code></strong> what is needed. A simple example first: a <code>util.py</code> file, containing <code>to_int()</code> and <code>to_float()</code> functions:</p>
<h5 id="util.py-example-utility-module"><strong><code>util.py</code></strong> — <strong><em>Example Utility Module</em></strong></h5>
<div class="sourceCode" id="cb165"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb165-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-1" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb165-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-2" aria-hidden="true" tabindex="-1"></a><span class="co">"""Some random daily utility functions"""</span></span>
<span id="cb165-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb165-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-4" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> to_float(s, fail<span class="op">=</span><span class="va">None</span>):</span>
<span id="cb165-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-5" aria-hidden="true" tabindex="-1"></a>   <span class="co">"""</span></span>
<span id="cb165-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-6" aria-hidden="true" tabindex="-1"></a><span class="co">   An exception-free “conversion” from a string to a `float`. User can</span></span>
<span id="cb165-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-7" aria-hidden="true" tabindex="-1"></a><span class="co">   specify what to return for invalid input.</span></span>
<span id="cb165-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-8" aria-hidden="true" tabindex="-1"></a><span class="co">   """</span></span>
<span id="cb165-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-9" aria-hidden="true" tabindex="-1"></a>   <span class="cf">try</span>:</span>
<span id="cb165-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-10" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> <span class="bu">float</span>(s)</span>
<span id="cb165-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-11" aria-hidden="true" tabindex="-1"></a>   <span class="cf">except</span>:</span>
<span id="cb165-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-12" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> fail</span>
<span id="cb165-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb165-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-14" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> to_int(s, fail<span class="op">=</span><span class="va">None</span>):</span>
<span id="cb165-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-15" aria-hidden="true" tabindex="-1"></a>   <span class="co">"""</span></span>
<span id="cb165-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-16" aria-hidden="true" tabindex="-1"></a><span class="co">   An exception-free “conversion” from a string to an `int`. User can</span></span>
<span id="cb165-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-17" aria-hidden="true" tabindex="-1"></a><span class="co">   specify what to return for invalid input.</span></span>
<span id="cb165-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-18" aria-hidden="true" tabindex="-1"></a><span class="co">   """</span></span>
<span id="cb165-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-19" aria-hidden="true" tabindex="-1"></a>   <span class="cf">try</span>:</span>
<span id="cb165-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-20" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> <span class="bu">int</span>(s)</span>
<span id="cb165-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-21" aria-hidden="true" tabindex="-1"></a>   <span class="cf">except</span>:</span>
<span id="cb165-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-22" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> fail</span>
<span id="cb165-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb165-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-24" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">"__main__"</span>:</span>
<span id="cb165-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-25" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> to_float(<span class="bu">input</span>(<span class="st">"Float?: "</span>)) <span class="kw">is</span> <span class="va">None</span>:</span>
<span id="cb165-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-26" aria-hidden="true" tabindex="-1"></a>      <span class="bu">print</span>(<span class="st">"Not a float"</span>)</span>
<span id="cb165-27"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-27" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> to_int(<span class="bu">input</span>(<span class="st">"Int?: "</span>)) <span class="kw">is</span> <span class="va">None</span>:</span>
<span id="cb165-28"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb165-28" aria-hidden="true" tabindex="-1"></a>      <span class="bu">print</span>(<span class="st">"Not an integer"</span>)</span></code></pre></div>
<p>This design means we can run it as a script, which will then ‘exercise’ the functions defined in the module. In any Python script, we can now <strong><code>import</code></strong> this module (the ‘exercise/test’ code will then not run).</p>
<h5 id="useutil.py-using-our-custom-module"><strong><code>useutil.py</code></strong> — <strong><em>Using Our Custom Module</em></strong></h5>
<div class="sourceCode" id="cb166"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb166-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb166-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb166-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb166-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb166-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb166-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""Some random script using our utility functions module"""</span></span>
<span id="cb166-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb166-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb166-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb166-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb166-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb166-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> util</span>
<span id="cb166-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb166-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb166-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb166-8" aria-hidden="true" tabindex="-1"></a>n <span class="op">=</span> util.to_float(<span class="bu">input</span>(<span class="st">"Floating point number?: "</span>))</span>
<span id="cb166-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb166-9" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> n <span class="kw">is</span> <span class="va">None</span>:</span>
<span id="cb166-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb166-10" aria-hidden="true" tabindex="-1"></a>   sys.stderr.write(<span class="st">"Not a valid floating pointer number</span><span class="ch">\n</span><span class="st">"</span>)</span>
<span id="cb166-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb166-11" aria-hidden="true" tabindex="-1"></a>   sys.exit(<span class="dv">1</span>)</span></code></pre></div>
<p>Notice that you do not add a <strong><code>.py</code></strong> extension when you <strong><code>import util</code></strong>. You could have used any of the other forms of <strong><code>import</code></strong> with <code>util</code>.</p>
<p>Once programs get big enough, and this is true regardless of programming language, we typically create a <span class="stx">project</span> directory (some call this ‘folder’), containing only files related to that project. The above two files should therefore be placed in the same directory/folder.</p>
<p>More complex organisation may involve subdirectories under the <span class="stx">project</span> directory, which Python can treat as ‘packages’ (which abstractly means a <em>framework</em> containing multiple modules). You may want to put re-usable library modules in an altogether different directory, etc.</p>
<p>For example, assuming your current directory is some arbitrary location, and you are inside a PowerShell session, and assuming your normal working directory is <code>C:\Course\Work</code>, then the following command lines would suffice, as long as you choose an appropriate name for <span class="stx">project</span> (e.g. <code>DemoPrj</code>):</p>
<h6 id="pwsh-create-and-populate-a-project-directory"><em>pwsh — Create and populate a project directory</em></h6>
<div class="ws cmdline">
<div class="line-block"><sup>&gt;</sup> <strong>cd</strong> C:\Course\Work<br>
<sup>&gt;</sup> <strong>mkdir</strong> <span class="stx">project</span><br>
<sup>&gt;</sup> <strong>cd</strong> <span class="stx">project</span><br>
<sup>&gt;</sup> <strong>notepad</strong> util.py<br>
<sup>&gt;</sup> <strong>notepad</strong> useutil.py<br>
<sup>&gt;</sup> <strong>python</strong> useutil.py</div>
</div>
<p>The last command executes the program. After each edit with the editor, save the relevant file and exit. Instead of running <code>notepad</code> (which on our computers actually runs <strong>Notepad<sup>2</sup></strong>), you can use any editor, e.g., <strong><code>code</code></strong> (VSCode), as long as the Python files are created in the <span class="stx">project</span> directory/folder.</p>
<h3 id="module-search-path">Module Search Path</h3>
<p>When you <code>import</code> a module, Python will first look in the <em>current directory</em> for the module. If not found, it will then search through the lists of directories specified in <a href="https://docs.python.org/3/library/sys.html#sys.path" title="Python Docs Library / sys # path"><strong><code>sys.path</code></strong></a>, which is a <strong><code>list</code></strong>, i.e., it is <em>mutable</em>.</p>
<p>You can prepend, or append more directories to search to the <code>sys.path</code> list, <em>before</em> your scripts perform an <code>import</code> statements. Alternatively, you can set a special environment variable: <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" title="Python Docs — Using Python # PYTHONPATH"><code>PYTHONPATH</code></a>. It can contain a list of directories, separated by semicolon (<code>;</code>) on Windows, or colon (<code>:</code>) on POSIX systems.</p>
<p>Python will search directories in <code>PYTHONPATH</code> <em>first</em>, i.e., the values in <code>sys.path</code> are <em>appended</em> to the directories in <code>PYTHONPATH</code>. The current directory is always searched first.</p>
<p>Instead of placing modules in a directory/folder, you can put them in a Zip file. The Zip file, e.g., <code>mymodules.zip</code>, can then be mentioned in <code>sys.path</code> or <code>PYTHONPATH</code>. Very convenient for larger projects.</p>
<h2 id="virtual-environments">Virtual Environments</h2>
<p>There are several reasons why the concept of Python virtual environments exists. One reason is that you may want to run a newer Python on MacOS or Linux, and you do not want to, or cannot disturb the system Python — and you generally should not. Another reason may be to isolate package and module installation with <strong><a href="https://pip.pypa.io/en/stable/" title="PyPa — pip Documentation">pip</a></strong>, so that the installation can be easily repeated for new environments, or for packaging your program, so that only the requirements are installed (and not necessarily IDEs and other tools).</p>
<p>An environment is a directory. This directory has subdirectories, with a specific structure. One important point to understand, is that a virtual environment is not a relocateable copy of Python. Only packages you install with <strong><a href="https://pip.pypa.io/en/stable/" title="PyPa — pip Documentation">pip</a></strong>, will be placed in this environment. This isolates the environment from the site environment. But the name and location of the environment is hard­coded in places, which means it cannot be copied, renamed, or moved.</p>
<p>In almost all cases, you must <em>recreate</em> the environment elsewhere. To keep a new environment identical to the one you want to clone, you have to:</p>
<ul>
<li>Run ‘<code>pip freeze &gt; requirements.txt</code>’ in the original environment (it being active).</li>
<li>Create your new bare-bones environment and <strong>activate</strong> it.</li>
<li>Copy the <code>requirements.txt</code> file to this new environment.</li>
<li>Run ‘<code>pip install -r requirements.txt</code>’ to re-install packages.</li>
</ul>
<p>Fairly tedious, but there seems to be no other really robust solution.</p>
<h3 id="virtualenv">VirtualEnv</h3>
<p>The <strong><a href="https://virtualenv.pypa.io/en/stable/" title="PyPa — Virtualenv">virtualenv</a></strong> tool has been around for a long time, and is still maintained. The last release can be foun on <a href="https://pypi.org/project/virtualenv/" title="PyPI — virtualenv">PyPI</a>. The most basic use is simple: ‘<code>virtualenv</code> ‹<em>env-dir</em>›’, where ‹<em>env-dir</em>› is the base directory for your new Python vir­tual en­vi­ron­ment. It will by default install <strong><a href="https://pip.pypa.io/en/stable/" title="PyPa — pip Documentation">pip</a></strong>, <strong><a href="https://setuptools.readthedocs.io/en/latest/" title="ReadTheDocs — setuptools Documentation">setuptools</a></strong>, and <strong><a href="http://wheel.readthedocs.io/en/stable/" title="ReadTheDocs — Wheel">wheel</a></strong>.</p>
<p>There are <code>virtualenv</code> options to <code>--clear</code> an existing environment. Do not get too excited about the <code>--relocatable</code> option you will find when you run it with <code>--help</code>. Apparently it is slated to be deprecated, and has issues, which we can confirm.</p>
<p>A <strong><a href="https://virtualenv.pypa.io/en/stable/" title="PyPa — Virtualenv">virtualenv</a></strong> environment must be enabled by <code>source</code>'ing a shell script from your ‹<em>env-dir</em>›<code>/bin/</code> directory, called <code>activate</code> (or <code>activate.fish</code>, if you are using the <strong><a href="https://fishshell.com/" title="Fish Shell — Finally a command line shell for the 90&#39;s">fish</a></strong> <a href="https://fishshell.com/" title="Fish Shell — Finally a command line shell for the 90&#39;s">shell</a>). On Windows you must run the <code>activate.bat</code> file in that directory from a Command Prompt Console or PowerShell session.</p>
<p>To deactivate the environment (reset any environment variables and your <code>PATH</code> en­vi­ron­ment va­ri­ab­le), simply run: <code>deactivate</code>. This command will work equally in any shell, including the Com­mand Prompt or PowerShell.</p>
<p>Deleting an environment means you must find the correct environment under <code>.virtualenvs</code>. The environment directory name is normally displayed as part of your shell prompt.</p>
<p>You can place a <code>pip.conf</code> (or <code>pip.ini</code> on Windows), in the ‹<em>env-dir</em>›ectory.</p>
<h3 id="standard-venv">Standard venv</h3>
<p>From around Python 3.3, the <strong><a href="https://docs.python.org/3/library/venv.html" title="Python Docs — venv - Creation of virtual environments">venv</a></strong> module became standard. It duplicates most, if not all, of the <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#virtualenv">Virtualenv</a> features. It also requires you to source an <code>activate</code> script in ‹<em>env-dir</em>› on POSIX, or run <code>activate.bat</code> on Windows, but it is stored in the ‹<em>env-dir</em>›<code>\Scripts</code> directory.</p>
<p>Similarly, to restore your environment, you can simply run <code>deactivate</code> in any shell or operating system. The environment can be removed by deleting the ‹<em>env-dir</em>›ectory.</p>
<p>Here is an example sequence of Windows PowerShell commands to create and experiment with a virtual environment using the standard <strong><code>venv</code></strong>:</p>
<h6 id="pwsh-example-command-sequence-to-create-and-use-a-virtual-environment"><em>pwsh — Example command sequence to create and use a virtual environment</em></h6>
<div class="ws cmdline">
<div class="line-block"><sup>&gt;</sup> <strong>cd</strong> C:\Course\Work<br>
<sup>&gt;</sup> <strong>python</strong> -m venv --prompt MYPY mypy<br>
<sup>&gt;</sup> <strong>.</strong> .\mypy\Scripts\Activate.ps1<br>
<sup>&gt;</sup> <strong>which</strong> python<br>
<sup>&gt;</sup> <strong>pip</strong> list<br>
<sup>&gt;</sup> <strong>python</strong> -m pip install pip --upgrade<br>
<sup>&gt;</sup> <strong>pip</strong> list<br>
<sup>&gt;</sup> <strong>deactivate</strong> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="sourceCode bash"><span class="co">#←only when done with the environment</span></code></div>
</div>
<p>The <code>--prompt MYPY</code> is optional; if not present, the virtual environment directory name (<code>mypy</code> in the example), will be added to your command-line prompt.</p>
<p>In a <span class="sc">POSIX</span> shell environment (Linux, MacOS, WSL, MSYS2, Cygwin), the commands are the same, except for two considirations:</p>
<ul>
<li>Set working directory: <span class="cmdline"><strong><code>cd</code></strong> <code>$HOME/course/work</code></span></li>
<li>Activate environment: <span class="cmdline"><strong><code>source</code></strong> <code>$HOME/course/work/mypy/bin/activate</code></span></li>
</ul>
<p>To activate the environment if you are running a Command Prompt shell, use:</p>
<ul>
<li>Set working directory: <span class="cmdline"><strong><code>cd</code></strong> <code>C:\course\work</code></span></li>
<li>Activate environment: <span class="cmdline"><code>mypy\bin\activate.bat</code></span></li>
</ul>
<div class="admonition note">
<p><strong>NOTE</strong> — <strong><em>Ubuntu 18.04 and Venv</em></strong></p>
<p>Ubuntu 18.04 makes many standard Python modules installable <em>packages</em> (to be installed with <strong><code>apt</code></strong>). This is true for <strong><code>venv</code></strong> as well. Run <strong><code>sudo apt install python3-venv</code></strong> <strong>before</strong> you try the above commands.</p>
</div>
<p>Obviously, at work or home, you can use any directory. If you are using <span class="sc">WSL</span>, you could use this starting directory, assuming a <code>C:\Course\Work</code> directory exists:</p>
<ul>
<li>Set working directory: <span class="cmdline"><strong><code>cd</code></strong> <code>/mnt/c/Course/Work</code></span></li>
<li>Activate environment: <span class="cmdline"><strong><code>source</code></strong> <code>/mnt/c/Course/Work/mypy/bin/activate</code></span></li>
</ul>
<p>If you know your current working directory, you do not have to use absolute paths, of course. Furthermore, note that <strong><code>source</code></strong> is an alias for the ‘<strong><code>.</code></strong>’ built-in command in <span class="sc">POSIX</span> shells; PowerShell does not have such a synonym, only ‘<strong><code>.</code></strong>’.</p>
<h3 id="virtualenv-1">VirtualEnv</h3>
<p>The <strong><a href="https://virtualenv.pypa.io/en/stable/" title="PyPa — Virtualenv">virtualenv</a></strong> tool has been around for a long time, and is still maintained. The last release can be foun on <a href="https://pypi.org/project/virtualenv/" title="PyPI — virtualenv">PyPI</a>. The most basic use is simple: ‘<code>virtualenv</code> ‹<em>env-dir</em>›’, where ‹<em>env-dir</em>› is the base directory for your new Python vir­tual en­vi­ron­ment. It will by default install <strong><a href="https://pip.pypa.io/en/stable/" title="PyPa — pip Documentation">pip</a></strong>, <strong><a href="https://setuptools.readthedocs.io/en/latest/" title="ReadTheDocs — setuptools Documentation">setuptools</a></strong>, and <strong><a href="http://wheel.readthedocs.io/en/stable/" title="ReadTheDocs — Wheel">wheel</a></strong>.</p>
<p>There are <code>virtualenv</code> options to <code>--clear</code> an existing environment. Do not get too excited about the <code>--relocatable</code> option you will find when you run it with <code>--help</code>. Apparently it is slated to be deprecated, and has issues, which we can confirm.</p>
<p>A <strong><a href="https://virtualenv.pypa.io/en/stable/" title="PyPa — Virtualenv">virtualenv</a></strong> environment must be enabled by <code>source</code>'ing a shell script from your ‹<em>env-dir</em>›<code>/bin/</code> directory, called <code>activate</code> (or <code>activate.fish</code>, if you are using the <strong><a href="https://fishshell.com/" title="Fish Shell — Finally a command line shell for the 90&#39;s">fish</a></strong> <a href="https://fishshell.com/" title="Fish Shell — Finally a command line shell for the 90&#39;s">shell</a>). On Windows you must run the <code>activate.bat</code> file in that directory from a Command Prompt Console or PowerShell session.</p>
<p>To deactivate the environment (reset any environment variables and your <code>PATH</code> en­vi­ron­ment va­ri­ab­le), simply run: <code>deactivate</code>. This command will work equally in any shell, including the Com­mand Prompt or PowerShell.</p>
<p>Deleting an environment means you must find the correct environment under <code>.virtualenvs</code>. The environment directory name is normally displayed as part of your shell prompt.</p>
<p>You can place a <code>pip.conf</code> (or <code>pip.ini</code> on Windows), in the ‹<em>env-dir</em>›ectory.</p>
<h3 id="pipenv">pipenv</h3>
<p>A newer option is <strong><a href="https://docs.pipenv.org/" title="Pipenv: Python Dev Workflow for Humans">pipenv</a></strong>. It seems to work well on Windows, too. It combines <strong><a href="https://pip.pypa.io/en/stable/" title="PyPa — pip Documentation">pip</a></strong> and <strong><a href="https://virtualenv.pypa.io/en/stable/" title="PyPa — Virtualenv">virtualenv</a></strong>. It takes a slightly different approach with respect to where the Python and <strong><a href="https://pip.pypa.io/en/stable/" title="PyPa — pip Documentation">pip</a></strong>-specific files are stored, and how to activate and deactivate the virtual environment.</p>
<p>The key here is to <em>first</em> create a directory: your ‹<em>env-dir</em>›ectory for your new environment. It should be empty. Set this directory as your current working directory (<code>cd</code> ‹<em>env-dir</em>›). Now, with <code>pipenv</code> hopefully on your <code>PATH</code>, run: <code>pipenv --three</code> to create a Python3 environment. You will only see a file called: <code>Pipfile</code>, in this directory after completion, keeping things nice and clean. The Python and library files are stored in a <code>$HOME/.virtualenvs</code> directory.</p>
<p>To activate the environment, the ‹<em>env-dir</em>›ectory must be your current directory. Then you run <code>pipenv shell</code>, which will start a <em>new</em> shell, with the appropriate environment variables and <code>PATH</code> set. To deactivate the enviroment, simply exit this shell (run <code>exit</code> on either POSIX or Windows).</p>
<p>To remove an environment, the easiest solution is to simply run ‘<code>pipenv --rm</code>’ with the ‹<em>env-dir</em>›ectory as your current directory. It will not remove the current directory, only the Python and library files in the <code>.virtualenvs</code> directory.</p>
<h4 id="development-only-packages">Development-Only Packages</h4>
<p>What is very useful with <strong><a href="https://docs.pipenv.org/" title="Pipenv: Python Dev Workflow for Humans">pipenv</a></strong>, is its <code>--dev</code> switch after the <code>install</code> command. This will still in­stall the ‹<em>package</em>›, but will mark it for development only; this means it is not part of the pro­gram you are developing. So testing packages, Python shells, and other development tools, should be installed with the <code>--dev</code> switch.</p>
<p>This makes it easy to find the packages actually used by your <em>program</em>. So with a copy of your <code>Pipfile</code> and a new empty directory, running <code>pipenv install</code> will only in­stall <em>non</em>-de­ve­lop­ment pack­ag­es. Adding <code>--dev</code> will also install the development packages. And it will create a new environment for this directory.</p>
<p>If you have problems with <strong><code>pipenv</code></strong>, it can sometimes be useful to add the <code>--skip-lock</code> option, for example:</p>
<div class="ws cmdline">
<div class="line-block"><sup>&gt;</sup> <strong><code>pipenv</code></strong> install black yapf pylint flake8 --skip-lock --dev</div>
</div>
<p>Also understand, that you install <strong><code>pipenv</code></strong> in your ‘main’ or ‘user’ environment, and <strong>not</strong> run any <strong><code>pipenv</code></strong> command inside a virtual environment. And, do not use <strong><code>pip</code></strong> directly to install modules.</p>
<p>To ‘activate’ the virtual environment, you run: <strong><code>pipenv shell</code></strong>, after making the environment directory, the current working directory. Simply exit this new shell to ‘deactivate’ the environment.</p>
<p>Running launchers like <strong><code>black</code></strong> or <strong><code>pylint</code></strong>, you can either run them outside the virtual environment using: <strong><code>pipenv run black</code></strong>, or <strong><code>pipenv run pylint</code></strong>, or after activating the virtual environment, you can run them as normal (just using <strong><code>black</code></strong> or <strong><code>pylint</code></strong>).</p>
<div class="admonition note">
<p><strong>NOTE</strong> — <strong><em>Managing Different Python Versions</em></strong></p>
<p>You can use <a href="https://github.com/pyenv/pyenv" title="GitHub — pyenv"><strong><code>pyenv</code></strong></a> to manage different <em>versions</em> of Python on Linux, MacOS, and WSL. It allows one to arbitrarily switch between any version, or even install any Python version. This is independent of virtual <em>environments</em>. On Windows, outside of WSL, a port of <strong><code>pyenv</code></strong> called <a href="https://github.com/pyenv-win/pyenv-win"><strong><code>pyenv-win</code></strong></a> is available (<a href="https://pypi.org/project/pyenv-win/" title="pypi — pyenv-win">documentation here</a>).</p>
</div>
<h3 id="repl.it-notes">Repl.it Notes</h3>
<p>When creating a Python ‘repl’ on <a href="https://repl.it/"><strong>repl.it</strong></a>, you are not given a Linux bash shell, but only an editor and the standard Python <span class="sc">REPL</span>. The ‘Run’ button looks for, and only ever runs, <code>main.py</code>. Also not convenient. One way out, is to put this code in the <code>main.py</code> file:</p>
<h5 id="main.py-example-file-on-repl.it"><strong><code>main.py</code></strong> — <strong><em>Example File on Repl.it</em></strong></h5>
<div class="sourceCode" id="cb167"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb167-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb167-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"Enter a bash shell. Type `exit` to return."</span>)</span>
<span id="cb167-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb167-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span>
<span id="cb167-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb167-3" aria-hidden="true" tabindex="-1"></a>os.system(<span class="st">'bash --login'</span>)</span></code></pre></div>
<p>Now, when you click on the ‘Run’ button, it will open a bash shell. However, you can still create an run Python code in, for example, a ‘C’ or ‘C++’ repl, since you are provided with a bash shell.</p>
<p>In either case, if you want to create a Python virtual environment, you should first unset the <code>PYTHONPATH</code> variable:</p>
<h6 id="sh-unset-repl.its-pythonpath-environment-variable"><em>sh — Unset Repl.it's <code>PYTHONPATH</code> Environment Variable</em></h6>
<div class="ws cmdline">
<div class="line-block"><sup>$</sup> unset PYTHONPATH</div>
</div>
<p>Then you can create a Python virtual environment as follows (in a <code>pie</code> subdirectory in the example). We also show how to install <code>black</code>, <code>yapf</code>, <code>flake8</code> and <code>pylint</code> in this environment after <em>activating</em> the environment.</p>
<h6 id="sh-create-and-update-a-python-virtual-environment"><em>sh — Create and Update a Python Virtual Environment</em></h6>
<div class="ws cmdline">
<div class="line-block"><sup>$</sup> python -m venv pie<br>
<sup>$</sup> source pie/bin/activate<br>
<sup>$</sup> python -m pip install --upgrade pip<br>
<sup>$</sup> pip install black yapf pylint flake8</div>
</div>
<p>You can optionally install <code>ipython</code> with <code>pip</code>, if you like. Depending on storage space, Repl.it may not save your virtual environment, and you may have to repeat the steps every time you reconnect to your ‘repl’.</p>
<h2 id="pip-certificate-failure">Pip Certificate Failure</h2>
<p>If you get an <span class="sc">HTTPS</span> certificate failure using the <code>pip</code> command, it could be a result of your system clock not being correct. Check that first, and ensure that your clock is updated from the internet (<span class="sc">NTP</span>).</p>
<p>Unless the <span class="sc">CERTIFICATE_VERIFY_FAILED</span> error is fixed, you will not be able to install or update modules, and creating virtual environments will be pointless as a result. Although tedious, you can add the following options to any <code>pip</code> command line:</p>
<p><span class="tab1"></span><code>--trusted-host pypi.org</code>, and<br>
<span class="tab1"></span><code>--trusted-host pypi.python.org</code>, and<br>
<span class="tab1"></span><code>--trusted-host files.pythonhosted.org</code></p>
<p>For example, to upgrade <code>pip</code>:</p>
<h6 id="sh-upgrade-pip-with-trusted-hosts-option"><em>sh — Upgrade pip with Trusted Hosts Option</em></h6>
<div class="ws cmdline">
<div class="line-block"><sup>$</sup> python -m pip install --trusted-host pypi.org \<br>
<sup>&nbsp;</sup> <span class="tab1"></span>--trusted-host pypi.python.org \<br>
<sup>&nbsp;</sup> <span class="tab1"></span>--trusted-host files.pythonhosted.org \<br>
<sup>&nbsp;</sup> <span class="tab1"></span>--upgrade pip</div>
</div>
<p>If you are using the Windows Command Prompt, type everything above on a single line, <em>without</em> the backslashes. If you are using PowerShell, simply replace the backslashes with a <em>backtick</em> character (<strong><code>`</code></strong>), or type everything on one line, leaving out the backslashes.</p>
<p>Alternatively, you can add a setting in a <code>pip</code> <a href="https://pip.pypa.io/en/stable/user_guide/#config-file" title="Pip Docs — Config File">config file</a>. It is called <code>pip.ini</code> on Windows, and <code>pip.conf</code> on Linux or macOS. A Python virtual environment will have its own <code>pip.ini</code>/<code>pip.conf</code> file. Add the following to the file:</p>
<h5 id="pip.confpip.ini-pip-trusted-host-configuration"><strong><code>pip.conf</code></strong>/<strong><code>pip.ini</code></strong> — <strong><em>Pip Trusted Host Configuration</em></strong></h5>
<div class="sourceCode" id="cb168"><pre class="sourceCode ini"><code class="sourceCode ini"><span id="cb168-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb168-1" aria-hidden="true" tabindex="-1"></a><span class="kw">[global]</span></span>
<span id="cb168-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb168-2" aria-hidden="true" tabindex="-1"></a><span class="dt">trusted-host </span><span class="ot">=</span><span class="st"> pypi.org</span></span>
<span id="cb168-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb168-3" aria-hidden="true" tabindex="-1"></a><span class="dt">               pypi.python.org</span></span>
<span id="cb168-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb168-4" aria-hidden="true" tabindex="-1"></a><span class="dt">               files.pythonhosted.org</span></span></code></pre></div>
<p>On Windows, you can modify your pip configuration file:<br>
<span class="tab1"></span><code>C:\Users\</code><span class="stx">username</span><code>\AppData\Roaming\pip\pip.ini</code><br>
or the <code>pip.ini</code> found in a virtual environment directory.</p>
<p>On macOS, the <code>pip.conf</code> is in:<br>
<span class="tab1"></span><code>$HOME/Library/Application Support/pip/pip.conf</code>.</p>
<p>On Linux, it should be in:<br>
<span class="tab1"></span><code>$HOME/.config/pip/pip.conf</code></p>
<p>Check the pip <a href="https://pip.pypa.io/en/stable/user_guide/#config-file" title="Pip Docs — Config File">config file</a> documentation for other file location possibilities.</p>
<h2 id="type-annotations-hints">Type Annotations / Hints</h2>
<p>Python itself allows you to pass any type of value as argument to functions; to return different types from a function at different places; and allows a variable to reference any type at different times — ‘duck typing’. However, by utilising the standard <a href="https://docs.python.org/3/library/typing.html" title="Python Docs — typing - Support for type hints"><strong><code>typing</code></strong></a> module (from Python 3.5), the third party module <a href="http://mypy-lang.org/" title="mypy — Optional Static Typing for Python"><strong><code>mypy</code></strong></a>, and the recommendations in <a href="https://www.python.org/dev/peps/pep-0484/" title="PEP 484 — Type Hints">PEP 484</a> (Type Hints), <a href="https://www.python.org/dev/peps/pep-0526/" title="PEP 526 — Syntax for Variable Annotations">PEP 526</a> (Syntax for Variable Annotations) and <a href="https://www.python.org/dev/peps/pep-3107/" title="PEP 3107 — Function Annotations">PEP 3107</a> (Function Annotations), one can use Python ‘as if’ it supports static typing.</p>
<p>Python only stores annotations, (in <code>__annotations__</code>), but does not act upon them, or behave any differently. On the other hand, analysing your script or program with <strong><code>mypy</code></strong>, may produce errors when hints and annotations do not match the types stored, passed, or returned.</p>
<h3 id="functions-1">Functions</h3>
<p>Using function annotations, you can specify the type of parameters, and the type of the return value from functions. Modified example from <strong><code>mypy</code></strong>'s <a href="https://mypy.readthedocs.io/en/latest/getting_started.html" title="Read the Docs — mypy / Getting Started">Getting Started</a> chapter:</p>
<h6 id="annotated-function-with-correct-and-incorrect-calls"><em>Annotated function with correct and incorrect calls</em></h6>
<div class="sourceCode" id="cb169"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb169-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb169-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> hello(who: <span class="bu">str</span>) <span class="op">-&gt;</span> <span class="bu">str</span>:</span>
<span id="cb169-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb169-2" aria-hidden="true" tabindex="-1"></a>   <span class="cf">return</span> <span class="st">"Hello, "</span> <span class="op">+</span> who</span>
<span id="cb169-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb169-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb169-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb169-4" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> badfunc() <span class="op">-&gt;</span> <span class="bu">int</span>:</span>
<span id="cb169-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb169-5" aria-hidden="true" tabindex="-1"></a>   <span class="cf">return</span> <span class="st">"123"</span>            <span class="co">#←Incompatible return type.</span></span>
<span id="cb169-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb169-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb169-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb169-7" aria-hidden="true" tabindex="-1"></a>s <span class="op">=</span> hello(<span class="st">"World"</span>)         <span class="co">#←OK.</span></span>
<span id="cb169-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb169-8" aria-hidden="true" tabindex="-1"></a>s <span class="op">=</span> hello(<span class="dv">42</span>)              <span class="co">#←Argument has incompatible type.</span></span></code></pre></div>
<p>See the <a href="https://mypy.readthedocs.io/en/latest/introduction.html" title="Read the Docs — mypy / Introduction"><strong><code>mypy</code></strong> documentation</a> for more examples, and consult the <a href="https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html" title="Read the Docs — mypy / Cheat Sheet (Python 3)">cheat sheet</a>.</p>
<h3 id="variables">Variables</h3>
<p>For some annotations and variable type hints, you should <code>import typing</code>, but for types like <code>int</code>, <code>float</code> and <code>str</code>, that is not necessary.</p>
<h6 id="variables-with-type-hints"><em>Variables with type hints</em></h6>
<div class="sourceCode" id="cb170"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb170-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb170-1" aria-hidden="true" tabindex="-1"></a>x: <span class="bu">int</span> <span class="op">=</span> <span class="dv">123</span>               <span class="co">#←Annotate and initialise a variable.</span></span>
<span id="cb170-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb170-2" aria-hidden="true" tabindex="-1"></a>y: <span class="bu">int</span>                     <span class="co">#←Annotate without initialising.</span></span>
<span id="cb170-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb170-3" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> <span class="st">"abc"</span>                  <span class="co">#←Incompatible type.</span></span>
<span id="cb170-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb170-4" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> <span class="dv">234</span>                    <span class="co">#←Correct type assigned.</span></span></code></pre></div>
<p>See the <a href="https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html#built-in-types" title="Read the Docs — mypy / Cheat Sheet (Python 3) # Built-in Types">Built-in Types</a> for more, and also <a href="http://mypy-lang.org/examples.html" title="mypy — Examples">other examples</a>.</p>
<h2 id="unit-testing">Unit Testing</h2>
<p><a href="https://en.wikipedia.org/wiki/Unit_testing" title="Wikipedia — Unit Testing">Unit testing</a> is a popular development paradigm, and supported by Python via the standard library's <a href="https://docs.python.org/3/library/doctest.html" title="PyDoc — doctest - Test interactive Python examples"><strong><code>doctest</code></strong></a> and <a href="https://docs.python.org/3/library/unittest.html" title="PyDoc — unittest - Unit testing framework"><strong><code>unittest</code></strong></a> modules.</p>
<h3 id="using-doctest">Using doctest</h3>
<p>The <a href="https://docs.python.org/3/library/doctest.html" title="PyDoc — doctest - Test interactive Python examples"><strong><code>doctest</code></strong></a> module allows you to write tests as part of your <em>docstring</em> documentation.</p>
<h5 id="doctestexa.py-doctest-module-example"><strong><code>doctestexa.py</code></strong> — <strong><em>DocTest Module Example</em></strong></h5>
<div class="sourceCode" id="cb171"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb171-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env pytnon3</span></span>
<span id="cb171-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb171-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb171-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-4" aria-hidden="true" tabindex="-1"></a><span class="co">Example to demonstrate simple `doctest` use. The tests are in docstrings.</span></span>
<span id="cb171-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-5" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb171-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb171-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-7" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> doubler(arg):</span>
<span id="cb171-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">"""</span></span>
<span id="cb171-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-9" aria-hidden="true" tabindex="-1"></a><span class="co">    Doubles `arg`. Only works with `int` values. Raises `TypeError`.</span></span>
<span id="cb171-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-10" aria-hidden="true" tabindex="-1"></a><span class="co">    &gt;&gt;&gt; doubler(123)</span></span>
<span id="cb171-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-11" aria-hidden="true" tabindex="-1"></a><span class="co">    246</span></span>
<span id="cb171-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb171-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-13" aria-hidden="true" tabindex="-1"></a><span class="co">    Will raise `TypeError` for invalid arguments (not `int`)</span></span>
<span id="cb171-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-14" aria-hidden="true" tabindex="-1"></a><span class="co">    &gt;&gt;&gt; doubler(12.3)</span></span>
<span id="cb171-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-15" aria-hidden="true" tabindex="-1"></a><span class="co">    Traceback (most recent call last):</span></span>
<span id="cb171-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-16" aria-hidden="true" tabindex="-1"></a><span class="co">        ...</span></span>
<span id="cb171-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-17" aria-hidden="true" tabindex="-1"></a><span class="co">    TypeError: Integer value expected</span></span>
<span id="cb171-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-18" aria-hidden="true" tabindex="-1"></a><span class="co">    """</span></span>
<span id="cb171-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">type</span>(arg) <span class="kw">is</span> <span class="kw">not</span> <span class="bu">int</span>:</span>
<span id="cb171-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-20" aria-hidden="true" tabindex="-1"></a>        <span class="cf">raise</span> <span class="pp">TypeError</span>(<span class="st">"Integer value expected"</span>)</span>
<span id="cb171-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">2</span> <span class="op">*</span> arg</span>
<span id="cb171-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb171-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb171-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-24" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">"__main__"</span>:</span>
<span id="cb171-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-25" aria-hidden="true" tabindex="-1"></a>    <span class="im">import</span> doctest</span>
<span id="cb171-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb171-26" aria-hidden="true" tabindex="-1"></a>    doctest.testmod()</span></code></pre></div>
<p>You can <code>import</code> the above file as a module, and it will work as expected. You can even run it as a script (though it does not do any work, except define <code>doubler()</code>. However, when you run it with a <strong><code>-v</code></strong> switch, it will run the tests embedded in the function's <em>docstring</em>:</p>
<h6 id="running-the-unit-tests-in-functions-docstring"><em>Running the unit tests in function's docstring</em></h6>
<div class="ws cmdline">
<div class="line-block"><sup>&gt;</sup> <strong>python</strong> doctestexa.py -v<br>
<sup>&gt;</sup> <strong>python</strong> -m doctest -v doctestexa.py</div>
</div>
<p>The last command line example would only be necessary if <code>doctest.testmod()</code> was not executed by yourself in the module. Either way, the output should appear as follows:</p>
<pre class="output"><code>Trying:
    doubler(123)
Expecting:
    246
ok
Trying:
    doubler(12.3)
Expecting:
    Traceback (most recent call last):
        ...
    TypeError: Integer value expected
ok
1 items had no tests:
    __main__
1 items passed all tests:
   2 tests in __main__.doubler
2 tests in 2 items.
2 passed and 0 failed.
Test passed.</code></pre>
<h3 id="unittest-module">Unittest Module</h3>
<h5 id="unittestexa.py-unittest-module-example"><strong><code>unittestexa.py</code></strong> — <strong><em>Unittest Module Example</em></strong></h5>
<div class="sourceCode" id="cb173"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb173-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env pytnon3</span></span>
<span id="cb173-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb173-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb173-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-4" aria-hidden="true" tabindex="-1"></a><span class="co">Example to demonstrate simple `unittest` use. Requires and tests the</span></span>
<span id="cb173-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-5" aria-hidden="true" tabindex="-1"></a><span class="co">`doubler()` function in the `doctestexa.py` module.</span></span>
<span id="cb173-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-6" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb173-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-7" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> unittest</span>
<span id="cb173-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-8" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> doctestexa <span class="im">import</span> doubler</span>
<span id="cb173-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb173-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-10" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Tester(unittest.TestCase):</span>
<span id="cb173-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb173-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> setUp(<span class="va">self</span>): <span class="cf">pass</span>                   <span class="co">#←optional preparation.</span></span>
<span id="cb173-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> tearDown(<span class="va">self</span>): <span class="cf">pass</span>                <span class="co">#←optional cleanup.</span></span>
<span id="cb173-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb173-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-15" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> test_doubling_42_bad(<span class="va">self</span>):</span>
<span id="cb173-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-16" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.assertEqual(doubler(<span class="dv">42</span>), <span class="dv">48</span>)</span>
<span id="cb173-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb173-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-18" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> test_doubling_42_ok(<span class="va">self</span>):</span>
<span id="cb173-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-19" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.assertEqual(doubler(<span class="dv">42</span>), <span class="dv">84</span>)</span>
<span id="cb173-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb173-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-21" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> test_doubling_exception(<span class="va">self</span>):</span>
<span id="cb173-22"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-22" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.assertRaises(<span class="pp">TypeError</span>, doubler, <span class="fl">12.34</span>)</span>
<span id="cb173-23"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb173-24"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb173-25"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-25" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">"__main__"</span>:</span>
<span id="cb173-26"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb173-26" aria-hidden="true" tabindex="-1"></a>    unittest.main()</span></code></pre></div>
<p>You can run the unit tests on an individual file, or by using the <code>discover</code> argument as follows (where the verbose <code>-v</code> switch is optional).</p>
<div class="ws cmdline">
<div class="line-block"><sup>&gt;</sup> <strong>python</strong> unittestexa.py -v<br>
<sup>&gt;</sup> <strong>python</strong> -m unittest discover -v</div>
</div>
<p>The last command will look for unit tests in all the files in the current directory. Either way, the output will be as follows:</p>
<pre class="output"><code>test_doubling_42_bad (__main__.Tester) ... FAIL
test_doubling_42_ok (__main__.Tester) ... ok
test_doubling_exception (__main__.Tester) ... ok

======================================================================
FAIL: test_doubling_42_bad (__main__.Tester)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "testexa02.py", line 15, in test_doubling_42_bad
    self.assertEqual(doubler(42), 48)
AssertionError: 84 != 48

----------------------------------------------------------------------
Ran 3 tests in 0.001s

FAILED (failures=1)</code></pre>
<p>The <code>test_doubling_42_bad()</code> ‘test’ was designed to fail, so that you can see what a failed test looks like.</p>
<p>Another popular unit testing framework, is <a href="https://docs.pytest.org/en/latest/" title="pytest — Helps you write better programs"><strong><code>pytest</code></strong></a>, which can also report on test <a href="https://en.wikipedia.org/wiki/Code_coverage" title="Wikipedia — Code coverage">code coverage</a> with the <code>--cov</code> and <code>--cov-fail-under</code><span class="stx">percentage</span> command line options. This <a href="https://sourcery.ai/blog/python-best-practices/" title="Sourcery — Python Best Practises">best practices</a> site provides one view of a Python project setup, that includes <strong><code>pytest</code></strong>.</p>
<h2 id="windows-consoles">Windows Consoles</h2>
<p>From late 2017, and enabled on all current (updated) Windows 10 PCs, the Console also interprets these sequences correctly. See: <a href="https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences" title="MS Docs — Console Virtual Terminal Sequences">Console Virtual Terminal Sequences</a>. Un­for­tu­nate­ly, although these sequences will work in a batch file, or in PowerShell, the ability must be explicitly enabled in normal console programs, which is a Windows API call (non-portable).</p>
<p>Alternatively, you can enable this in the registry for <strong><em>all</em></strong> Console instances, by modifying the Windows Registry. It requires a <code>DWORD</code> key called <code>VirtualTerminalLevel</code>, which you can set at user level, and/or at machine level (all users).</p>
<ul>
<li><code>HKCU\</code><br>
<span class="tab1"></span><code>Console\VirtualTerminalLevel</code></li>
<li><code>HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\</code><br>
<span class="tab1"></span><code>Console\VirtualTerminalLevel</code></li>
</ul>
<p>Where <code>HKCU</code> is short for: <code>HKEY_CURRENT_USER</code> and <code>HKLM</code> is short for: <code>HKEY_LOCAL_MACHINE</code>. You can save the following in a file (<code>vtlevel.reg</code>) and import it into the Registry:</p>
<h5 id="vtlevel.reg-virtual-terminal-level-registry-settings"><strong><code>vtlevel.reg</code></strong> — <strong><em>Virtual Terminal Level Registry Settings</em></strong></h5>
<pre class="text"><code>Windows Registry Editor Version 5.00

[HKEY_CURRENT_USER\Console]
"VirtualTerminalLevel"=dword:00000001

[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Console]
"VirtualTerminalLevel"=dword:00000001</code></pre>
<p>If you do not want it enabled system-wide, remove the <code>HKEY_LOCAL_MACHINE</code> setting first.</p>
<p>For example then, to clear the screen, you only have to output the sequence: <span class="key">ESC</span><code>[2J</code>, which will work in most terminal environments (Unix/Linux), and in the Windows Console (Command Prompt or PowerShell):</p>
<h6 id="python-terminal-escape-sequence-to-clear-screen-and-home-cursor"><em>Python — Terminal Escape Sequence to Clear Screen and Home Cursor</em></h6>
<div class="sourceCode" id="cb176"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb176-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb176-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"</span><span class="ch">\x1B</span><span class="st">[2J</span><span class="ch">\x1B</span><span class="st">[0H"</span>)</span></code></pre></div>
<p>If you do not have permissions to modify the Registry, you can still enable this feature in a Python script using a ‘trick’:</p>
<h6 id="python-trick-to-enable-virtual-terminal-in-windows-console"><em>Python — Trick to Enable Virtual Terminal in Windows Console</em></h6>
<div class="sourceCode" id="cb177"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb177-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb177-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"</span><span class="ch">\x1B</span><span class="st">[2J</span><span class="ch">\x1B</span><span class="st">[0H"</span>)       <span class="co">#←will not work</span></span>
<span id="cb177-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb177-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span>
<span id="cb177-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb177-3" aria-hidden="true" tabindex="-1"></a>os.system(<span class="st">''</span>)</span>
<span id="cb177-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb177-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"</span><span class="ch">\x1B</span><span class="st">[2J</span><span class="ch">\x1B</span><span class="st">[0H"</span>)       <span class="co">#←will now work</span></span></code></pre></div>
<p>This really a bit of a hack, which is why we wholeheartedly recommend that you install and use <a href="https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701?activetab=pivot:overviewtab" title="Windows Store: Windows Terminal">Windows Terminal</a>. You can download an <code>.msixbundle</code> from <a href="https://github.com/microsoft/terminal/releases" title="GitHub — Windows Terminal / Releases">GitHub</a>. Just add an extension of <code>.zip</code>, which will allow you to extract <code>Cascadia</code>…<code>.msix</code> files from the download.</p>
<p>Choose the correct one, e.g.: <code>CascadiaPackage_1.5.3242.0_x64.msix</code>, and append <code>.zip</code>. Now, you can extract this file to some directory, e.g. <code>C:\winterm</code>. The executable for Windows Terminal is <code>wt.exe</code> (or <code>WindowsTerminal.exe</code>). You can make a shortcut to it, or ensure it is in your <code>PATH</code> environment variable.</p>
<p>Better yet, convince you <span class="sc">IT</span> department to install Windows Terminal ‘the official way’. It is an official Microsoft Product with no real downsides, since it is also a replacement for PuTTY (assuming you have either enabled, or installed OpenSLL); and can run shells from a <span class="sc">WSL</span> installation.</p>
<h1 id="whiteboard-bits">Whiteboard Bits</h1>
<p>Some notes from the ‘whiteboard’ arranged by day.</p>
<h2 id="dies-primus">Dies Primus</h2>
<h3 id="winpython-links">WinPython Links</h3>
<ul>
<li><a href="https://winpython.github.io/#releases">All WinPython Releases</a>.</li>
<li>Smallest: <a href="https://github.com/winpython/winpython/releases/download/3.0.20201028/Winpython64-3.8.6.0dot.exe">WinPython64-3.8.6.0dot.exe</a></li>
<li>Biggest: <a href="https://github.com/winpython/winpython/releases/download/3.0.20201028/Winpython64-3.8.6.0cod.exe">WinPython64-3.8.6.0cod.exe</a></li>
</ul>
<h6 id="py-simplest-python-program"><em>py — Simplest Python Program</em></h6>
<div class="sourceCode" id="cb178"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb178-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb178-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"Hello, World!"</span>)</span></code></pre></div>
<p>The following program (script) can be used as a template for your own Python scripts.</p>
<h5 id="hello.py-hello-world-program"><strong><code>hello.py</code></strong> — <strong><em>‘Hello, World’ Program</em></strong></h5>
<div class="sourceCode" id="cb179"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb179-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb179-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb179-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb179-2" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*-</span></span>
<span id="cb179-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb179-3" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb179-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb179-4" aria-hidden="true" tabindex="-1"></a><span class="co">A simple ‘Hello, World’ program in Python</span></span>
<span id="cb179-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb179-5" aria-hidden="true" tabindex="-1"></a><span class="co">"""</span></span>
<span id="cb179-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb179-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb179-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb179-7" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main():</span>
<span id="cb179-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb179-8" aria-hidden="true" tabindex="-1"></a>   <span class="co">"""</span></span>
<span id="cb179-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb179-9" aria-hidden="true" tabindex="-1"></a><span class="co">   Writes generic greeting, and then input a user name,</span></span>
<span id="cb179-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb179-10" aria-hidden="true" tabindex="-1"></a><span class="co">   whom it also greets.</span></span>
<span id="cb179-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb179-11" aria-hidden="true" tabindex="-1"></a><span class="co">   """</span></span>
<span id="cb179-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb179-12" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">'Hello, World!'</span>)</span>
<span id="cb179-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb179-13" aria-hidden="true" tabindex="-1"></a>   name <span class="op">=</span> <span class="bu">input</span>(<span class="st">"What's your name?: "</span>)</span>
<span id="cb179-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb179-14" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"Well, hello </span><span class="sc">{0}</span><span class="st">!"</span>.<span class="bu">format</span>(name))</span>
<span id="cb179-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb179-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb179-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb179-16" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span>
<span id="cb179-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb179-17" aria-hidden="true" tabindex="-1"></a>   main()</span></code></pre></div>
<h3 id="expressions-types">Expressions &amp; Types</h3>
<p>Every <span class="stx">expr</span>ession in Python, is a <em>value</em> with a <span class="stx">type</span>. Simple expressions consists of a single value like a literal, while more complex expressions may contain <em>operators</em>. In short:</p>
<p><span class="tab1"></span><span class="stx">expr</span>ession <span class="math inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.36687em; vertical-align: 0em;"></span><span class="mrel">⇒</span></span></span></span></span> <span class="stx">value</span> <span class="math inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo></mrow><annotation encoding="application/x-tex">+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height: 0.66666em; vertical-align: -0.08333em;"></span><span class="mord">+</span></span></span></span></span> <span class="stx">type</span></p>
<h3 id="literals-1">Literals</h3>
<p>Literals are anonymous (unnamed) <em>constant</em> values. Python supports <em>integer</em>, <em>floating point</em>, and <em>string</em> literals, for example. Like any value, a literal is a value with a type: hence qualifies as an <span class="stx">expr</span>ession.</p>
<h3 id="types">Types</h3>
<p>The <a href="https://docs.python.org/3.8/library/functions.html#type" title="Python Docs — Built-In Functions # type()"><strong><code>type</code></strong></a> built-in function can determine the <span class="stx">type</span> of any <span class="stx">expr</span>ession. Its return value can be converted to a <strong><code>str</code></strong>ing by using <code>print</code>, for example; or letting a <span class="sc">REPL</span> convert it automatically.</p>
<div class="ws cmdline">
<div class="line-block"><sup>&nbsp;In[&nbsp;]:</sup> print(type(2 + 3))<br>
<sup>Out[&nbsp;]:</sup> &lt;class 'int'&gt;<br>
<sup>&nbsp;In[&nbsp;]:</sup> type(2 + 3)<br>
<sup>Out[&nbsp;]:</sup> int</div>
</div>
<p>Python does not have a ‘character’ type. A string containing a single character, is the closest option.</p>
<h6 id="py-types-of-some-literals"><em>py — Types of Some Literals</em></h6>
<div class="ws cmdline">
<div class="line-block"><sup>&gt;&gt;&gt;</sup> type(12.34)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="sourceCode python"><span class="co">#⇒ &lt;class 'float'&gt;</span></code><br>
<sup>&gt;&gt;&gt;</sup> type('ABC')&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="sourceCode python"><span class="co">#⇒ &lt;class 'str'&gt;</span></code><br>
<sup>&gt;&gt;&gt;</sup> type("DEF")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="sourceCode python"><span class="co">#⇒ &lt;class 'str'&gt;</span></code><br>
<sup>&gt;&gt;&gt;</sup> type('A')&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="sourceCode python"><span class="co">#⇒ &lt;class 'str'&gt;</span></code><br>
<sup>&gt;&gt;&gt;</sup> type("B")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code class="sourceCode python"><span class="co">#⇒ &lt;class 'str'&gt;</span></code></div>
</div>
<h6 id="py-using-to_int-example"><em>py — Using <code>to_int</code> Example</em></h6>
<div class="sourceCode" id="cb180"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb180-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb180-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb180-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> to_int(s, fail<span class="op">=</span><span class="va">None</span>):</span>
<span id="cb180-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-4" aria-hidden="true" tabindex="-1"></a>   <span class="co">"""</span></span>
<span id="cb180-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-5" aria-hidden="true" tabindex="-1"></a><span class="co">   An exception-free “conversion” from a string to an `int`. Optionally,</span></span>
<span id="cb180-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-6" aria-hidden="true" tabindex="-1"></a><span class="co">   caller can specify what to return for invalid input (a default).</span></span>
<span id="cb180-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-7" aria-hidden="true" tabindex="-1"></a><span class="co">   """</span></span>
<span id="cb180-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-8" aria-hidden="true" tabindex="-1"></a>   <span class="cf">try</span>:</span>
<span id="cb180-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-9" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> <span class="bu">int</span>(s)</span>
<span id="cb180-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-10" aria-hidden="true" tabindex="-1"></a>   <span class="cf">except</span>:</span>
<span id="cb180-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-11" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> fail</span>
<span id="cb180-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb180-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-13" aria-hidden="true" tabindex="-1"></a>num <span class="op">=</span> to_int(<span class="bu">input</span>(<span class="st">"Number (1..10)?: "</span>))</span>
<span id="cb180-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-14" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> num <span class="kw">is</span> <span class="va">None</span>:</span>
<span id="cb180-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-15" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"Bad input (not a number)"</span>)</span>
<span id="cb180-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-16" aria-hidden="true" tabindex="-1"></a>   sys.exit(<span class="dv">1</span>)</span>
<span id="cb180-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-17" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> num <span class="op">&lt;</span> <span class="dv">1</span> <span class="kw">or</span> num <span class="op">&gt;</span> <span class="dv">10</span>:</span>
<span id="cb180-18"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-18" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"Bad! Number not in range!"</span>)</span>
<span id="cb180-19"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-19" aria-hidden="true" tabindex="-1"></a>   sys.exit(<span class="dv">2</span>)</span>
<span id="cb180-20"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb180-21"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb180-21" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"Yay! Number is in range!"</span>)</span></code></pre></div>
<p>It is common for some scripts to terminate with an error message during validation. The exit code should not be <code>0</code> in such cases. Also, error message should not be printed as above (to ‘standard output’)… instead, it should printed to ‘standard error’, which in Python, we can achieve in two ways:</p>
<h6 id="py-write-error-messages-to-standard-output"><em>py — Write Error Messages to Standard Output</em></h6>
<div class="sourceCode" id="cb181"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb181-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb181-1" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(<span class="st">"ERROR message"</span>, <span class="bu">file</span><span class="op">=</span>sys.stderr)</span>
<span id="cb181-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb181-2" aria-hidden="true" tabindex="-1"></a>sys.stderr.write(<span class="st">"ERROR message"</span>)</span></code></pre></div>
<h3 id="if-statement-syntax">If Statement Syntax</h3>
<p><strong><code>if</code></strong> <span class="stx">condition</span><strong><code>:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span><br>
<strong><code>else:</code></strong><br>
<span class="tab1"></span><span class="stx">block</span></p>
<p>The <span class="stx">condition</span> is an <span class="stx">expr</span> which will be treated as <code>True</code>, as long as it is not <code>0</code>, <code>0.0</code>, <code>None</code>, or an empty list, tuple or dictionary. For these special values, the result will be treated as <code>False</code>. The <code>True</code> and <code>False</code> literals have type <code>bool</code>.</p>
<h6 id="if-statement-example-check-oddeven-numbers"><em>If Statement Example — Check Odd/Even Numbers</em></h6>
<div class="sourceCode" id="cb182"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb182-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb182-1" aria-hidden="true" tabindex="-1"></a>num <span class="op">=</span> to_int(<span class="st">"Integer?: "</span>)</span>
<span id="cb182-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb182-2" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> num <span class="op">%</span> <span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span>:</span>
<span id="cb182-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb182-3" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"</span><span class="sc">{0}</span><span class="st"> is EVEN"</span>.<span class="bu">format</span>(num))</span>
<span id="cb182-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb182-4" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb182-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb182-5" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(<span class="st">"</span><span class="sc">{0}</span><span class="st"> is ODD"</span>.<span class="bu">format</span>(num))</span></code></pre></div>
<h2 id="dies-secundus">Dies Secundus</h2>
<p>The topics for this day, is covered <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#collections-sequences">above</a>, and in the <a href="https://incusdata.site/pan/py/python-ipyp-20201207-code.html#example-solutions">code page</a></p>
<h2 id="dies-tertium">Dies Tertium</h2>
<h3 id="powershell-on-windows">PowerShell on Windows</h3>
<p>By default PowerShell on Windows 10 will not execute scripts. You must enable it.</p>
<h6 id="pwsh-set-script-execution-policy"><em>pwsh — Set Script Execution Policy</em></h6>
<div class="ws cmdline">
<div class="line-block"><sup>&gt;</sup> Set-ExecutionPolicy Unrestricted -Scope LocalMachine -Force</div>
</div>
<p>If <code>LocalMachine</code> does not work, try <code>CurrentUser</code> instead. Also check the documentation for <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.1"><code>Set-ExecutionPolicy</code></a>.</p>
<p>If nothing works, you may have to discuss this with your IT deparment, or use the Command Prompt (<code>cmd.exe</code>). Without script execution permissions, you will not be able to activate a Python virtual environment in PowerShell, but it will stil be possible in the Command Prompt.</p>
<h4 id="install-powershell-7">Install PowerShell 7</h4>
<p>Regardless, one should not use the ‘Windows PowerShell’, which is the legacy PowerShell 5 installed by default on Windows 10. Rather install ‘PowerShell 7’ from the <a href="https://www.microsoft.com/en-us/p/powershell/9mz1snwt0n5d#activetab=pivot:overviewtab">Windows Store</a> (requires Admin rights), or from <a href="https://github.com/powershell/powershell#get-powershell">GitHub</a>. If you choose a <code>.zip</code> archive, e.g. <a href="https://github.com/PowerShell/PowerShell/releases/download/v7.1.0/PowerShell-7.1.0-win-arm64.zip">PowerShell-7.1.0-win-arm64.zip</a>, you can just unzip it to some convenient directory, and set your <code>PATH</code> environment variable to that directory, none of which requires Administrator rights.</p>
<p>In the directory where you extracted PowerShell7, you can create a <code>profile.ps1</code> file containing any required customisations, which will apply any type you run <code>pwsh.exe</code> (the executable for PowerShell 7).</p>
<h3 id="some-dictionary-topics">Some Dictionary Topics</h3>
<p>A Python <code>dict</code> (dictionary) type is a data structure that can store name/value <em>pairs</em>, called <em>items</em>. The subscript operator can be applied to <code>dict</code> objects, enclosing a <em>key</em>; the result will be the <em>value</em> for that key.</p>
<h4 id="creating-dictionaries">Creating Dictionaries</h4>
<p>A dictionary object can be created by calling the <a href="https://docs.python.org/3/library/functions.html#dict" title="PyDoc — Built-in Functions # dict()"><strong><code>dict</code></strong></a> function, which has various options regarding the arguments that it accepts. Alternatively, one can create one using curly braces surrounding key/value <em>pairs</em> of items, where a key and value is separated by a colon (<code>:</code>).</p>
<h6 id="py-creating-dictionary-objects"><em>py — Creating Dictionary Objects</em></h6>
<div class="sourceCode" id="cb183"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb183-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb183-1" aria-hidden="true" tabindex="-1"></a>d <span class="op">=</span> <span class="bu">dict</span>()                     <span class="co">#←create an empty dictionary.</span></span>
<span id="cb183-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb183-2" aria-hidden="true" tabindex="-1"></a>d <span class="op">=</span> {}                         <span class="co">#←create an empty dictionary.</span></span>
<span id="cb183-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb183-3" aria-hidden="true" tabindex="-1"></a>l <span class="op">=</span> [(<span class="st">'A'</span>, <span class="dv">11</span>), (<span class="st">'B'</span>, <span class="dv">22</span>),     <span class="co">#←list with item pairs.</span></span>
<span id="cb183-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb183-4" aria-hidden="true" tabindex="-1"></a>     (<span class="st">'C'</span>, <span class="dv">33</span>), (<span class="st">'D'</span>, <span class="dv">33</span>)]</span>
<span id="cb183-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb183-5" aria-hidden="true" tabindex="-1"></a>d <span class="op">=</span> <span class="bu">dict</span>(l)                    <span class="co">#←dictionary from item pairs.</span></span>
<span id="cb183-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb183-6" aria-hidden="true" tabindex="-1"></a>d <span class="op">=</span> <span class="bu">dict</span>(A<span class="op">=</span><span class="dv">11</span>, B<span class="op">=</span><span class="dv">22</span>,           <span class="co">#←dictionary from keyword args.</span></span>
<span id="cb183-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb183-7" aria-hidden="true" tabindex="-1"></a>         C<span class="op">=</span><span class="dv">33</span>, D<span class="op">=</span><span class="dv">44</span>)</span>
<span id="cb183-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb183-8" aria-hidden="true" tabindex="-1"></a>k <span class="op">=</span> [<span class="st">'A'</span>, <span class="st">'B'</span>, <span class="st">'C'</span>, <span class="st">'D'</span>]       <span class="co">#←list of keys.</span></span>
<span id="cb183-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb183-9" aria-hidden="true" tabindex="-1"></a>v <span class="op">=</span> [<span class="dv">11</span>, <span class="dv">22</span>, <span class="dv">33</span>, <span class="dv">44</span>]           <span class="co">#←list of values.</span></span>
<span id="cb183-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb183-10" aria-hidden="true" tabindex="-1"></a>d <span class="op">=</span> <span class="bu">dict</span>(<span class="bu">zip</span>(k,v))             <span class="co">#←dictionary from zipped pairs.</span></span></code></pre></div>
<p>See the <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#dictionaries">Dictionaries</a> above for more examples and rules.</p>
<h3 id="statements-1">Statements</h3>
<p>Covered <a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#statements">above</a>.</p>
<h2 id="dies-quartum">Dies Quartum</h2>
<h3 id="comprehensions-1">Comprehensions</h3>
<p>A comprehension is a syntax that presents a concise way to create a list, set, or generator. The same effect can be achieved using a ‘normal’ <code>for</code> loop, at the expense of more verbose code.</p>
<h6 id="py-list-comprehension-example"><em>py — List comprehension example</em></h6>
<div class="sourceCode" id="cb184"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb184-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb184-1" aria-hidden="true" tabindex="-1"></a>mylist <span class="op">=</span> [<span class="st">'A'</span> <span class="op">*</span> i <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">4</span>)]</span>
<span id="cb184-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb184-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(mylist)                          <span class="co">#⇒['A', 'AA', 'AAA']</span></span></code></pre></div>
<p>The same result can be achieved by starting with an empty list, and then appending items in <code>for</code> loop:</p>
<h6 id="py-list-creation-with-for-loop"><em>py — List creation with for loop</em></h6>
<div class="sourceCode" id="cb185"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb185-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb185-1" aria-hidden="true" tabindex="-1"></a>mylist <span class="op">=</span> []</span>
<span id="cb185-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb185-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">4</span>):</span>
<span id="cb185-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb185-3" aria-hidden="true" tabindex="-1"></a>   mylist.append(<span class="st">'A'</span> <span class="op">*</span> i)</span>
<span id="cb185-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb185-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(mylist)                          <span class="co">#⇒['A', 'AA', 'AAA']</span></span></code></pre></div>
<p>One can also reason the other way: given a loop similar to the code above, rewrite it as a comprehension:</p>
<h6 id="py-another-list-with-a-for-loop"><em>py — Another list with a for loop</em></h6>
<div class="sourceCode" id="cb186"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb186-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb186-1" aria-hidden="true" tabindex="-1"></a>mylist <span class="op">=</span> []</span>
<span id="cb186-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb186-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">5</span>):</span>
<span id="cb186-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb186-3" aria-hidden="true" tabindex="-1"></a>   mylist.append((i, i<span class="op">**</span><span class="dv">3</span>))</span>
<span id="cb186-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb186-4" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(mylist)                      <span class="co">#⇒[(1, 1), (2, 8), (3, 27), (4, 64)]</span></span></code></pre></div>
<p>Rewrite the above code using a list comprehension. Here is a solution:</p>
<h6 id="py-another-list-comprehension"><em>py — Another list comprehension</em></h6>
<div class="sourceCode" id="cb187"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb187-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb187-1" aria-hidden="true" tabindex="-1"></a>mylist <span class="op">=</span> [(i, i<span class="op">**</span><span class="dv">3</span>) <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">1</span>,<span class="dv">5</span>)]</span>
<span id="cb187-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb187-2" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(mylist)                      <span class="co">#⇒[(1, 1), (2, 8), (3, 27), (4, 64)]</span></span></code></pre></div>
<hr>
<h6 id="ipython-some-list-comprehension-examples"><em>ipython — Some list comprehension examples</em></h6>
<div class="ws cmdline">
<div class="line-block"><sup>In&nbsp;[1]:</sup> ['A' for i in range(5)]<br>
<sup>Out[1]:</sup> ['A', 'A', 'A', 'A', 'A']<br>
<br>
<sup>In&nbsp;[2]:</sup> [i for i in range(5)]<br>
<sup>Out[2]:</sup> [0, 1, 2, 3, 4]<br>
<br>
<sup>In&nbsp;[3]:</sup> ['A' * i for i in range(5)]<br>
<sup>Out[3]:</sup> ['', 'A', 'AA', 'AAA', 'AAAA']<br>
<br>
<sup>In&nbsp;[4]:</sup> ['A' * i for i in range(5) if i != 3]<br>
<sup>Out[4]:</sup> ['', 'A', 'AA', 'AAAA']</div>
<div class="line-block"><sup>In&nbsp;[4]:</sup> [i ** 2 for i in range(7) if i % 2 == 0]<br>
<sup>Out[4]:</sup> [0, 4, 16, 36]</div>
</div>
<hr>
<div class="sourceCode" id="cb188"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb188-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb188-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb188-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb188-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb188-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb188-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> func():</span>
<span id="cb188-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb188-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"func() called..."</span>)</span>
<span id="cb188-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb188-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">raise</span> <span class="pp">ValueError</span>(<span class="st">"some error from some function"</span>)</span>
<span id="cb188-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb188-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb188-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb188-7" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> main():</span>
<span id="cb188-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb188-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span>:</span>
<span id="cb188-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb188-9" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="st">"start of main()..."</span>)</span>
<span id="cb188-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb188-10" aria-hidden="true" tabindex="-1"></a>        func()</span>
<span id="cb188-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb188-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">except</span> <span class="pp">ValueError</span> <span class="im">as</span> ex:</span>
<span id="cb188-12"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb188-12" aria-hidden="true" tabindex="-1"></a>        <span class="bu">print</span>(<span class="ss">f"ERROR: </span><span class="sc">{ex}</span><span class="ss">"</span>, <span class="bu">file</span><span class="op">=</span>sys.stderr)</span>
<span id="cb188-13"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb188-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span></span>
<span id="cb188-14"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb188-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb188-15"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb188-15" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">"end of main()..."</span>)</span>
<span id="cb188-16"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb188-16" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">"__main__"</span>:</span>
<span id="cb188-17"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb188-17" aria-hidden="true" tabindex="-1"></a>    main()</span></code></pre></div>
<hr>
<div class="sourceCode" id="cb189"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb189-1"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb189-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> change(n):</span>
<span id="cb189-2"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb189-2" aria-hidden="true" tabindex="-1"></a>   n[<span class="dv">0</span>] <span class="op">=</span> <span class="st">'ZZZZZ'</span></span>
<span id="cb189-3"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb189-3" aria-hidden="true" tabindex="-1"></a>   <span class="bu">print</span>(n)                 <span class="co">#⇒['ZZZZZ', 'BBBBB']</span></span>
<span id="cb189-4"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb189-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb189-5"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb189-5" aria-hidden="true" tabindex="-1"></a>names <span class="op">=</span> [<span class="st">'AAAAA'</span>, <span class="st">'BBBBB'</span>]</span>
<span id="cb189-6"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb189-6" aria-hidden="true" tabindex="-1"></a>change(names)               <span class="co">#⇒['ZZZZZ', 'BBBBB']</span></span>
<span id="cb189-7"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb189-7" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(names)                <span class="co">#⇒['ZZZZZ', 'BBBBB']</span></span>
<span id="cb189-8"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb189-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb189-9"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb189-9" aria-hidden="true" tabindex="-1"></a>names <span class="op">=</span> [<span class="st">'AAAAA'</span>, <span class="st">'BBBBB'</span>]</span>
<span id="cb189-10"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb189-10" aria-hidden="true" tabindex="-1"></a>change(names[:])            <span class="co">#⇒['ZZZZZ', 'BBBBB']</span></span>
<span id="cb189-11"><a href="https://incusdata.site/pan/py/python-ipyp-20201207-notes.html#cb189-11" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(names)                <span class="co">#⇒['AAAAA', 'BBBBB']</span></span></code></pre></div>
<div class="history">
<br>
<p>2020-12-07: Created. [brx]</p>
</div>
</div></main>
<footer>
<div class="ftrleft"><a href="http://www.incusdata.com/" title="Main Site">© 2020 Incus Data (Pty) Ltd.</a>
<a href="https://za.linkedin.com/company/incus-data-pty-ltd"><span class="icon-linkedin-rect"></span></a>
<a href="https://www.facebook.com/incusdata/"><span class="icon-facebook-rect"></span></a></div>

<div class="ftrright">Made with 
   <a href="http://www.pandoc.org/" title="Pandoc - a universal document converter">
      Pandoc</a>,
   <a href="https://github.com/adobe-fonts/source-serif-pro#source-serif-pro" title="GitHub — Adobe / Source Serif Pro">Source</a>,
   <a href="https://mozilla.github.io/Fira/" title="Free sans-serif font from Mozilla">Fira</a> &amp;
   <a href="https://be5invis.github.io/Iosevka/" title="Free, condensed monospaced font">Iosevka</a>
</div>
</footer>

<!-- script>document.write('<script src="res/live.js"></'+'script>')</script -->

</body></html>